[
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonAPIGatewayPushToCloudWatchLogs
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": "*"
        }
    ]
},
        PolicyName: AllowLambda
      }
    ],
    Role: APIGatewayToLambda
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:761077331159:table/761077331159-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:SetQueueAttributes",
        "sqs:SendMessage",
        "sqs:ReceiveMessage",
        "sqs:PurgeQueue",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes",
        "sns:Unsubscribe",
        "sns:Subscribe",
        "sns:Publish",
        "sns:ListTopics"
      ],
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-*"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "lambda:UpdateFunctionConfiguration",
        "lambda:UpdateFunctionCode",
        "lambda:InvokeFunction",
        "lambda:GetFunction"
      ],
      "Resource": [
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationSTGS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationDevS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidation*"
      ]
    }
  ]
},
        PolicyName: gss-green-claims-access-role-policy
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Admins
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:761077331159:table/761077331159-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Auditor
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:761077331159:table/761077331159-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:SetQueueAttributes",
        "sqs:SendMessage",
        "sqs:ReceiveMessage",
        "sqs:PurgeQueue",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes",
        "sns:Unsubscribe",
        "sns:Subscribe",
        "sns:Publish",
        "sns:ListTopics"
      ],
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-*"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "lambda:UpdateFunctionConfiguration",
        "lambda:UpdateFunctionCode",
        "lambda:InvokeFunction",
        "lambda:GetFunction"
      ],
      "Resource": [
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationSTGS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationDevS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidation*"
      ]
    }
  ]
},
        PolicyName: gss-green-claims-access-role-policy
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Developers
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "support:*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSSupportAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Support
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:761077331159:table/761077331159-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Teamleads
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::761077331159-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:761077331159:table/761077331159-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:SetQueueAttributes",
        "sqs:SendMessage",
        "sqs:ReceiveMessage",
        "sqs:PurgeQueue",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes",
        "sns:Unsubscribe",
        "sns:Subscribe",
        "sns:Publish",
        "sns:ListTopics"
      ],
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-*",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-*"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "lambda:UpdateFunctionConfiguration",
        "lambda:UpdateFunctionCode",
        "lambda:InvokeFunction",
        "lambda:GetFunction"
      ],
      "Resource": [
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationSTGS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidationDevS3",
        "arn:aws-us-gov:lambda:us-gov-west-1:761077331159:function:HUDXMLValidation*"
      ]
    }
  ]
},
        PolicyName: gss-green-claims-access-role-policy
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Testers
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-GSS-Admins
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-GSS-Security-Auditor
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: AWSCloudFormationStackSetExecutionRole
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"ec2:DescribeAddresses",
				"ec2:DescribeByoipCidrs",
				"ec2:DescribeVpcEndpoints",
				"ec2:DescribeVpcs",
				"iam:GetRole",
				"iam:ListRoles",
				"kms:DescribeKey",
				"kms:GetKeyPolicy",
				"kms:ListGrants",
				"kms:ListKeyPolicies",
				"kms:ListKeys",
				"lambda:GetFunctionUrlConfig",
				"lambda:GetLayerVersionPolicy",
				"lambda:GetPolicy",
				"lambda:ListAliases",
				"lambda:ListFunctions",
				"lambda:ListLayers",
				"lambda:ListLayerVersions",
				"lambda:ListVersionsByFunction",
				"organizations:DescribeAccount",
				"organizations:DescribeOrganization",
				"organizations:DescribeOrganizationalUnit",
				"organizations:ListAccounts",
				"organizations:ListAccountsForParent",
				"organizations:ListAWSServiceAccessForOrganization",
				"organizations:ListChildren",
				"organizations:ListDelegatedAdministrators",
				"organizations:ListOrganizationalUnitsForParent",
				"organizations:ListParents",
				"organizations:ListRoots",
				"s3:DescribeMultiRegionAccessPointOperation",
				"s3:GetAccessPoint",
				"s3:GetAccessPointPolicy",
				"s3:GetAccessPointPolicyStatus",
				"s3:GetAccountPublicAccessBlock",
				"s3:GetBucketAcl",
				"s3:GetBucketLocation",
				"s3:GetBucketPolicyStatus",
				"s3:GetBucketPolicy",
				"s3:GetBucketPublicAccessBlock",
				"s3:GetMultiRegionAccessPoint",
				"s3:GetMultiRegionAccessPointPolicy",
				"s3:GetMultiRegionAccessPointPolicyStatus",
				"s3:ListAccessPoints",
				"s3:ListAllMyBuckets",
				"s3:ListMultiRegionAccessPoints",
				"sns:GetTopicAttributes",
				"sns:ListTopics",
				"secretsmanager:DescribeSecret",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:ListSecrets",
				"sqs:GetQueueAttributes",
				"sqs:ListQueues"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: AccessAnalyzerServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAccessAnalyzer
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
   "Version": "2012-10-17",
   "Statement": [{
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeInstances", 
        "ec2:DescribeImages",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeTransitGatewayAttachments",
        "organizations:ListAccounts",
        "organizations:DescribeAccount",
        "s3:GetBucketPublicAccessBlock",
        "s3:GetEncryptionConfiguration",
        "s3:GetBucketTagging",
        "s3:GetAccountPublicAccessBlock",
        "s3:ListAllMyBuckets",
        "s3:GetBucketAcl",
        "s3:GetBucketPolicy",
        "s3:GetBucketPolicyStatus"
      ],
      "Resource": "*"
    }
   ]
},
        PolicyName: AmazonGuardDutyServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAmazonGuardDuty
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:CancelCommand",
                "ssm:GetCommandInvocation",
                "ssm:ListCommandInvocations",
                "ssm:ListCommands",
                "ssm:SendCommand",
                "ssm:GetAutomationExecution",
                "ssm:GetParameters",
                "ssm:StartAutomationExecution",
                "ssm:ListTagsForResource",
                "ssm:GetCalendarState"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:UpdateServiceSetting",
                "ssm:GetServiceSetting"
            ],
            "Resource": [
                "arn:aws-us-gov:ssm:*:*:servicesetting/ssm/opsitem/*",
                "arn:aws-us-gov:ssm:*:*:servicesetting/ssm/opsdata/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": [
                "arn:aws-us-gov:lambda:*:*:function:SSM*",
                "arn:aws-us-gov:lambda:*:*:function:*:SSM*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "states:DescribeExecution",
                "states:StartExecution"
            ],
            "Resource": [
                "arn:aws-us-gov:states:*:*:stateMachine:SSM*",
                "arn:aws-us-gov:states:*:*:execution:SSM*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "resource-groups:ListGroups",
                "resource-groups:ListGroupResources",
		"resource-groups:GetGroupQuery"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "tag:GetResources"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:SelectResourceConfig"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "compute-optimizer:GetEC2InstanceRecommendations",
                "compute-optimizer:GetEnrollmentStatus"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "support:DescribeTrustedAdvisorChecks",
                "support:DescribeTrustedAdvisorCheckSummaries",
                "support:DescribeTrustedAdvisorCheckResult",
                "support:DescribeCases"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:DescribeComplianceByConfigRule",
                "config:DescribeComplianceByResource",
                "config:DescribeRemediationConfigurations",
                "config:DescribeConfigurationRecorders"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ssm.amazonaws.com"
                    ]
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudformation:ListStackSets",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:ListStackInstances",
                "cloudformation:DescribeStackSetOperation",
                "cloudformation:DeleteStackSet"
            ],
            "Resource": "arn:aws-us-gov:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudformation:DeleteStackInstances",
            "Resource": [
                "arn:aws-us-gov:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*",
                "arn:aws-us-gov:cloudformation:*:*:stackset-target/AWS-QuickSetup-SSM*:*",
                "arn:aws-us-gov:cloudformation:*:*:type/resource/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:PutRule",
                "events:PutTargets"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "events:ManagedBy": "ssm.amazonaws.com"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:RemoveTargets",
                "events:DeleteRule"
            ],
            "Resource": [
                "arn:aws-us-gov:events:*:*:rule/SSMExplorerManagedRule"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "events:DescribeRule",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "securityhub:DescribeHub",
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAmazonSSM
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
   "Version": "2012-10-17",
   "Statement": [
        {
           "Effect": "Allow",
           "Action": [
               "ecs:DescribeServices",
               "ecs:UpdateService",
               "cloudwatch:PutMetricAlarm",
               "cloudwatch:DescribeAlarms",
               "cloudwatch:DeleteAlarms"
            ],
           "Resource": [
               "*"
            ]
        }
    ]
},
        PolicyName: AWSApplicationAutoscalingECSServicePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForApplicationAutoScaling_ECSService
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "EC2InstanceManagement",
			"Effect": "Allow",
			"Action": [
				"ec2:AttachClassicLinkVpc",
				"ec2:CancelSpotInstanceRequests",
				"ec2:CreateFleet",
				"ec2:CreateTags",
				"ec2:DeleteTags",
				"ec2:Describe*",
				"ec2:DetachClassicLinkVpc",
				"ec2:ModifyInstanceAttribute",
				"ec2:RequestSpotInstances",
				"ec2:RunInstances",
				"ec2:StartInstances",
                "ec2:StopInstances",
				"ec2:TerminateInstances"
			],
			"Resource": "*"
		},
		{
			"Sid": "EC2InstanceProfileManagement",
			"Effect": "Allow",
			"Action": [
				"iam:PassRole"
			],
			"Resource": "*",
			"Condition": {
				"StringLike": {
					"iam:PassedToService": "ec2.amazonaws.com*"
				}
			}
		},
		{
			"Sid": "EC2SpotManagement",
			"Effect": "Allow",
			"Action": [
				"iam:CreateServiceLinkedRole"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"iam:AWSServiceName": "spot.amazonaws.com"
				}
			}
		},
		{
			"Sid": "ELBManagement",
			"Effect": "Allow",
			"Action": [
				"elasticloadbalancing:Register*",
				"elasticloadbalancing:Deregister*",
				"elasticloadbalancing:Describe*"
			],
			"Resource": "*"
		},
		{
			"Sid": "CWManagement",
			"Effect": "Allow",
			"Action": [
				"cloudwatch:DeleteAlarms",
				"cloudwatch:DescribeAlarms",
				"cloudwatch:GetMetricData",
				"cloudwatch:PutMetricAlarm"
			],
			"Resource": "*"
		},
		{
			"Sid": "SNSManagement",
			"Effect": "Allow",
			"Action": [
				"sns:Publish"
			],
			"Resource": "*"
		},
		{
			"Sid": "EventBridgeRuleManagement",
			"Effect": "Allow",
			"Action": [
				"events:PutRule",
				"events:PutTargets",
				"events:RemoveTargets",
				"events:DeleteRule",
				"events:DescribeRule"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"events:ManagedBy": "autoscaling.amazonaws.com"
				}
			}
		},
        {
            "Sid": "SystemsManagerParameterManagement",
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameters"
            ],
            "Resource": "*"
        }
	]
},
        PolicyName: AutoScalingServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAutoScaling
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListTagsForResource",
				"account:GetAlternateContact",
				"acm:DescribeCertificate",
				"acm:ListCertificates",
				"acm:ListTagsForCertificate",
				"apigateway:GET",
				"application-autoscaling:DescribeScalableTargets",
				"application-autoscaling:DescribeScalingPolicies",
				"athena:GetDataCatalog",
				"athena:GetWorkGroup",
				"athena:ListDataCatalogs",
				"athena:ListTagsForResource",
				"athena:ListWorkGroups",
				"autoscaling:DescribeAutoScalingGroups",
				"autoscaling:DescribeLaunchConfigurations",
				"autoscaling:DescribeLifecycleHooks",
				"autoscaling:DescribePolicies",
				"autoscaling:DescribeScheduledActions",
				"autoscaling:DescribeTags",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:DescribeBackupVault",
				"backup:DescribeRecoveryPoint",
				"backup:GetBackupPlan",
				"backup:GetBackupSelection",
				"backup:GetBackupVaultAccessPolicy",
				"backup:GetBackupVaultNotifications",
				"backup:ListBackupPlans",
				"backup:ListBackupSelections",
				"backup:ListBackupVaults",
				"backup:ListRecoveryPointsByBackupVault",
				"backup:ListTags",
				"batch:DescribeComputeEnvironments",
				"batch:DescribeJobQueues",
				"batch:ListTagsForResource",
				"cloudformation:DescribeType",
				"cloudformation:GetResource",
				"cloudformation:ListResources",
				"cloudformation:ListTypes",
				"cloudfront:ListDistributions",
				"cloudfront:ListTagsForResource",
				"cloudtrail:DescribeTrails",
				"cloudtrail:GetEventDataStore",
				"cloudtrail:GetEventSelectors",
				"cloudtrail:GetTrailStatus",
				"cloudtrail:ListEventDataStores",
				"cloudtrail:ListTags",
				"cloudwatch:DescribeAlarms",
				"codedeploy:GetDeploymentConfig",
				"codepipeline:GetPipeline",
				"codepipeline:GetPipelineState",
				"codepipeline:ListPipelines",
				"config:BatchGet*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:Put*",
				"config:Select*",
				"dax:DescribeClusters",
				"dax:DescribeParameterGroups",
				"dax:DescribeParameters",
				"dax:DescribeSubnetGroups",
				"dax:ListTags",
				"detective:ListTagsForResource",
				"detective:ListGraphs",
				"dms:DescribeCertificates",
				"dms:DescribeEventSubscriptions",
				"dms:DescribeReplicationInstances",
				"dms:DescribeReplicationSubnetGroups",
				"dms:DescribeReplicationTasks",
				"dms:ListTagsForResource",
				"dynamodb:DescribeContinuousBackups",
				"dynamodb:DescribeGlobalTable",
				"dynamodb:DescribeGlobalTableSettings",
				"dynamodb:DescribeLimits",
				"dynamodb:DescribeTable",
				"dynamodb:ListTables",
				"dynamodb:ListTagsOfResource",
				"ec2:Describe*",
				"ec2:DescribeClientVpnAuthorizationRules",
				"ec2:DescribeClientVpnEndpoints",
				"ec2:DescribeDhcpOptions",
				"ec2:DescribeFleets",
				"ec2:DescribeNetworkAcls",
				"ec2:DescribePlacementGroups",
				"ec2:DescribeSpotFleetRequests",
				"ec2:DescribeVolumeAttribute",
				"ec2:DescribeVolumes",
				"ec2:GetEbsEncryptionByDefault",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:DescribeRepositories",
				"ecr:GetLifecyclePolicy",
				"ecr:GetRepositoryPolicy",
				"ecr:ListTagsForResource",
				"ecs:DescribeClusters",
				"ecs:DescribeServices",
				"ecs:DescribeTaskDefinition",
				"ecs:DescribeTaskSets",
				"ecs:ListClusters",
				"ecs:ListServices",
				"ecs:ListTagsForResource",
				"ecs:ListTaskDefinitionFamilies",
				"ecs:ListTaskDefinitions",
				"eks:DescribeCluster",
				"eks:DescribeFargateProfile",
				"eks:DescribeNodegroup",
				"eks:ListClusters",
				"eks:ListFargateProfiles",
				"eks:ListNodegroups",
				"eks:ListTagsForResource",
				"elasticache:DescribeCacheClusters",
				"elasticache:DescribeCacheParameterGroups",
				"elasticache:DescribeCacheSubnetGroups",
				"elasticache:DescribeReplicationGroups",
				"elasticache:DescribeSnapshots",
				"elasticache:ListTagsForResource",
				"elasticbeanstalk:DescribeConfigurationSettings",
				"elasticbeanstalk:DescribeEnvironments",
				"elasticfilesystem:DescribeAccessPoints",
				"elasticfilesystem:DescribeBackupPolicy",
				"elasticfilesystem:DescribeFileSystemPolicy",
				"elasticfilesystem:DescribeFileSystems",
				"elasticfilesystem:DescribeLifecycleConfiguration",
				"elasticfilesystem:DescribeMountTargets",
				"elasticfilesystem:DescribeMountTargetSecurityGroups",
				"elasticloadbalancing:DescribeListeners",
				"elasticloadbalancing:DescribeLoadBalancerAttributes",
				"elasticloadbalancing:DescribeLoadBalancerPolicies",
				"elasticloadbalancing:DescribeLoadBalancers",
				"elasticloadbalancing:DescribeRules",
				"elasticloadbalancing:DescribeTags",
				"elasticmapreduce:DescribeCluster",
				"elasticmapreduce:DescribeSecurityConfiguration",
				"elasticmapreduce:DescribeStep",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:GetManagedScalingPolicy",
				"elasticmapreduce:ListClusters",
				"elasticmapreduce:ListInstanceFleets",
				"elasticmapreduce:ListInstanceGroups",
				"elasticmapreduce:ListInstances",
				"elasticmapreduce:ListSecurityConfigurations",
				"elasticmapreduce:ListSteps",
				"es:DescribeDomain",
				"es:DescribeDomains",
				"es:DescribeElasticsearchDomain",
				"es:DescribeElasticsearchDomains",
				"es:GetCompatibleElasticsearchVersions",
				"es:GetCompatibleVersions",
				"es:ListDomainNames",
				"es:ListTags",
				"firehose:DescribeDeliveryStream",
				"firehose:ListDeliveryStreams",
				"firehose:ListTagsForDeliveryStream",
				"fsx:DescribeFileSystems",
				"fsx:ListTagsForResource",
				"globalaccelerator:DescribeAccelerator",
				"globalaccelerator:DescribeEndpointGroup",
				"globalaccelerator:DescribeListener",
				"globalaccelerator:ListAccelerators",
				"globalaccelerator:ListEndpointGroups",
				"globalaccelerator:ListListeners",
				"globalaccelerator:ListTagsForResource",
				"glue:BatchGetDevEndpoints",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTags",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListWorkflows",
				"guardduty:GetDetector",
				"guardduty:GetFilter",
				"guardduty:GetFindings",
				"guardduty:GetIPSet",
				"guardduty:GetMasterAccount",
				"guardduty:GetMembers",
				"guardduty:GetThreatIntelSet",
				"guardduty:ListDetectors",
				"guardduty:ListFilters",
				"guardduty:ListFindings",
				"guardduty:ListIPSets",
				"guardduty:ListMembers",
				"guardduty:ListOrganizationAdminAccounts",
				"guardduty:ListTagsForResource",
				"guardduty:ListThreatIntelSets",
				"iam:GenerateCredentialReport",
				"iam:GetAccountAuthorizationDetails",
				"iam:GetAccountPasswordPolicy",
				"iam:GetAccountSummary",
				"iam:GetCredentialReport",
				"iam:GetGroup",
				"iam:GetGroupPolicy",
				"iam:GetPolicy",
				"iam:GetPolicyVersion",
				"iam:GetRole",
				"iam:GetRolePolicy",
				"iam:GetUser",
				"iam:GetUserPolicy",
				"iam:ListAttachedGroupPolicies",
				"iam:ListAttachedRolePolicies",
				"iam:ListAttachedUserPolicies",
				"iam:ListEntitiesForPolicy",
				"iam:ListGroupPolicies",
				"iam:ListGroupsForUser",
				"iam:ListInstanceProfilesForRole",
				"iam:ListPolicyVersions",
				"iam:ListRolePolicies",
				"iam:ListUserPolicies",
				"iam:ListVirtualMFADevices",
				"kafka:DescribeCluster",
				"kafka:ListClusters",
				"kinesis:DescribeStreamConsumer",
				"kinesis:DescribeStreamSummary",
				"kinesis:ListStreamConsumers",
				"kinesis:ListStreams",
				"kinesis:ListTagsForStream",
				"kms:DescribeKey",
				"kms:GetKeyPolicy",
				"kms:GetKeyRotationStatus",
				"kms:ListAliases",
				"kms:ListKeys",
				"kms:ListResourceTags",
				"lambda:GetAlias",
				"lambda:GetFunction",
				"lambda:GetFunctionCodeSigningConfig",
				"lambda:GetPolicy",
				"lambda:ListAliases",
				"lambda:ListFunctions",
				"lambda:ListVersionsByFunction",
				"logs:DescribeLogGroups",
				"logs:ListTagsLogGroup",
				"macie2:GetMacieSession",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:ListFirewalls",
				"opsworks:DescribeLayers",
				"opsworks:ListTags",
				"organizations:DescribeOrganization",
				"organizations:DescribePolicy",
				"organizations:ListParents",
				"organizations:ListPolicies",
				"organizations:ListPoliciesForTarget",
				"ram:GetResourceShareAssociations",
				"ram:GetResourceShares",
				"rds:DescribeDBClusterParameterGroups",
				"rds:DescribeDBClusterParameters",
				"rds:DescribeDBClusters",
				"rds:DescribeDBClusterSnapshotAttributes",
				"rds:DescribeDBClusterSnapshots",
				"rds:DescribeDBEngineVersions",
				"rds:DescribeDBInstances",
				"rds:DescribeDBParameterGroups",
				"rds:DescribeDBParameters",
				"rds:DescribeDBSecurityGroups",
				"rds:DescribeDBSnapshotAttributes",
				"rds:DescribeDBSnapshots",
				"rds:DescribeDBSubnetGroups",
				"rds:DescribeEventSubscriptions",
				"rds:DescribeOptionGroups",
				"rds:ListTagsForResource",
				"redshift:DescribeClusterParameterGroups",
				"redshift:DescribeClusterParameters",
				"redshift:DescribeClusters",
				"redshift:DescribeClusterSecurityGroups",
				"redshift:DescribeClusterSnapshots",
				"redshift:DescribeClusterSubnetGroups",
				"redshift:DescribeEventSubscriptions",
				"redshift:DescribeLoggingStatus",
				"route53:GetHealthCheck",
				"route53:GetHostedZone",
				"route53:ListHealthChecks",
				"route53:ListHostedZones",
				"route53:ListHostedZonesByName",
				"route53:ListQueryLoggingConfigs",
				"route53:ListResourceRecordSets",
				"route53:ListTagsForResource",
				"route53resolver:GetResolverEndpoint",
				"route53resolver:GetResolverRule",
				"route53resolver:GetResolverRuleAssociation",
				"route53resolver:ListResolverEndpointIpAddresses",
				"route53resolver:ListResolverEndpoints",
				"route53resolver:ListResolverRuleAssociations",
				"route53resolver:ListResolverRules",
				"route53resolver:ListTagsForResource",
				"s3:GetAccelerateConfiguration",
				"s3:GetAccessPoint",
				"s3:GetAccessPointPolicy",
				"s3:GetAccessPointPolicyStatus",
				"s3:GetAccountPublicAccessBlock",
				"s3:GetBucketAcl",
				"s3:GetBucketCORS",
				"s3:GetBucketLocation",
				"s3:GetBucketLogging",
				"s3:GetBucketNotification",
				"s3:GetBucketObjectLockConfiguration",
				"s3:GetBucketPolicy",
				"s3:GetBucketPublicAccessBlock",
				"s3:GetBucketRequestPayment",
				"s3:GetBucketTagging",
				"s3:GetBucketVersioning",
				"s3:GetBucketWebsite",
				"s3:GetEncryptionConfiguration",
				"s3:GetLifecycleConfiguration",
				"s3:GetReplicationConfiguration",
				"s3:ListAccessPoints",
				"s3:ListAllMyBuckets",
				"s3:ListBucket",
				"sagemaker:DescribeCodeRepository",
				"sagemaker:DescribeEndpoint",
				"sagemaker:DescribeEndpointConfig",
				"sagemaker:DescribeModel",
				"sagemaker:DescribeMonitoringSchedule",
				"sagemaker:DescribeNotebookInstance",
				"sagemaker:DescribeNotebookInstanceLifecycleConfig",
				"sagemaker:DescribeWorkteam",
				"sagemaker:ListCodeRepositories",
				"sagemaker:ListEndpointConfigs",
				"sagemaker:ListEndpoints",
				"sagemaker:ListModels",
				"sagemaker:ListMonitoringSchedules",
				"sagemaker:ListNotebookInstanceLifecycleConfigs",
				"sagemaker:ListNotebookInstances",
				"sagemaker:ListTags",
				"sagemaker:ListWorkteams",
				"secretsmanager:ListSecrets",
				"secretsmanager:ListSecretVersionIds",
				"securityhub:DescribeHub",
				"ses:GetConfigurationSet",
				"ses:GetConfigurationSetEventDestinations",
				"ses:ListConfigurationSets",
				"shield:DescribeDRTAccess",
				"shield:DescribeProtection",
				"shield:DescribeSubscription",
				"sns:GetSubscriptionAttributes",
				"sns:GetTopicAttributes",
				"sns:ListSubscriptions",
				"sns:ListSubscriptionsByTopic",
				"sns:ListTagsForResource",
				"sns:ListTopics",
				"sqs:GetQueueAttributes",
				"sqs:ListQueues",
				"sqs:ListQueueTags",
				"ssm:DescribeAutomationExecutions",
				"ssm:DescribeDocument",
				"ssm:DescribeDocumentPermission",
				"ssm:GetAutomationExecution",
				"ssm:GetDocument",
				"ssm:ListDocuments",
				"sso:DescribeInstanceAccessControlAttributeConfiguration",
				"sso:DescribePermissionSet",
				"sso:ListManagedPoliciesInPermissionSet",
				"sso:ListPermissionSets",
				"sso:ListTagsForResource",
				"states:DescribeActivity",
				"states:DescribeStateMachine",
				"states:ListActivities",
				"states:ListStateMachines",
				"states:ListTagsForResource",
				"storagegateway:ListGateways",
				"storagegateway:ListTagsForResource",
				"storagegateway:ListVolumes",
				"support:DescribeCases",
				"tag:GetResources",
				"waf-regional:GetLoggingConfiguration",
				"waf-regional:GetWebACL",
				"waf-regional:GetWebACLForResource",
				"waf:GetLoggingConfiguration",
				"waf:GetWebACL",
				"wafv2:GetLoggingConfiguration",
				"wafv2:GetRuleGroup",
				"wafv2:ListRuleGroups",
				"wafv2:ListTagsForResource",
				"workspaces:DescribeConnectionAliases",
				"workspaces:DescribeTags",
				"workspaces:DescribeWorkspaces"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogStream",
				"logs:CreateLogGroup"
			],
			"Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/config/*"
		},
		{
			"Effect": "Allow",
			"Action": "logs:PutLogEvents",
			"Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
		}
	]
},
        PolicyName: AWSConfigServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForConfig
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "ECSTaskManagement",
            "Effect": "Allow",
            "Action": [
                "ec2:AttachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteNetworkInterfacePermission",
                "ec2:Describe*",
                "ec2:DetachNetworkInterface",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:RegisterTargets",
                "route53:ChangeResourceRecordSets",
                "route53:CreateHealthCheck",
                "route53:DeleteHealthCheck",
                "route53:Get*",
                "route53:List*",
                "route53:UpdateHealthCheck",
                "servicediscovery:DeregisterInstance",
                "servicediscovery:Get*",
                "servicediscovery:List*",
                "servicediscovery:RegisterInstance",
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AutoScaling",
            "Effect": "Allow",
            "Action": [
                "autoscaling:Describe*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AutoScalingManagement",
            "Effect": "Allow",
            "Action": [
                "autoscaling:DeletePolicy",
                "autoscaling:PutScalingPolicy",
                "autoscaling:SetInstanceProtection",
                "autoscaling:UpdateAutoScalingGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "autoscaling:ResourceTag/AmazonECSManaged": "false"
                }
            }
        },
        {
            "Sid": "AutoScalingPlanManagement",
            "Effect": "Allow",
            "Action": [
                "autoscaling-plans:CreateScalingPlan",
                "autoscaling-plans:DeleteScalingPlan",
                "autoscaling-plans:DescribeScalingPlans"
            ],
            "Resource": "*"
        },
        {
            "Sid": "CWAlarmManagement",
            "Effect": "Allow",
            "Action": [
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "arn:aws-us-gov:cloudwatch:*:*:alarm:*"
        },
        {
            "Sid": "ECSTagging",
            "Effect": "Allow",
            "Action": [
                "ec2:CreateTags"
            ],
            "Resource": "arn:aws-us-gov:ec2:*:*:network-interface/*"
        },
        {
            "Sid": "CWLogGroupManagement",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/ecs/*"
        },
        {
            "Sid": "CWLogStreamManagement",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
        },
        {
            "Sid": "ExecuteCommandSessionManagement",
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeSessions"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ExecuteCommand",
            "Effect": "Allow",
            "Action": [
                "ssm:StartSession"
            ],
            "Resource": [
                "arn:aws-us-gov:ecs:*:*:task/*",
                "arn:aws-us-gov:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
            ]
        }
    ]
},
        PolicyName: AmazonECSServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForECS
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeAddresses",
                "ec2:DescribeCoipPools",
                "ec2:DescribeInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeVpcs",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeClassicLinkInstances",
                "ec2:DescribeVpcClassicLink",
                "ec2:CreateSecurityGroup",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:GetCoipPoolUsage",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:AllocateAddress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AssociateAddress",
                "ec2:DisassociateAddress",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:AssignIpv6Addresses",
                "ec2:ReleaseAddress",
                "ec2:UnassignIpv6Addresses",
                "ec2:DescribeVpcPeeringConnections",
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "outposts:GetOutpostInstanceTypes"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AWSElasticLoadBalancingServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForElasticLoadBalancing
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations",
            "Effect": "Allow",
            "Action": [
                "iam:DeleteRole"
            ],
            "Resource": [
                "arn:aws-us-gov:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ]
        },
        {
            "Sid": "AllowCreationOfServiceLinkedRoles",
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AWSOrganizationsServiceTrustPolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForOrganizations
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"rds:CrossRegionCommunication"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"ec2:AllocateAddress",
				"ec2:AssociateAddress",
				"ec2:AuthorizeSecurityGroupIngress",
				"ec2:CreateCoipPoolPermission",
				"ec2:CreateLocalGatewayRouteTablePermission",
				"ec2:CreateNetworkInterface",
				"ec2:CreateSecurityGroup",
				"ec2:DeleteCoipPoolPermission",
				"ec2:DeleteLocalGatewayRouteTablePermission",
				"ec2:DeleteNetworkInterface",
				"ec2:DeleteSecurityGroup",
				"ec2:DescribeAddresses",
				"ec2:DescribeAvailabilityZones",
				"ec2:DescribeCoipPools",
				"ec2:DescribeInternetGateways",
				"ec2:DescribeLocalGatewayRouteTablePermissions",
				"ec2:DescribeLocalGatewayRouteTables",
				"ec2:DescribeLocalGatewayRouteTableVpcAssociations",
				"ec2:DescribeLocalGateways",
				"ec2:DescribeSecurityGroups",
				"ec2:DescribeSubnets",
				"ec2:DescribeVpcAttribute",
				"ec2:DescribeVpcs",
				"ec2:DisassociateAddress",
				"ec2:ModifyNetworkInterfaceAttribute",
				"ec2:ModifyVpcEndpoint",
				"ec2:ReleaseAddress",
				"ec2:RevokeSecurityGroupIngress",
				"ec2:CreateVpcEndpoint",
				"ec2:DescribeVpcEndpoints",
				"ec2:DeleteVpcEndpoints",
				"ec2:AssignPrivateIpAddresses",
				"ec2:UnassignPrivateIpAddresses"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"sns:Publish"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogGroup"
			],
			"Resource": [
				"arn:aws-us-gov:logs:*:*:log-group:/aws/rds/*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/docdb/*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/neptune/*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogStream",
				"logs:PutLogEvents",
				"logs:DescribeLogStreams"
			],
			"Resource": [
				"arn:aws-us-gov:logs:*:*:log-group:/aws/rds/*:log-stream:*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"kinesis:CreateStream",
				"kinesis:PutRecord",
				"kinesis:PutRecords",
				"kinesis:DescribeStream",
				"kinesis:SplitShard",
				"kinesis:MergeShards",
				"kinesis:DeleteStream",
				"kinesis:UpdateShardCount"
			],
			"Resource": [
				"arn:aws-us-gov:kinesis:*:*:stream/aws-rds-das-*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"cloudwatch:PutMetricData"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"cloudwatch:namespace": [
						"AWS/DocDB",
						"AWS/Neptune",
						"AWS/RDS",
						"AWS/Usage"
					]
				}
			}
		}
	]
},
        PolicyName: AmazonRDSServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForRDS
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudtrail:DescribeTrails",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:GetEventSelectors",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "logs:DescribeMetricFilters",
                "sns:ListSubscriptionsByTopic",
                "config:DescribeConfigurationRecorders",
                "config:DescribeConfigurationRecorderStatus",
                "config:DescribeConfigRules",
                "config:BatchGetResourceConfig",
                "config:SelectResourceConfig",
                "iam:GenerateCredentialReport",
                "iam:GetCredentialReport",
                "organizations:ListAccounts",
                "organizations:DescribeAccount",
                "organizations:DescribeOrganization",
                "config:PutEvaluations"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:PutConfigRule",
                "config:DeleteConfigRule",
                "config:GetComplianceDetailsByConfigRule",
                "config:DescribeConfigRuleEvaluationStatus"
            ],
            "Resource": "arn:aws-us-gov:config:*:*:config-rule/aws-service-rule/*securityhub*"
        }
    ]
},
        PolicyName: AWSSecurityHubServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForSecurityHub
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DeleteNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:AssignIpv6Addresses",
                "ec2:UnAssignIpv6Addresses"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "0"
        }
    ]
},
        PolicyName: AWSVPCTransitGatewayServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForVPCTransitGateway
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-dev-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/dev-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/5e5aca0b-b41a-4038-aba0-e5911a02637d"
    }
 ]
}
,
        PolicyName: claims-dev-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-dev-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-dev-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-dev-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/239f4f4f-7ff1-4924-a3d1-a0de749cd603"
    }
  ]
},
        PolicyName: claims-dev-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/fc3d3626-7ff3-420a-8e33-90965c9be72e",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/cda3653f-8824-4efb-a3a1-582876d910f0",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/76f020d9-32fc-4f56-810a-6c8ea64756ce",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/6c15171f-859b-465e-8f77-fc6273b6b924"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-sftp-request-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-gnma-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-edi-ts824-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-edi-ts820-ready-for-sftp-queue"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "ssm:GetParameter",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-dev-claims-sftp-gateway-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-dev-claims-submission-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-submission-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/fc3d3626-7ff3-420a-8e33-90965c9be72e",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/eca201f7-3a24-491f-b933-b487ba7aa310",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/cda3653f-8824-4efb-a3a1-582876d910f0",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/76f020d9-32fc-4f56-810a-6c8ea64756ce",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/5a73a466-b87e-47ca-adce-8e70b9446fca",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/4e51db1f-c404-4a71-91d8-8ee514d923f6",
        "arn:aws-us-gov:kms:us-gov-west-1:338771819009:key/4258ffd3-da60-4a73-9724-c6d2b80151f2",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-dev-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338771819009:ent-services-dev-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-dev-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-claims-validation-complete",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-dev-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701524801511:role/dev-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701524801511:userpool/us-gov-west-1_0EIxLTDGh"
    }
  ]
},
        PolicyName: claims-dev-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:AssumeRole"
            ],
            "Resource": "arn:aws-us-gov:iam::701524801511:role/dev-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-dev-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::761077331159-claims-dev-document-storage/*",
            "arn:aws-us-gov:s3:::761077331159-claims-dev-document-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-dev-certificates-bucket",
            "arn:aws-us-gov:s3:::761077331159-claims-dev-certificates-bucket/*",
            "arn:aws-us-gov:s3:::761077331159-claims-dev-result-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-dev-result-storage/*"
            ]
        }
    ]
}
,
        PolicyName: claims-dev-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-dev-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-dev-claims-validation-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-validation-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject*"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::761077331159-claims-dev-rule-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-dev-rule-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-dev-result-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-dev-result-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-dev-document-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-dev-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/fc3d3626-7ff3-420a-8e33-90965c9be72e",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/eca201f7-3a24-491f-b933-b487ba7aa310",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/cda3653f-8824-4efb-a3a1-582876d910f0",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/76f020d9-32fc-4f56-810a-6c8ea64756ce",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/5a73a466-b87e-47ca-adce-8e70b9446fca",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/4e51db1f-c404-4a71-91d8-8ee514d923f6"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-dev-claims-complete-topic"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-dev-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-dev-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::138145779389-asm-dev-s3-rds-bucket/*",
        "arn:aws-us-gov:s3:::138145779389-asm-dev-s3-rds-bucket"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:Encrypt",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:138145779389:key/*"
    }
  ]
},
        PolicyName: claims-dev-rds-s3-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*",
        "rds:ListTagsForResource",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Effect": "Allow",
      "Resource": "*"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "logs:DescribeLogStreams", 
        "logs:GetLogEvents"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonRDSReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-rds-ingestion-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-dev-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-dev-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-dev-vpc-flow-role-policy
      }
    ],
    Role: claims-dev-vpc-flow-log
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-int-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/int-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/35e37baf-6392-4967-8776-028d01593776"
    }
 ]
}
,
        PolicyName: claims-int-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-int-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-int-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-int-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-int-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/6840999e-06d1-46be-96e5-e720d356dc5b"
    }
  ]
},
        PolicyName: claims-int-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-int-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a263bcd9-ccb3-432e-bbbe-331205506e3a",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/51667e64-979a-4ad8-81b0-dafa4b16ccb9",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/231aba1a-ea70-45b4-bc62-9a3e028bd481",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/11f5381c-709f-4ad8-917b-3db70c89cf8d"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-sftp-request-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-gnma-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-edi-ts824-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-edi-ts820-ready-for-sftp-queue"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "ssm:GetParameter",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-int-claims-sftp-gateway-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-int-claims-submission-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-submission-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/cb6ec18a-1157-4864-9bdc-2d5528646dfe",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a263bcd9-ccb3-432e-bbbe-331205506e3a",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a1f91c98-b77c-40e2-9785-23fa95c7bf4e",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/51667e64-979a-4ad8-81b0-dafa4b16ccb9",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/11f5381c-709f-4ad8-917b-3db70c89cf8d",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/0aaff094-77fe-4fe8-9672-59baf89f4f17",
        "arn:aws-us-gov:kms:us-gov-west-1:338771819009:key/6075dc1e-91fb-4f15-beca-6b22483a30a5",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-int-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338771819009:ent-services-int-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-int-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-claims-validation-complete",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-int-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701524801511:role/int-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701524801511:userpool/us-gov-west-1_Dytb7rkR7"
    }
  ]
},
        PolicyName: claims-int-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws-us-gov:iam::701524801511:role/int-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-int-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::761077331159-claims-int-document-storage/*",
            "arn:aws-us-gov:s3:::761077331159-claims-int-document-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-int-certificates-bucket",
            "arn:aws-us-gov:s3:::761077331159-claims-int-certificates-bucket/*",
            "arn:aws-us-gov:s3:::761077331159-claims-int-result-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-int-result-storage/*"
            ]
        }
    ]
}
,
        PolicyName: claims-int-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-int-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-int-claims-validation-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-validation-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject*"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::761077331159-claims-int-rule-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-int-rule-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-int-result-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-int-result-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-int-document-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-int-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/cb6ec18a-1157-4864-9bdc-2d5528646dfe",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a263bcd9-ccb3-432e-bbbe-331205506e3a",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a1f91c98-b77c-40e2-9785-23fa95c7bf4e",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/51667e64-979a-4ad8-81b0-dafa4b16ccb9",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/11f5381c-709f-4ad8-917b-3db70c89cf8d",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/0aaff094-77fe-4fe8-9672-59baf89f4f17"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-int-claims-complete-topic"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-int-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-int-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-int-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-int-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::138145779389-asm-int-s3-rds-bucket/*",
        "arn:aws-us-gov:s3:::138145779389-asm-int-s3-rds-bucket"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:Encrypt",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:138145779389:key/*"
    }
  ]
},
        PolicyName: claims-int-rds-s3-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*",
        "rds:ListTagsForResource",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Effect": "Allow",
      "Resource": "*"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "logs:DescribeLogStreams", 
        "logs:GetLogEvents"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonRDSReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-int-rds-ingestion-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-int-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-int-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-int-vpc-flow-role-policy
      }
    ],
    Role: claims-int-vpc-flow-log
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-test-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/test-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/c1b98d37-6e12-44ed-a1f5-ed097be08736"
    }
 ]
}
,
        PolicyName: claims-test-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-test-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-test-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-test-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::761077331159-infrastructure-claims-test-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/a2540b30-44f2-4ee2-9e2e-5f1f5a54b87e"
    }
  ]
},
        PolicyName: claims-test-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-test-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/daeb9218-6b97-40db-961f-ad21a50300cb",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/d7f676eb-cc90-45d4-ad78-ee742f0079c1",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/9813e746-3768-4bd1-bc77-8f93ba54e9a7",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/1f0cbb56-352c-4340-b5e0-029497994fe8"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeVpcs",
        "ec2:DescribeSubnets",
        "ec2:DescribeSecurityGroups"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-sftp-request-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-gnma-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-edi-ts824-ready-for-sftp-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-edi-ts820-ready-for-sftp-queue"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "ssm:GetParameter",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-test-claims-sftp-gateway-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-test-claims-submission-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-submission-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/daeb9218-6b97-40db-961f-ad21a50300cb",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/d7f676eb-cc90-45d4-ad78-ee742f0079c1",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/9813e746-3768-4bd1-bc77-8f93ba54e9a7",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/9439770e-8643-4034-bec2-1489796318eb",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/478c2ef2-3fc5-48df-91e9-b9fd9c26fcb7",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/044878c3-e1dc-4249-98d9-8611fe77502b",
        "arn:aws-us-gov:kms:us-gov-west-1:338771819009:key/bab0fb1c-4d96-430d-9cf5-5bbde8f509bc",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-test-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338771819009:ent-services-test-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-test-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-claims-validation-complete",
        "arn:aws-us-gov:iam::338771819009:role/ent-services-test-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701524801511:role/test-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701524801511:userpool/us-gov-west-1_45yXIhrzh"
    }
  ]
},
        PolicyName: claims-test-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws-us-gov:iam::701524801511:role/test-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-test-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::761077331159-claims-test-document-storage/*",
            "arn:aws-us-gov:s3:::761077331159-claims-test-document-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-test-certificates-bucket",
            "arn:aws-us-gov:s3:::761077331159-claims-test-certificates-bucket/*",
            "arn:aws-us-gov:s3:::761077331159-claims-test-result-storage",
            "arn:aws-us-gov:s3:::761077331159-claims-test-result-storage/*"
            ]
        }
    ]
}
,
        PolicyName: claims-test-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-test-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "ec2:AuthorizeSecurityGroupIngress",
       "ec2:Describe*",
       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
       "elasticloadbalancing:DeregisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
       "elasticloadbalancing:RegisterTargets"
     ],
     "Resource": "*",
     "Condition": {
       "StringLike": {"aws:ResourceTag/Project": "claims"}
      }     

   }
 ]
}
,
        PolicyName: claims-test-claims-validation-ecs-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeTags",
        "ecs:CreateCluster",
        "ecs:DeregisterContainerInstance",
        "ecs:DiscoverPollEndpoint",
        "ecs:Poll",
        "ecs:RegisterContainerInstance",
        "ecs:StartTelemetrySession",
        "ecs:UpdateContainerInstancesState",
        "ecs:Submit*",
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ContainerServiceforEC2Role
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-validation-ecs-service-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject*"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::761077331159-claims-test-rule-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-test-rule-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-test-result-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-test-result-storage",
        "arn:aws-us-gov:s3:::761077331159-claims-test-document-storage/*",
        "arn:aws-us-gov:s3:::761077331159-claims-test-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/daeb9218-6b97-40db-961f-ad21a50300cb",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/d7f676eb-cc90-45d4-ad78-ee742f0079c1",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/9813e746-3768-4bd1-bc77-8f93ba54e9a7",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/9439770e-8643-4034-bec2-1489796318eb",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/478c2ef2-3fc5-48df-91e9-b9fd9c26fcb7",
        "arn:aws-us-gov:kms:us-gov-west-1:761077331159:key/044878c3-e1dc-4249-98d9-8611fe77502b"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-ready-for-sftp-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:761077331159:claims-test-claims-complete-topic"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:761077331159:claims-test-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-test-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:*",
        "cloudtrail:LookupEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:CreateServiceLinkedRole"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "iam:AWSServiceName": [
            "replication.ecr.amazonaws.com"
          ]
        }
      }
    }
  ]
},
        PolicyName: AmazonEC2ContainerRegistryFullAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-test-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-test-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::138145779389-asm-test-s3-rds-bucket/*",
        "arn:aws-us-gov:s3:::138145779389-asm-test-s3-rds-bucket"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:Encrypt",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:138145779389:key/*"
    }
  ]
},
        PolicyName: claims-test-rds-s3-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "rds:Describe*",
        "rds:ListTagsForResource",
        "ec2:DescribeAccountAttributes",
        "ec2:DescribeAvailabilityZones",
        "ec2:DescribeInternetGateways",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcAttribute",
        "ec2:DescribeVpcs"
      ],
      "Effect": "Allow",
      "Resource": "*"
    },
    {
      "Action": [
        "cloudwatch:GetMetricStatistics",
        "logs:DescribeLogStreams", 
        "logs:GetLogEvents"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonRDSReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-test-rds-ingestion-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-test-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-test-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-test-vpc-flow-role-policy
      }
    ],
    Role: claims-test-vpc-flow-log
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "ListObjectsInBucket",
            "Effect": "Allow",
            "Action": ["s3:ListBucket"],
            "Resource": ["arn:aws-us-gov:s3:::*"]
        },
        {
            "Sid": "AllObjectActions",
            "Effect": "Allow",
            "Action": "s3:*Object",
            "Resource": ["arn:aws-us-gov:s3:::*/*"]
        }
    ]
},
        PolicyName: ClaimsS3ReadWriteAccess
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:*"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
},
        PolicyName: CloudWatchLogsFullAccess
      }
    ],
    InlineDocuments: [],
    Role: ClaimsLambdaExecutionRole
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
},
        PolicyName: oneClick_flowlogsRole_1580229759401
      }
    ],
    Role: flowlogsRole
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["ecs:UpdateService","ecs:UpdateCluster","ecs:UpdateCapacityProvider","ecs:TagResource","ecs:StopTask","ecs:StartTask","ecs:ListTasks","ecs:ListTaskDefinitions","ecs:ListTagsForResource","ecs:ListServices","ecs:ListClusters","ecs:DescribeTasks","ecs:DescribeTaskDefinition","ecs:DescribeServices","ecs:DescribeClusters","application-autoscaling:RegisterScalableTarget","application-autoscaling:DescribeScalableTargets","application-autoscaling:DeregisterScalableTarget"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-Claims-ecs-scheduler-lambda-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-Claims-ecs_scheduler_lambda_role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "logs:CreateLogStream",
      "Resource": "arn:aws-us-gov:logs:us-gov-west-1:761077331159:log-group:/aws/gss-green/cloudtrail-log-group:log-stream:761077331159_CloudTrail_us-gov-west-1*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "logs:PutLogEvents",
      "Resource": "arn:aws-us-gov:logs:us-gov-west-1:761077331159:log-group:/aws/gss-green/cloudtrail-log-group:log-stream:761077331159_CloudTrail_us-gov-west-1*"
    }
  ]
},
        PolicyName: gss-green-cloudwatch-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-CloudTrail_CloudWatchLogs_Role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["ec2:StopInstances","ec2:StartInstances","ec2:RunInstances","ec2:DescribeInstances"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-scheduler-lambda-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-ec2_scheduler_lambda_role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","sns:Subscribe","iam:GetRole","iam:GetPolicy","iam:GetRolePolicy","iam:GetPolicyVersion","iam:GetInstanceProfile","iam:ListAccountAliases","iam:ListAttachedRolePolicies","iam:ListEntitiesForPolicy","iam:GetSAMLProvider","iam:CreatePolicy","iam:CreateRole","iam:CreateRolePolicy","iam:CreatePolicyVersion","iam:PutRolePolicy","iam:TagRole","iam:ListPolicies","iam:ListPolicyVersions","iam:ListInstanceProfilesForRole","iam:ListRolePolicies","iam:DeleteRole","iam:DeleteRolePolicy","iam:DeletePolicy","iam:DeletePolicyVersion","iam:DeleteInstanceProfile","iam:DetachRolePolicy","iam:RemoveRoleFromInstanceProfile","iam:AttachRolePolicy","iam:PassRole","iam:UpdateSAMLProvider","iam:CreateInstanceProfile","iam:AddRoleToInstanceProfile","iam:DeleteInstanceProfile","iam:UpdateAssumeRolePolicy","iam:UntagRole","iam:UpdateAccountPasswordPolicy","iam:GetAccountPasswordPolicy","iam:DeleteAccountPasswordPolicy"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"},
        PolicyName: gss-green-gitlab-runner-assume-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": [
                "iam:*",
                "organizations:*",
                "account:*"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole",
                "iam:DeleteServiceLinkedRole",
                "iam:ListRoles",
                "organizations:DescribeOrganization",
                "account:ListRegions"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: PowerUserAccess
      }
    ],
    InlineDocuments: [],
    Role: gss-green-gitlab-runner-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Id":"SNS_Permissions_Account","Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Resource":"arn:aws-us-gov:iam::701341283067:role/gss-green-rds-scheduler-assumable-role","Sid":""},{"Action":["sts:AssumeRole","ssm:GetParameters","kms:Decrypt","SSM:GetParameter"],"Effect":"Allow","Resource":"arn:aws-us-gov:ssm:us-gov-west-1:701341283067:parameter/gss-green/infrastructure/gitlab-api-private-token","Sid":""},{"Action":["rds:DescribeDBInstances","kms:ReEncrypt*","kms:GenerateDataKey*","kms:Encrypt","kms:DescribeKey","kms:Decrypt","kms:CreateGrant","SNS:Subscribe","SNS:SetTopicAttributes","SNS:RemovePermission","SNS:Receive","SNS:Publish","SNS:ListSubscriptionsByTopic","SNS:GetTopicAttributes","SNS:DeleteTopic","SNS:AddPermission"],"Effect":"Allow","Resource":"arn:aws-us-gov:sns:us-gov-west-1:761077331159:function:gss-green-rds-cloudwatch-event","Sid":"VisualEditor1"}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-started-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-rds-cloudwatch-event-execution-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "xray:GetSamplingStatisticSummaries"               
            ],
            "Resource": [
                "*"
            ]
        }
    ]
},
        PolicyName: AWSXrayWriteOnlyAccess
      },
      {
        Document: {"Statement":[{"Action":["rds:StopDBInstance","rds:StartDBInstance","rds:DescribeDBInstances","rds:DeleteDBInstance"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-scheduler-rds-instance
      },
      {
        Document: {"Statement":[{"Action":["rds:StopDBInstance","rds:StopDBCluster","rds:StartDBInstance","rds:StartDBCluster","rds:ListTagsForResource","rds:DescribeDBInstances","rds:DescribeDBClusters","rds:DeleteDBInstance","rds:AddTagsToResource"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-scheduler-rds-cluster
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-rds-scheduler
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["securityhub:GetInsights","securityhub:GetInsightResults"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-securityhub-aws-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-securityhub-notification
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sts:AssumeRole",
        "sqs:SendMessage",
        "sqs:ReceiveMessage",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes",
        "sqs:DeleteMessage",
        "sns:Publish",
        "sns:List*",
        "sns:Get*",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetObject",
        "s3:GetLifecycleConfiguration",
        "s3:GetBucketTagging",
        "s3:GetBucketLogging",
        "s3:GetBucketLocation",
        "s3:GetBucketCORS",
        "s3:GetAccelerateConfiguration",
        "rds:DescribeDBInstances",
        "logs:GetLogEvents",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups",
        "lambda:ListFunctions",
        "kms:Decrypt",
        "kinesis:PutRecord",
        "kinesis:ListStreams",
        "kinesis:Get*",
        "kinesis:DescribeStream",
        "inspector:List*",
        "inspector:Describe*",
        "iam:PassRole",
        "iam:ListUsers",
        "iam:ListAccessKeys",
        "iam:GetUser",
        "iam:GetAccountPasswordPolicy",
        "iam:GetAccessKeyLastUsed",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTags",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeInstanceHealth",
        "ec2:StopInstances",
        "ec2:StartInstances",
        "ec2:ModifyInstanceAttribute",
        "ec2:DescribeVpcs",
        "ec2:DescribeVolumes",
        "ec2:DescribeTags",
        "ec2:DescribeSubnets",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeReservedInstances",
        "ec2:DescribeRegions",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeInstances",
        "ec2:DescribeImages",
        "ec2:DescribeAddresses",
        "ec2:DeleteSecurityGroup",
        "config:GetComplianceSummaryByConfigRule",
        "config:GetComplianceDetailsByConfigRule",
        "config:DescribeConfigRules",
        "config:DescribeConfigRuleEvaluationStatus",
        "config:DeliverConfigSnapshot",
        "cloudwatch:List*",
        "cloudwatch:Get*",
        "cloudwatch:Describe*",
        "cloudfront:ListDistributions",
        "autoscaling:Describe*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: gss-green-splunk-aws-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-splunk
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["s3:ListBucket","s3:GetObject"],"Effect":"Allow","Resource":["arn:aws-us-gov:s3:::701341283067-gss-green-ssm-artifacts/*","arn:aws-us-gov:s3:::701341283067-gss-green-ssm-artifacts/"],"Sid":""},{"Action":["tag:GetResources","resource-groups:ListGroupResources","ec2:DescribeInstances"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:PassRole","Effect":"Allow","Resource":"arn:aws-us-gov:iam::761077331159:role/gss-green-ssm-execution","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-ssm-aws-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": [
                "arn:aws-us-gov:lambda:*:*:function:Automation*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateImage",
                "ec2:CopyImage",
                "ec2:DeregisterImage",
                "ec2:DescribeImages",
                "ec2:DeleteSnapshot",
                "ec2:StartInstances",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "ec2:DescribeTags",
                "cloudformation:CreateStack",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateStack",
                "cloudformation:DeleteStack"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "sns:Publish"
            ],
            "Resource": [
                "arn:aws-us-gov:sns:*:*:Automation*"
            ]
        }
    ]
},
        PolicyName: AmazonSSMAutomationRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-ssm-execution
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
            ],
            "Effect": "Allow",
            "Resource": "*"
        }
    ]
},
        PolicyName: manual-claims-vpc-flow-log-policy
      }
    ],
    InlineDocuments: [],
    Role: manual-claims-vpc-flow-log-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: NetworkOpsAdmin
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":"rds:DescribePendingMaintenanceActions","Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"},
        PolicyName: rds-notification-for-shared-services-to-assume-role-policy
      }
    ],
    InlineDocuments: [],
    Role: rds-notification-for-shared-services-to-assume-role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["logs:PutRetentionPolicy","logs:PutMetricFilter","logs:PutLogEvents","logs:CreateLogStream","logs:CreateLogGroup"],"Effect":"Allow","Resource":"*","Sid":"AllowCloudWatchEvents"}],"Version":"2012-10-17"},
        PolicyName: CloudWatchLogs
      }
    ],
    InlineDocuments: [],
    Role: SNSFailureFeedback
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["logs:PutRetentionPolicy","logs:PutMetricFilter","logs:PutLogEvents","logs:CreateLogStream","logs:CreateLogGroup"],"Effect":"Allow","Resource":"*","Sid":"AllowCloudWatchEvents"}],"Version":"2012-10-17"},
        PolicyName: CloudWatchLogs
      }
    ],
    InlineDocuments: [],
    Role: SNSSuccessFeedback
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:PutMetricData",
        "ds:CreateComputer",
        "ds:DescribeDirectories",
        "ec2:DescribeInstanceStatus",
        "logs:*",
        "ssm:*",
        "ec2messages:*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws-us-gov:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "ssm.amazonaws.com"
        }
      }
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws-us-gov:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
    },
    {
      "Effect": "Allow",
      "Action": [
         "ssmmessages:CreateControlChannel",
         "ssmmessages:CreateDataChannel",
         "ssmmessages:OpenControlChannel",
         "ssmmessages:OpenDataChannel"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMFullAccess
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": ["s3:*", "s3-object-lambda:*"],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonS3FullAccess
      }
    ],
    InlineDocuments: [],
    Role: SSM-EC2-Role
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: TorchDeveloper
  },
  {
    AccountName: ClaimsDevelopment,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": [
                "iam:*",
                "organizations:*",
                "account:*"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole",
                "iam:DeleteServiceLinkedRole",
                "iam:ListRoles",
                "organizations:DescribeOrganization",
                "account:ListRegions"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: PowerUserAccess
      }
    ],
    InlineDocuments: [],
    Role: TorchTeamLead
  }
]