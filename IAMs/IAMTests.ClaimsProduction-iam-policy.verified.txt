[
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:806712165051:table/806712165051-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:SetQueueAttributes",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes"
      ],
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-virus-scan-result-queue"
    }
  ]
},
        PolicyName: gss-green-claims-access-role-policy
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Admins
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:806712165051:table/806712165051-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Auditor
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Developers
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "support:*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSSupportAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Support
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":"s3:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":["arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state/*","arn:aws-us-gov:s3:::806712165051-gss-green-infrastructure-terraform-state"],"Sid":""},{"Action":"dynamodb:*","Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"arn:aws-us-gov:dynamodb:us-gov-west-1:806712165051:table/806712165051-gss-green-infrastructure-terraform-state-lock","Sid":""},{"Action":"support:*","Effect":"Allow","Resource":"*","Sid":""},{"Action":"support:ResolveCase","Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["iam:ListRole*","iam:ListPolicy*","iam:GetRole*"],"Condition":{"StringEquals":{"aws:PrincipalTag/ResourceOwners":"GSS-Admins"},"StringNotEquals":{"aws:PrincipalTag/Environment":"sandbox"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["s3:PutObjectAcl","s3:PutObject","s3:ListBucket","s3:GetObjectAcl","s3:GetObject"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"kms:GenerateDataKey","Effect":"Allow","Resource":"*","Sid":""},{"Action":["ecs:StopTask","ecs:StartTask","ecs:RunTask"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":["acm:RequestCertificate","acm:List*","acm:Get*","acm:Describe*","acm:AddTagsToCertificate"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:*","Condition":{"StringEquals":{"aws:ResourceTag/ResourceOwners":"GSS-Admins"}},"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:ListUser*","iam:ListSAML*","iam:ListGroup*"],"Effect":"Deny","Resource":"*","Sid":""},{"Action":["iam:TagRole","iam:PutRolePolicy","iam:PassRole","iam:ListRole*","iam:ListPolicyVersions","iam:ListPolicies","iam:ListInstance*","iam:ListAttached*","iam:GetRolePolicy","iam:GetRole","iam:GetPolicyVersion","iam:GetPolicy","iam:GetInstanceProfile","iam:CreateRole","iam:CreatePolicyVersion","iam:CreatePolicy","iam:CreateInstanceProfile","iam:AttachRolePolicy","iam:AddRoleToInstanceProfile"],"Condition":{"ArnNotEquals":{"iam:PolicyArn":["arn:aws-us-gov:iam::aws:policy/*Admin*","arn:aws-us-gov:iam::aws:policy/*FullAccess*","arn:aws-us-gov:iam::aws:policy/*Power*"]},"StringEquals":{"aws:PrincipalTag/Environment":["sandbox","*sandb*"]}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["ec2:UpdateSecurityGroupRuleDescriptionsIngress","ec2:RevokeSecurityGroupIngress","ec2:RevokeSecurityGroupEgress","ec2:ModifySecurityGroupRules","ec2:DescribeSecurityGroupRules","ec2:DescribeInstances","ec2:AuthorizeSecurityGroupIngress","ec2:AuthorizeSecurityGroupEgress"],"Condition":{"StringLike":{"aws:ResourceTag/Name":"*bastion*"}},"Effect":"Allow","Resource":"*","Sid":""},{"Action":["securityhub:ListTagsForResources","securityhub:GetInsights","securityhub:GetInsightResults","securityhub:GetFindings"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"ec2:DeleteSecurityGroup","Condition":{"StringEqualsIgnoreCase":{"aws:ResourceTag/ProvisionedByTerraform":"yes"}},"Effect":"Deny","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: Deny-access-to-gss-resources
      },
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","states:Stop*","states:Start*","lambda:Invoke*","iam:GetAccountPasswordPolicy","glue:Stop*","glue:Start*","glue:List*","glue:Get*","glue:BatchGet*"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: readonly-access-to-terraform-resources
      },
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-Claims-Teamleads
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-GSS-Admins
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: AWS-GSS-Security-Auditor
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: AWSCloudFormationStackSetExecutionRole
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"ec2:DescribeAddresses",
				"ec2:DescribeByoipCidrs",
				"ec2:DescribeVpcEndpoints",
				"ec2:DescribeVpcs",
				"iam:GetRole",
				"iam:ListRoles",
				"kms:DescribeKey",
				"kms:GetKeyPolicy",
				"kms:ListGrants",
				"kms:ListKeyPolicies",
				"kms:ListKeys",
				"lambda:GetFunctionUrlConfig",
				"lambda:GetLayerVersionPolicy",
				"lambda:GetPolicy",
				"lambda:ListAliases",
				"lambda:ListFunctions",
				"lambda:ListLayers",
				"lambda:ListLayerVersions",
				"lambda:ListVersionsByFunction",
				"organizations:DescribeAccount",
				"organizations:DescribeOrganization",
				"organizations:DescribeOrganizationalUnit",
				"organizations:ListAccounts",
				"organizations:ListAccountsForParent",
				"organizations:ListAWSServiceAccessForOrganization",
				"organizations:ListChildren",
				"organizations:ListDelegatedAdministrators",
				"organizations:ListOrganizationalUnitsForParent",
				"organizations:ListParents",
				"organizations:ListRoots",
				"s3:DescribeMultiRegionAccessPointOperation",
				"s3:GetAccessPoint",
				"s3:GetAccessPointPolicy",
				"s3:GetAccessPointPolicyStatus",
				"s3:GetAccountPublicAccessBlock",
				"s3:GetBucketAcl",
				"s3:GetBucketLocation",
				"s3:GetBucketPolicyStatus",
				"s3:GetBucketPolicy",
				"s3:GetBucketPublicAccessBlock",
				"s3:GetMultiRegionAccessPoint",
				"s3:GetMultiRegionAccessPointPolicy",
				"s3:GetMultiRegionAccessPointPolicyStatus",
				"s3:ListAccessPoints",
				"s3:ListAllMyBuckets",
				"s3:ListMultiRegionAccessPoints",
				"sns:GetTopicAttributes",
				"sns:ListTopics",
				"secretsmanager:DescribeSecret",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:ListSecrets",
				"sqs:GetQueueAttributes",
				"sqs:ListQueues"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: AccessAnalyzerServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAccessAnalyzer
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
   "Version": "2012-10-17",
   "Statement": [{
      "Effect": "Allow",
      "Action": [
        "ec2:DescribeInstances", 
        "ec2:DescribeImages",
        "ec2:DescribeVpcEndpoints",
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcPeeringConnections",
        "ec2:DescribeTransitGatewayAttachments",
        "organizations:ListAccounts",
        "organizations:DescribeAccount",
        "s3:GetBucketPublicAccessBlock",
        "s3:GetEncryptionConfiguration",
        "s3:GetBucketTagging",
        "s3:GetAccountPublicAccessBlock",
        "s3:ListAllMyBuckets",
        "s3:GetBucketAcl",
        "s3:GetBucketPolicy",
        "s3:GetBucketPolicyStatus"
      ],
      "Resource": "*"
    }
   ]
},
        PolicyName: AmazonGuardDutyServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAmazonGuardDuty
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:CancelCommand",
                "ssm:GetCommandInvocation",
                "ssm:ListCommandInvocations",
                "ssm:ListCommands",
                "ssm:SendCommand",
                "ssm:GetAutomationExecution",
                "ssm:GetParameters",
                "ssm:StartAutomationExecution",
                "ssm:ListTagsForResource",
                "ssm:GetCalendarState"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:UpdateServiceSetting",
                "ssm:GetServiceSetting"
            ],
            "Resource": [
                "arn:aws-us-gov:ssm:*:*:servicesetting/ssm/opsitem/*",
                "arn:aws-us-gov:ssm:*:*:servicesetting/ssm/opsdata/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeInstances"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": [
                "arn:aws-us-gov:lambda:*:*:function:SSM*",
                "arn:aws-us-gov:lambda:*:*:function:*:SSM*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "states:DescribeExecution",
                "states:StartExecution"
            ],
            "Resource": [
                "arn:aws-us-gov:states:*:*:stateMachine:SSM*",
                "arn:aws-us-gov:states:*:*:execution:SSM*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "resource-groups:ListGroups",
                "resource-groups:ListGroupResources",
		"resource-groups:GetGroupQuery"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "tag:GetResources"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:SelectResourceConfig"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "compute-optimizer:GetEC2InstanceRecommendations",
                "compute-optimizer:GetEnrollmentStatus"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "support:DescribeTrustedAdvisorChecks",
                "support:DescribeTrustedAdvisorCheckSummaries",
                "support:DescribeTrustedAdvisorCheckResult",
                "support:DescribeCases"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:DescribeComplianceByConfigRule",
                "config:DescribeComplianceByResource",
                "config:DescribeRemediationConfigurations",
                "config:DescribeConfigurationRecorders"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "iam:PassedToService": [
                        "ssm.amazonaws.com"
                    ]
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": "organizations:DescribeOrganization",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudformation:ListStackSets",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "cloudformation:ListStackInstances",
                "cloudformation:DescribeStackSetOperation",
                "cloudformation:DeleteStackSet"
            ],
            "Resource": "arn:aws-us-gov:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*"
        },
        {
            "Effect": "Allow",
            "Action": "cloudformation:DeleteStackInstances",
            "Resource": [
                "arn:aws-us-gov:cloudformation:*:*:stackset/AWS-QuickSetup-SSM*:*",
                "arn:aws-us-gov:cloudformation:*:*:stackset-target/AWS-QuickSetup-SSM*:*",
                "arn:aws-us-gov:cloudformation:*:*:type/resource/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:PutRule",
                "events:PutTargets"
            ],
            "Resource": "*",
            "Condition": {
                "StringEquals": {
                    "events:ManagedBy": "ssm.amazonaws.com"
                }
            }
        },
        {
            "Effect": "Allow",
            "Action": [
                "events:RemoveTargets",
                "events:DeleteRule"
            ],
            "Resource": [
                "arn:aws-us-gov:events:*:*:rule/SSMExplorerManagedRule"
            ]
        },
        {
            "Effect": "Allow",
            "Action": "events:DescribeRule",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "securityhub:DescribeHub",
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAmazonSSM
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
   "Version": "2012-10-17",
   "Statement": [
        {
           "Effect": "Allow",
           "Action": [
               "ecs:DescribeServices",
               "ecs:UpdateService",
               "cloudwatch:PutMetricAlarm",
               "cloudwatch:DescribeAlarms",
               "cloudwatch:DeleteAlarms"
            ],
           "Resource": [
               "*"
            ]
        }
    ]
},
        PolicyName: AWSApplicationAutoscalingECSServicePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForApplicationAutoScaling_ECSService
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "EC2InstanceManagement",
			"Effect": "Allow",
			"Action": [
				"ec2:AttachClassicLinkVpc",
				"ec2:CancelSpotInstanceRequests",
				"ec2:CreateFleet",
				"ec2:CreateTags",
				"ec2:DeleteTags",
				"ec2:Describe*",
				"ec2:DetachClassicLinkVpc",
				"ec2:ModifyInstanceAttribute",
				"ec2:RequestSpotInstances",
				"ec2:RunInstances",
				"ec2:StartInstances",
                "ec2:StopInstances",
				"ec2:TerminateInstances"
			],
			"Resource": "*"
		},
		{
			"Sid": "EC2InstanceProfileManagement",
			"Effect": "Allow",
			"Action": [
				"iam:PassRole"
			],
			"Resource": "*",
			"Condition": {
				"StringLike": {
					"iam:PassedToService": "ec2.amazonaws.com*"
				}
			}
		},
		{
			"Sid": "EC2SpotManagement",
			"Effect": "Allow",
			"Action": [
				"iam:CreateServiceLinkedRole"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"iam:AWSServiceName": "spot.amazonaws.com"
				}
			}
		},
		{
			"Sid": "ELBManagement",
			"Effect": "Allow",
			"Action": [
				"elasticloadbalancing:Register*",
				"elasticloadbalancing:Deregister*",
				"elasticloadbalancing:Describe*"
			],
			"Resource": "*"
		},
		{
			"Sid": "CWManagement",
			"Effect": "Allow",
			"Action": [
				"cloudwatch:DeleteAlarms",
				"cloudwatch:DescribeAlarms",
				"cloudwatch:GetMetricData",
				"cloudwatch:PutMetricAlarm"
			],
			"Resource": "*"
		},
		{
			"Sid": "SNSManagement",
			"Effect": "Allow",
			"Action": [
				"sns:Publish"
			],
			"Resource": "*"
		},
		{
			"Sid": "EventBridgeRuleManagement",
			"Effect": "Allow",
			"Action": [
				"events:PutRule",
				"events:PutTargets",
				"events:RemoveTargets",
				"events:DeleteRule",
				"events:DescribeRule"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"events:ManagedBy": "autoscaling.amazonaws.com"
				}
			}
		},
        {
            "Sid": "SystemsManagerParameterManagement",
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameters"
            ],
            "Resource": "*"
        }
	]
},
        PolicyName: AutoScalingServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForAutoScaling
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListTagsForResource",
				"account:GetAlternateContact",
				"acm:DescribeCertificate",
				"acm:ListCertificates",
				"acm:ListTagsForCertificate",
				"apigateway:GET",
				"application-autoscaling:DescribeScalableTargets",
				"application-autoscaling:DescribeScalingPolicies",
				"athena:GetDataCatalog",
				"athena:GetWorkGroup",
				"athena:ListDataCatalogs",
				"athena:ListTagsForResource",
				"athena:ListWorkGroups",
				"autoscaling:DescribeAutoScalingGroups",
				"autoscaling:DescribeLaunchConfigurations",
				"autoscaling:DescribeLifecycleHooks",
				"autoscaling:DescribePolicies",
				"autoscaling:DescribeScheduledActions",
				"autoscaling:DescribeTags",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:DescribeBackupVault",
				"backup:DescribeRecoveryPoint",
				"backup:GetBackupPlan",
				"backup:GetBackupSelection",
				"backup:GetBackupVaultAccessPolicy",
				"backup:GetBackupVaultNotifications",
				"backup:ListBackupPlans",
				"backup:ListBackupSelections",
				"backup:ListBackupVaults",
				"backup:ListRecoveryPointsByBackupVault",
				"backup:ListTags",
				"batch:DescribeComputeEnvironments",
				"batch:DescribeJobQueues",
				"batch:ListTagsForResource",
				"cloudformation:DescribeType",
				"cloudformation:GetResource",
				"cloudformation:ListResources",
				"cloudformation:ListTypes",
				"cloudfront:ListDistributions",
				"cloudfront:ListTagsForResource",
				"cloudtrail:DescribeTrails",
				"cloudtrail:GetEventDataStore",
				"cloudtrail:GetEventSelectors",
				"cloudtrail:GetTrailStatus",
				"cloudtrail:ListEventDataStores",
				"cloudtrail:ListTags",
				"cloudwatch:DescribeAlarms",
				"codedeploy:GetDeploymentConfig",
				"codepipeline:GetPipeline",
				"codepipeline:GetPipelineState",
				"codepipeline:ListPipelines",
				"config:BatchGet*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:Put*",
				"config:Select*",
				"dax:DescribeClusters",
				"dax:DescribeParameterGroups",
				"dax:DescribeParameters",
				"dax:DescribeSubnetGroups",
				"dax:ListTags",
				"detective:ListTagsForResource",
				"detective:ListGraphs",
				"dms:DescribeCertificates",
				"dms:DescribeEventSubscriptions",
				"dms:DescribeReplicationInstances",
				"dms:DescribeReplicationSubnetGroups",
				"dms:DescribeReplicationTasks",
				"dms:ListTagsForResource",
				"dynamodb:DescribeContinuousBackups",
				"dynamodb:DescribeGlobalTable",
				"dynamodb:DescribeGlobalTableSettings",
				"dynamodb:DescribeLimits",
				"dynamodb:DescribeTable",
				"dynamodb:ListTables",
				"dynamodb:ListTagsOfResource",
				"ec2:Describe*",
				"ec2:DescribeClientVpnAuthorizationRules",
				"ec2:DescribeClientVpnEndpoints",
				"ec2:DescribeDhcpOptions",
				"ec2:DescribeFleets",
				"ec2:DescribeNetworkAcls",
				"ec2:DescribePlacementGroups",
				"ec2:DescribeSpotFleetRequests",
				"ec2:DescribeVolumeAttribute",
				"ec2:DescribeVolumes",
				"ec2:GetEbsEncryptionByDefault",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:DescribeRepositories",
				"ecr:GetLifecyclePolicy",
				"ecr:GetRepositoryPolicy",
				"ecr:ListTagsForResource",
				"ecs:DescribeClusters",
				"ecs:DescribeServices",
				"ecs:DescribeTaskDefinition",
				"ecs:DescribeTaskSets",
				"ecs:ListClusters",
				"ecs:ListServices",
				"ecs:ListTagsForResource",
				"ecs:ListTaskDefinitionFamilies",
				"ecs:ListTaskDefinitions",
				"eks:DescribeCluster",
				"eks:DescribeFargateProfile",
				"eks:DescribeNodegroup",
				"eks:ListClusters",
				"eks:ListFargateProfiles",
				"eks:ListNodegroups",
				"eks:ListTagsForResource",
				"elasticache:DescribeCacheClusters",
				"elasticache:DescribeCacheParameterGroups",
				"elasticache:DescribeCacheSubnetGroups",
				"elasticache:DescribeReplicationGroups",
				"elasticache:DescribeSnapshots",
				"elasticache:ListTagsForResource",
				"elasticbeanstalk:DescribeConfigurationSettings",
				"elasticbeanstalk:DescribeEnvironments",
				"elasticfilesystem:DescribeAccessPoints",
				"elasticfilesystem:DescribeBackupPolicy",
				"elasticfilesystem:DescribeFileSystemPolicy",
				"elasticfilesystem:DescribeFileSystems",
				"elasticfilesystem:DescribeLifecycleConfiguration",
				"elasticfilesystem:DescribeMountTargets",
				"elasticfilesystem:DescribeMountTargetSecurityGroups",
				"elasticloadbalancing:DescribeListeners",
				"elasticloadbalancing:DescribeLoadBalancerAttributes",
				"elasticloadbalancing:DescribeLoadBalancerPolicies",
				"elasticloadbalancing:DescribeLoadBalancers",
				"elasticloadbalancing:DescribeRules",
				"elasticloadbalancing:DescribeTags",
				"elasticmapreduce:DescribeCluster",
				"elasticmapreduce:DescribeSecurityConfiguration",
				"elasticmapreduce:DescribeStep",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:GetManagedScalingPolicy",
				"elasticmapreduce:ListClusters",
				"elasticmapreduce:ListInstanceFleets",
				"elasticmapreduce:ListInstanceGroups",
				"elasticmapreduce:ListInstances",
				"elasticmapreduce:ListSecurityConfigurations",
				"elasticmapreduce:ListSteps",
				"es:DescribeDomain",
				"es:DescribeDomains",
				"es:DescribeElasticsearchDomain",
				"es:DescribeElasticsearchDomains",
				"es:GetCompatibleElasticsearchVersions",
				"es:GetCompatibleVersions",
				"es:ListDomainNames",
				"es:ListTags",
				"firehose:DescribeDeliveryStream",
				"firehose:ListDeliveryStreams",
				"firehose:ListTagsForDeliveryStream",
				"fsx:DescribeFileSystems",
				"fsx:ListTagsForResource",
				"globalaccelerator:DescribeAccelerator",
				"globalaccelerator:DescribeEndpointGroup",
				"globalaccelerator:DescribeListener",
				"globalaccelerator:ListAccelerators",
				"globalaccelerator:ListEndpointGroups",
				"globalaccelerator:ListListeners",
				"globalaccelerator:ListTagsForResource",
				"glue:BatchGetDevEndpoints",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTags",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListWorkflows",
				"guardduty:GetDetector",
				"guardduty:GetFilter",
				"guardduty:GetFindings",
				"guardduty:GetIPSet",
				"guardduty:GetMasterAccount",
				"guardduty:GetMembers",
				"guardduty:GetThreatIntelSet",
				"guardduty:ListDetectors",
				"guardduty:ListFilters",
				"guardduty:ListFindings",
				"guardduty:ListIPSets",
				"guardduty:ListMembers",
				"guardduty:ListOrganizationAdminAccounts",
				"guardduty:ListTagsForResource",
				"guardduty:ListThreatIntelSets",
				"iam:GenerateCredentialReport",
				"iam:GetAccountAuthorizationDetails",
				"iam:GetAccountPasswordPolicy",
				"iam:GetAccountSummary",
				"iam:GetCredentialReport",
				"iam:GetGroup",
				"iam:GetGroupPolicy",
				"iam:GetPolicy",
				"iam:GetPolicyVersion",
				"iam:GetRole",
				"iam:GetRolePolicy",
				"iam:GetUser",
				"iam:GetUserPolicy",
				"iam:ListAttachedGroupPolicies",
				"iam:ListAttachedRolePolicies",
				"iam:ListAttachedUserPolicies",
				"iam:ListEntitiesForPolicy",
				"iam:ListGroupPolicies",
				"iam:ListGroupsForUser",
				"iam:ListInstanceProfilesForRole",
				"iam:ListPolicyVersions",
				"iam:ListRolePolicies",
				"iam:ListUserPolicies",
				"iam:ListVirtualMFADevices",
				"kafka:DescribeCluster",
				"kafka:ListClusters",
				"kinesis:DescribeStreamConsumer",
				"kinesis:DescribeStreamSummary",
				"kinesis:ListStreamConsumers",
				"kinesis:ListStreams",
				"kinesis:ListTagsForStream",
				"kms:DescribeKey",
				"kms:GetKeyPolicy",
				"kms:GetKeyRotationStatus",
				"kms:ListAliases",
				"kms:ListKeys",
				"kms:ListResourceTags",
				"lambda:GetAlias",
				"lambda:GetFunction",
				"lambda:GetFunctionCodeSigningConfig",
				"lambda:GetPolicy",
				"lambda:ListAliases",
				"lambda:ListFunctions",
				"lambda:ListVersionsByFunction",
				"logs:DescribeLogGroups",
				"logs:ListTagsLogGroup",
				"macie2:GetMacieSession",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:ListFirewalls",
				"opsworks:DescribeLayers",
				"opsworks:ListTags",
				"organizations:DescribeOrganization",
				"organizations:DescribePolicy",
				"organizations:ListParents",
				"organizations:ListPolicies",
				"organizations:ListPoliciesForTarget",
				"ram:GetResourceShareAssociations",
				"ram:GetResourceShares",
				"rds:DescribeDBClusterParameterGroups",
				"rds:DescribeDBClusterParameters",
				"rds:DescribeDBClusters",
				"rds:DescribeDBClusterSnapshotAttributes",
				"rds:DescribeDBClusterSnapshots",
				"rds:DescribeDBEngineVersions",
				"rds:DescribeDBInstances",
				"rds:DescribeDBParameterGroups",
				"rds:DescribeDBParameters",
				"rds:DescribeDBSecurityGroups",
				"rds:DescribeDBSnapshotAttributes",
				"rds:DescribeDBSnapshots",
				"rds:DescribeDBSubnetGroups",
				"rds:DescribeEventSubscriptions",
				"rds:DescribeOptionGroups",
				"rds:ListTagsForResource",
				"redshift:DescribeClusterParameterGroups",
				"redshift:DescribeClusterParameters",
				"redshift:DescribeClusters",
				"redshift:DescribeClusterSecurityGroups",
				"redshift:DescribeClusterSnapshots",
				"redshift:DescribeClusterSubnetGroups",
				"redshift:DescribeEventSubscriptions",
				"redshift:DescribeLoggingStatus",
				"route53:GetHealthCheck",
				"route53:GetHostedZone",
				"route53:ListHealthChecks",
				"route53:ListHostedZones",
				"route53:ListHostedZonesByName",
				"route53:ListQueryLoggingConfigs",
				"route53:ListResourceRecordSets",
				"route53:ListTagsForResource",
				"route53resolver:GetResolverEndpoint",
				"route53resolver:GetResolverRule",
				"route53resolver:GetResolverRuleAssociation",
				"route53resolver:ListResolverEndpointIpAddresses",
				"route53resolver:ListResolverEndpoints",
				"route53resolver:ListResolverRuleAssociations",
				"route53resolver:ListResolverRules",
				"route53resolver:ListTagsForResource",
				"s3:GetAccelerateConfiguration",
				"s3:GetAccessPoint",
				"s3:GetAccessPointPolicy",
				"s3:GetAccessPointPolicyStatus",
				"s3:GetAccountPublicAccessBlock",
				"s3:GetBucketAcl",
				"s3:GetBucketCORS",
				"s3:GetBucketLocation",
				"s3:GetBucketLogging",
				"s3:GetBucketNotification",
				"s3:GetBucketObjectLockConfiguration",
				"s3:GetBucketPolicy",
				"s3:GetBucketPublicAccessBlock",
				"s3:GetBucketRequestPayment",
				"s3:GetBucketTagging",
				"s3:GetBucketVersioning",
				"s3:GetBucketWebsite",
				"s3:GetEncryptionConfiguration",
				"s3:GetLifecycleConfiguration",
				"s3:GetReplicationConfiguration",
				"s3:ListAccessPoints",
				"s3:ListAllMyBuckets",
				"s3:ListBucket",
				"sagemaker:DescribeCodeRepository",
				"sagemaker:DescribeEndpoint",
				"sagemaker:DescribeEndpointConfig",
				"sagemaker:DescribeModel",
				"sagemaker:DescribeMonitoringSchedule",
				"sagemaker:DescribeNotebookInstance",
				"sagemaker:DescribeNotebookInstanceLifecycleConfig",
				"sagemaker:DescribeWorkteam",
				"sagemaker:ListCodeRepositories",
				"sagemaker:ListEndpointConfigs",
				"sagemaker:ListEndpoints",
				"sagemaker:ListModels",
				"sagemaker:ListMonitoringSchedules",
				"sagemaker:ListNotebookInstanceLifecycleConfigs",
				"sagemaker:ListNotebookInstances",
				"sagemaker:ListTags",
				"sagemaker:ListWorkteams",
				"secretsmanager:ListSecrets",
				"secretsmanager:ListSecretVersionIds",
				"securityhub:DescribeHub",
				"ses:GetConfigurationSet",
				"ses:GetConfigurationSetEventDestinations",
				"ses:ListConfigurationSets",
				"shield:DescribeDRTAccess",
				"shield:DescribeProtection",
				"shield:DescribeSubscription",
				"sns:GetSubscriptionAttributes",
				"sns:GetTopicAttributes",
				"sns:ListSubscriptions",
				"sns:ListSubscriptionsByTopic",
				"sns:ListTagsForResource",
				"sns:ListTopics",
				"sqs:GetQueueAttributes",
				"sqs:ListQueues",
				"sqs:ListQueueTags",
				"ssm:DescribeAutomationExecutions",
				"ssm:DescribeDocument",
				"ssm:DescribeDocumentPermission",
				"ssm:GetAutomationExecution",
				"ssm:GetDocument",
				"ssm:ListDocuments",
				"sso:DescribeInstanceAccessControlAttributeConfiguration",
				"sso:DescribePermissionSet",
				"sso:ListManagedPoliciesInPermissionSet",
				"sso:ListPermissionSets",
				"sso:ListTagsForResource",
				"states:DescribeActivity",
				"states:DescribeStateMachine",
				"states:ListActivities",
				"states:ListStateMachines",
				"states:ListTagsForResource",
				"storagegateway:ListGateways",
				"storagegateway:ListTagsForResource",
				"storagegateway:ListVolumes",
				"support:DescribeCases",
				"tag:GetResources",
				"waf-regional:GetLoggingConfiguration",
				"waf-regional:GetWebACL",
				"waf-regional:GetWebACLForResource",
				"waf:GetLoggingConfiguration",
				"waf:GetWebACL",
				"wafv2:GetLoggingConfiguration",
				"wafv2:GetRuleGroup",
				"wafv2:ListRuleGroups",
				"wafv2:ListTagsForResource",
				"workspaces:DescribeConnectionAliases",
				"workspaces:DescribeTags",
				"workspaces:DescribeWorkspaces"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogStream",
				"logs:CreateLogGroup"
			],
			"Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/config/*"
		},
		{
			"Effect": "Allow",
			"Action": "logs:PutLogEvents",
			"Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/config/*:log-stream:config-rule-evaluation/*"
		}
	]
},
        PolicyName: AWSConfigServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForConfig
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "ECSTaskManagement",
            "Effect": "Allow",
            "Action": [
                "ec2:AttachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:DeleteNetworkInterface",
                "ec2:DeleteNetworkInterfacePermission",
                "ec2:Describe*",
                "ec2:DetachNetworkInterface",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                "elasticloadbalancing:DeregisterTargets",
                "elasticloadbalancing:Describe*",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:RegisterTargets",
                "route53:ChangeResourceRecordSets",
                "route53:CreateHealthCheck",
                "route53:DeleteHealthCheck",
                "route53:Get*",
                "route53:List*",
                "route53:UpdateHealthCheck",
                "servicediscovery:DeregisterInstance",
                "servicediscovery:Get*",
                "servicediscovery:List*",
                "servicediscovery:RegisterInstance",
                "servicediscovery:UpdateInstanceCustomHealthStatus"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AutoScaling",
            "Effect": "Allow",
            "Action": [
                "autoscaling:Describe*"
            ],
            "Resource": "*"
        },
        {
            "Sid": "AutoScalingManagement",
            "Effect": "Allow",
            "Action": [
                "autoscaling:DeletePolicy",
                "autoscaling:PutScalingPolicy",
                "autoscaling:SetInstanceProtection",
                "autoscaling:UpdateAutoScalingGroup"
            ],
            "Resource": "*",
            "Condition": {
                "Null": {
                    "autoscaling:ResourceTag/AmazonECSManaged": "false"
                }
            }
        },
        {
            "Sid": "AutoScalingPlanManagement",
            "Effect": "Allow",
            "Action": [
                "autoscaling-plans:CreateScalingPlan",
                "autoscaling-plans:DeleteScalingPlan",
                "autoscaling-plans:DescribeScalingPlans"
            ],
            "Resource": "*"
        },
        {
            "Sid": "CWAlarmManagement",
            "Effect": "Allow",
            "Action": [
                "cloudwatch:DeleteAlarms",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:PutMetricAlarm"
            ],
            "Resource": "arn:aws-us-gov:cloudwatch:*:*:alarm:*"
        },
        {
            "Sid": "ECSTagging",
            "Effect": "Allow",
            "Action": [
                "ec2:CreateTags"
            ],
            "Resource": "arn:aws-us-gov:ec2:*:*:network-interface/*"
        },
        {
            "Sid": "CWLogGroupManagement",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:PutRetentionPolicy"
            ],
            "Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/ecs/*"
        },
        {
            "Sid": "CWLogStreamManagement",
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents"
            ],
            "Resource": "arn:aws-us-gov:logs:*:*:log-group:/aws/ecs/*:log-stream:*"
        },
        {
            "Sid": "ExecuteCommandSessionManagement",
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeSessions"
            ],
            "Resource": "*"
        },
        {
            "Sid": "ExecuteCommand",
            "Effect": "Allow",
            "Action": [
                "ssm:StartSession"
            ],
            "Resource": [
                "arn:aws-us-gov:ecs:*:*:task/*",
                "arn:aws-us-gov:ssm:*:*:document/AmazonECS-ExecuteInteractiveCommand"
            ]
        }
    ]
},
        PolicyName: AmazonECSServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForECS
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeAddresses",
                "ec2:DescribeCoipPools",
                "ec2:DescribeInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSubnets",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeVpcs",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeAccountAttributes",
                "ec2:DescribeClassicLinkInstances",
                "ec2:DescribeVpcClassicLink",
                "ec2:CreateSecurityGroup",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:GetCoipPoolUsage",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:AllocateAddress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:AssociateAddress",
                "ec2:DisassociateAddress",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:AssignPrivateIpAddresses",
                "ec2:AssignIpv6Addresses",
                "ec2:ReleaseAddress",
                "ec2:UnassignIpv6Addresses",
                "ec2:DescribeVpcPeeringConnections",
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "outposts:GetOutpostInstanceTypes"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AWSElasticLoadBalancingServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForElasticLoadBalancing
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowDeletionOfServiceLinkedRoleForOrganizations",
            "Effect": "Allow",
            "Action": [
                "iam:DeleteRole"
            ],
            "Resource": [
                "arn:aws-us-gov:iam::*:role/aws-service-role/organizations.amazonaws.com/*"
            ]
        },
        {
            "Sid": "AllowCreationOfServiceLinkedRoles",
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AWSOrganizationsServiceTrustPolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForOrganizations
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"rds:CrossRegionCommunication"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"ec2:AllocateAddress",
				"ec2:AssociateAddress",
				"ec2:AuthorizeSecurityGroupIngress",
				"ec2:CreateCoipPoolPermission",
				"ec2:CreateLocalGatewayRouteTablePermission",
				"ec2:CreateNetworkInterface",
				"ec2:CreateSecurityGroup",
				"ec2:DeleteCoipPoolPermission",
				"ec2:DeleteLocalGatewayRouteTablePermission",
				"ec2:DeleteNetworkInterface",
				"ec2:DeleteSecurityGroup",
				"ec2:DescribeAddresses",
				"ec2:DescribeAvailabilityZones",
				"ec2:DescribeCoipPools",
				"ec2:DescribeInternetGateways",
				"ec2:DescribeLocalGatewayRouteTablePermissions",
				"ec2:DescribeLocalGatewayRouteTables",
				"ec2:DescribeLocalGatewayRouteTableVpcAssociations",
				"ec2:DescribeLocalGateways",
				"ec2:DescribeSecurityGroups",
				"ec2:DescribeSubnets",
				"ec2:DescribeVpcAttribute",
				"ec2:DescribeVpcs",
				"ec2:DisassociateAddress",
				"ec2:ModifyNetworkInterfaceAttribute",
				"ec2:ModifyVpcEndpoint",
				"ec2:ReleaseAddress",
				"ec2:RevokeSecurityGroupIngress",
				"ec2:CreateVpcEndpoint",
				"ec2:DescribeVpcEndpoints",
				"ec2:DeleteVpcEndpoints",
				"ec2:AssignPrivateIpAddresses",
				"ec2:UnassignPrivateIpAddresses"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"sns:Publish"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogGroup"
			],
			"Resource": [
				"arn:aws-us-gov:logs:*:*:log-group:/aws/rds/*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/docdb/*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/neptune/*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"logs:CreateLogStream",
				"logs:PutLogEvents",
				"logs:DescribeLogStreams"
			],
			"Resource": [
				"arn:aws-us-gov:logs:*:*:log-group:/aws/rds/*:log-stream:*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
				"arn:aws-us-gov:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"kinesis:CreateStream",
				"kinesis:PutRecord",
				"kinesis:PutRecords",
				"kinesis:DescribeStream",
				"kinesis:SplitShard",
				"kinesis:MergeShards",
				"kinesis:DeleteStream",
				"kinesis:UpdateShardCount"
			],
			"Resource": [
				"arn:aws-us-gov:kinesis:*:*:stream/aws-rds-das-*"
			]
		},
		{
			"Effect": "Allow",
			"Action": [
				"cloudwatch:PutMetricData"
			],
			"Resource": "*",
			"Condition": {
				"StringEquals": {
					"cloudwatch:namespace": [
						"AWS/DocDB",
						"AWS/Neptune",
						"AWS/RDS",
						"AWS/Usage"
					]
				}
			}
		}
	]
},
        PolicyName: AmazonRDSServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForRDS
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudtrail:DescribeTrails",
                "cloudtrail:GetTrailStatus",
                "cloudtrail:GetEventSelectors",
                "cloudwatch:DescribeAlarms",
                "cloudwatch:DescribeAlarmsForMetric",
                "logs:DescribeMetricFilters",
                "sns:ListSubscriptionsByTopic",
                "config:DescribeConfigurationRecorders",
                "config:DescribeConfigurationRecorderStatus",
                "config:DescribeConfigRules",
                "config:BatchGetResourceConfig",
                "config:SelectResourceConfig",
                "iam:GenerateCredentialReport",
                "iam:GetCredentialReport",
                "organizations:ListAccounts",
                "organizations:DescribeAccount",
                "organizations:DescribeOrganization",
                "config:PutEvaluations"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "config:PutConfigRule",
                "config:DeleteConfigRule",
                "config:GetComplianceDetailsByConfigRule",
                "config:DescribeConfigRuleEvaluationStatus"
            ],
            "Resource": "arn:aws-us-gov:config:*:*:config-rule/aws-service-rule/*securityhub*"
        }
    ]
},
        PolicyName: AWSSecurityHubServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForSecurityHub
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Statement": [
		{
			"Action": [
				"apigateway:GET"
			],
			"Effect": "Allow",
			"Resource": [
				"arn:aws-us-gov:apigateway:*::/account",
				"arn:aws-us-gov:apigateway:*::/apis",
				"arn:aws-us-gov:apigateway:*::/apis/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/authorizers",
				"arn:aws-us-gov:apigateway:*::/apis/*/authorizers/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/deployments",
				"arn:aws-us-gov:apigateway:*::/apis/*/deployments/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/integrations",
				"arn:aws-us-gov:apigateway:*::/apis/*/integrations/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/integrations/*/integrationresponses",
				"arn:aws-us-gov:apigateway:*::/apis/*/integrations/*/integrationresponses/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/models",
				"arn:aws-us-gov:apigateway:*::/apis/*/models/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/routes",
				"arn:aws-us-gov:apigateway:*::/apis/*/routes/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/routes/*/routeresponses",
				"arn:aws-us-gov:apigateway:*::/apis/*/routes/*/routeresponses/*",
				"arn:aws-us-gov:apigateway:*::/apis/*/stages",
				"arn:aws-us-gov:apigateway:*::/apis/*/stages/*",
				"arn:aws-us-gov:apigateway:*::/clientcertificates",
				"arn:aws-us-gov:apigateway:*::/clientcertificates/*",
				"arn:aws-us-gov:apigateway:*::/domainnames",
				"arn:aws-us-gov:apigateway:*::/domainnames/*",
				"arn:aws-us-gov:apigateway:*::/domainnames/*/apimappings",
				"arn:aws-us-gov:apigateway:*::/domainnames/*/apimappings/*",
				"arn:aws-us-gov:apigateway:*::/domainnames/*/basepathmappings",
				"arn:aws-us-gov:apigateway:*::/domainnames/*/basepathmappings/*",
				"arn:aws-us-gov:apigateway:*::/restapis",
				"arn:aws-us-gov:apigateway:*::/restapis/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/authorizers",
				"arn:aws-us-gov:apigateway:*::/restapis/*/authorizers/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/deployments",
				"arn:aws-us-gov:apigateway:*::/restapis/*/deployments/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/models",
				"arn:aws-us-gov:apigateway:*::/restapis/*/models/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/models/*/default_template",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources/*/methods/*/integration/responses/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources/*/methods/*/responses/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/stages/*/sdks/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources/*/methods/*",
				"arn:aws-us-gov:apigateway:*::/restapis/*/resources/*/methods/*/integration",
				"arn:aws-us-gov:apigateway:*::/restapis/*/stages",
				"arn:aws-us-gov:apigateway:*::/restapis/*/stages/*"
			]
		},
		{
			"Action": [
				"iam:DeleteRole"
			],
			"Effect": "Allow",
			"Resource": [
				"arn:aws-us-gov:iam::*:role/aws-service-role/support.amazonaws.com/AWSServiceRoleForSupport"
			]
		},
		{
			"Action": [
				"a4b:getDevice",
				"a4b:getProfile",
				"a4b:getRoom",
				"a4b:getRoomSkillParameter",
				"a4b:getSkillGroup",
				"a4b:searchDevices",
				"a4b:searchProfiles",
				"a4b:searchRooms",
				"a4b:searchSkillGroups",
				"access-analyzer:getFinding",
				"access-analyzer:listAnalyzers",
				"access-analyzer:listArchiveRules",
				"access-analyzer:listFindings",
				"acm-pca:describeCertificateAuthority",
				"acm-pca:describeCertificateAuthorityAuditReport",
				"acm-pca:getCertificate",
				"acm-pca:getCertificateAuthorityCertificate",
				"acm-pca:getCertificateAuthorityCsr",
				"acm-pca:listCertificateAuthorities",
				"acm-pca:listTags",
				"acm:describeCertificate",
				"acm:getCertificate",
				"acm:listCertificates",
				"acm:listTagsForCertificate",
				"airflow:getEnvironment",
				"airflow:listEnvironments",
				"airflow:listTagsForResource",
				"amplify:getApp",
				"amplify:getBranch",
				"amplify:getDomainAssociation",
				"amplify:getJob",
				"amplify:getWebhook",
				"amplify:listApps",
				"amplify:listWebhooks",
				"amplifyuibuilder:exportComponents",
				"amplifyuibuilder:exportThemes",
				"appflow:describeConnectorEntity",
				"appflow:describeConnectorProfiles",
				"appflow:describeConnectors",
				"appflow:describeFlow",
				"appflow:describeFlowExecutionRecords",
				"appflow:listConnectorEntities",
				"appflow:listFlows",
				"application-autoscaling:describeScalableTargets",
				"application-autoscaling:describeScalingActivities",
				"application-autoscaling:describeScalingPolicies",
				"application-autoscaling:describeScheduledActions",
				"applicationinsights:describeComponentConfiguration",
				"applicationinsights:describeComponentConfigurationRecommendation",
				"applicationinsights:listApplications",
				"applicationinsights:listComponents",
				"applicationinsights:listConfigurationHistory",
				"applicationinsights:listLogPatterns",
				"applicationinsights:listLogPatternSets",
				"appmesh:describeGatewayRoute",
				"appmesh:describeMesh",
				"appmesh:describeRoute",
				"appmesh:describeVirtualGateway",
				"appmesh:describeVirtualNode",
				"appmesh:describeVirtualRouter",
				"appmesh:describeVirtualService",
				"appmesh:listGatewayRoutes",
				"appmesh:listMeshes",
				"appmesh:listRoutes",
				"appmesh:listTagsForResource",
				"appmesh:listVirtualGateways",
				"appmesh:listVirtualNodes",
				"appmesh:listVirtualRouters",
				"appmesh:listVirtualServices",
				"apprunner:describeAutoScalingConfiguration",
				"apprunner:describeCustomDomains",
				"apprunner:describeOperation",
				"apprunner:describeService",
				"apprunner:listAutoScalingConfigurations",
				"apprunner:listConnections",
				"apprunner:listOperations",
				"apprunner:listServices",
				"apprunner:listTagsForResource",
				"appstream:describeAppBlocks",
				"appstream:describeApplicationFleetAssociations",
				"appstream:describeApplications",
				"appstream:describeDirectoryConfigs",
				"appstream:describeFleets",
				"appstream:describeImageBuilders",
				"appstream:describeImages",
				"appstream:describeSessions",
				"appstream:describeStacks",
				"appstream:listAssociatedFleets",
				"appstream:listAssociatedStacks",
				"appstream:listTagsForResource",
				"appsync:getFunction",
				"appsync:getGraphqlApi",
				"appsync:getIntrospectionSchema",
				"appsync:getResolver",
				"appsync:getSchemaCreationStatus",
				"appsync:getType",
				"appsync:listDataSources",
				"appsync:listFunctions",
				"appsync:listGraphqlApis",
				"appsync:listResolvers",
				"appsync:listTypes",
				"athena:batchGetNamedQuery",
				"athena:batchGetQueryExecution",
				"athena:getNamedQuery",
				"athena:getQueryExecution",
				"athena:getWorkGroup",
				"athena:listNamedQueries",
				"athena:listQueryExecutions",
				"athena:listTagsForResource",
				"athena:listWorkGroups",
				"auditmanager:getAccountStatus",
				"auditmanager:getDelegations",
				"auditmanager:listAssessmentFrameworks",
				"auditmanager:listAssessmentReports",
				"auditmanager:listAssessments",
				"auditmanager:listControls",
				"auditmanager:listKeywordsForDataSource",
				"auditmanager:listNotifications",
				"autoscaling-plans:describeScalingPlanResources",
				"autoscaling-plans:describeScalingPlans",
				"autoscaling-plans:getScalingPlanResourceForecastData",
				"autoscaling:describeAccountLimits",
				"autoscaling:describeAdjustmentTypes",
				"autoscaling:describeAutoScalingGroups",
				"autoscaling:describeAutoScalingInstances",
				"autoscaling:describeAutoScalingNotificationTypes",
				"autoscaling:describeInstanceRefreshes",
				"autoscaling:describeLaunchConfigurations",
				"autoscaling:describeLifecycleHooks",
				"autoscaling:describeLifecycleHookTypes",
				"autoscaling:describeLoadBalancers",
				"autoscaling:describeLoadBalancerTargetGroups",
				"autoscaling:describeMetricCollectionTypes",
				"autoscaling:describeNotificationConfigurations",
				"autoscaling:describePolicies",
				"autoscaling:describeScalingActivities",
				"autoscaling:describeScalingProcessTypes",
				"autoscaling:describeScheduledActions",
				"autoscaling:describeTags",
				"autoscaling:describeTerminationPolicyTypes",
				"backup:describeBackupJob",
				"backup:describeBackupVault",
				"backup:describeCopyJob",
				"backup:describeFramework",
				"backup:describeGlobalSettings",
				"backup:describeProtectedResource",
				"backup:describeRecoveryPoint",
				"backup:describeRegionSettings",
				"backup:describeReportJob",
				"backup:describeReportPlan",
				"backup:describeRestoreJob",
				"backup:getBackupPlan",
				"backup:getBackupPlanFromJSON",
				"backup:getBackupPlanFromTemplate",
				"backup:getBackupSelection",
				"backup:getBackupVaultAccessPolicy",
				"backup:getBackupVaultNotifications",
				"backup:getRecoveryPointRestoreMetadata",
				"backup:getSupportedResourceTypes",
				"backup:listBackupJobs",
				"backup:listBackupPlans",
				"backup:listBackupPlanTemplates",
				"backup:listBackupPlanVersions",
				"backup:listBackupSelections",
				"backup:listBackupVaults",
				"backup:listCopyJobs",
				"backup:listFrameworks",
				"backup:listProtectedResources",
				"backup:listRecoveryPointsByBackupVault",
				"backup:listRecoveryPointsByResource",
				"backup:listReportJobs",
				"backup:listReportPlans",
				"backup:listRestoreJobs",
				"backup:listTags",
				"batch:describeComputeEnvironments",
				"batch:describeJobDefinitions",
				"batch:describeJobQueues",
				"batch:describeJobs",
				"batch:listJobs",
				"braket:getDevice",
				"braket:getQuantumTask",
				"braket:searchDevices",
				"braket:searchQuantumTasks",
				"budgets:viewBudget",
				"ce:getCostAndUsage",
				"ce:getCostAndUsageWithResources",
				"ce:getCostForecast",
				"ce:getDimensionValues",
				"ce:getReservationCoverage",
				"ce:getReservationPurchaseRecommendation",
				"ce:getReservationUtilization",
				"ce:getRightsizingRecommendation",
				"ce:getSavingsPlansCoverage",
				"ce:getSavingsPlansPurchaseRecommendation",
				"ce:getSavingsPlansUtilization",
				"ce:getSavingsPlansUtilizationDetails",
				"ce:getTags",
				"cloud9:describeEnvironmentMemberships",
				"cloud9:describeEnvironments",
				"cloud9:listEnvironments",
				"clouddirectory:getDirectory",
				"clouddirectory:listDirectories",
				"cloudformation:batchDescribeTypeConfigurations",
				"cloudformation:describeAccountLimits",
				"cloudformation:describeChangeSet",
				"cloudformation:describePublisher",
				"cloudformation:describeStackEvents",
				"cloudformation:describeStackInstance",
				"cloudformation:describeStackResource",
				"cloudformation:describeStackResources",
				"cloudformation:describeStacks",
				"cloudformation:describeStackSet",
				"cloudformation:describeStackSetOperation",
				"cloudformation:describeType",
				"cloudformation:describeTypeRegistration",
				"cloudformation:estimateTemplateCost",
				"cloudformation:getStackPolicy",
				"cloudformation:getTemplate",
				"cloudformation:getTemplateSummary",
				"cloudformation:listChangeSets",
				"cloudformation:listExports",
				"cloudformation:listImports",
				"cloudformation:listStackInstances",
				"cloudformation:listStackResources",
				"cloudformation:listStacks",
				"cloudformation:listStackSetOperationResults",
				"cloudformation:listStackSetOperations",
				"cloudformation:listStackSets",
				"cloudformation:listTypeRegistrations",
				"cloudformation:listTypes",
				"cloudformation:listTypeVersions",
				"cloudfront:getCloudFrontOriginAccessIdentity",
				"cloudfront:getCloudFrontOriginAccessIdentityConfig",
				"cloudfront:getDistribution",
				"cloudfront:getDistributionConfig",
				"cloudfront:getInvalidation",
				"cloudfront:getStreamingDistribution",
				"cloudfront:getStreamingDistributionConfig",
				"cloudfront:listCloudFrontOriginAccessIdentities",
				"cloudfront:listDistributions",
				"cloudfront:listDistributionsByWebACLId",
				"cloudfront:listInvalidations",
				"cloudfront:listStreamingDistributions",
				"cloudhsm:describeBackups",
				"cloudhsm:describeClusters",
				"cloudsearch:describeAnalysisSchemes",
				"cloudsearch:describeAvailabilityOptions",
				"cloudsearch:describeDomains",
				"cloudsearch:describeExpressions",
				"cloudsearch:describeIndexFields",
				"cloudsearch:describeScalingParameters",
				"cloudsearch:describeServiceAccessPolicies",
				"cloudsearch:describeSuggesters",
				"cloudsearch:listDomainNames",
				"cloudtrail:describeTrails",
				"cloudtrail:getEventSelectors",
				"cloudtrail:getInsightSelectors",
				"cloudtrail:getTrail",
				"cloudtrail:getTrailStatus",
				"cloudtrail:listPublicKeys",
				"cloudtrail:listTags",
				"cloudtrail:listTrails",
				"cloudtrail:lookupEvents",
				"cloudwatch:describeAlarmHistory",
				"cloudwatch:describeAlarms",
				"cloudwatch:describeAlarmsForMetric",
				"cloudwatch:describeAnomalyDetectors",
				"cloudwatch:describeInsightRules",
				"cloudwatch:getDashboard",
				"cloudwatch:getInsightRuleReport",
				"cloudwatch:getMetricData",
				"cloudwatch:getMetricStatistics",
				"cloudwatch:listDashboards",
				"cloudwatch:listMetrics",
				"codeartifact:describeDomain",
				"codeartifact:describePackageVersion",
				"codeartifact:describeRepository",
				"codeartifact:getDomainPermissionsPolicy",
				"codeartifact:getRepositoryEndpoint",
				"codeartifact:getRepositoryPermissionsPolicy",
				"codeartifact:listDomains",
				"codeartifact:listPackages",
				"codeartifact:listPackageVersionAssets",
				"codeartifact:listPackageVersions",
				"codeartifact:listRepositories",
				"codeartifact:listRepositoriesInDomain",
				"codebuild:batchGetBuildBatches",
				"codebuild:batchGetBuilds",
				"codebuild:batchGetProjects",
				"codebuild:listBuildBatches",
				"codebuild:listBuildBatchesForProject",
				"codebuild:listBuilds",
				"codebuild:listBuildsForProject",
				"codebuild:listCuratedEnvironmentImages",
				"codebuild:listProjects",
				"codebuild:listSourceCredentials",
				"codecommit:batchGetRepositories",
				"codecommit:getBranch",
				"codecommit:getRepository",
				"codecommit:getRepositoryTriggers",
				"codecommit:listBranches",
				"codecommit:listRepositories",
				"codedeploy:batchGetApplicationRevisions",
				"codedeploy:batchGetApplications",
				"codedeploy:batchGetDeploymentGroups",
				"codedeploy:batchGetDeploymentInstances",
				"codedeploy:batchGetDeployments",
				"codedeploy:batchGetDeploymentTargets",
				"codedeploy:batchGetOnPremisesInstances",
				"codedeploy:getApplication",
				"codedeploy:getApplicationRevision",
				"codedeploy:getDeployment",
				"codedeploy:getDeploymentConfig",
				"codedeploy:getDeploymentGroup",
				"codedeploy:getDeploymentInstance",
				"codedeploy:getDeploymentTarget",
				"codedeploy:getOnPremisesInstance",
				"codedeploy:listApplicationRevisions",
				"codedeploy:listApplications",
				"codedeploy:listDeploymentConfigs",
				"codedeploy:listDeploymentGroups",
				"codedeploy:listDeploymentInstances",
				"codedeploy:listDeployments",
				"codedeploy:listDeploymentTargets",
				"codedeploy:listGitHubAccountTokenNames",
				"codedeploy:listOnPremisesInstances",
				"codepipeline:getJobDetails",
				"codepipeline:getPipeline",
				"codepipeline:getPipelineExecution",
				"codepipeline:getPipelineState",
				"codepipeline:listActionExecutions",
				"codepipeline:listActionTypes",
				"codepipeline:listPipelineExecutions",
				"codepipeline:listPipelines",
				"codepipeline:listWebhooks",
				"codestar:describeProject",
				"codestar:listProjects",
				"codestar:listResources",
				"codestar:listTeamMembers",
				"codestar:listUserProfiles",
				"cognito-identity:describeIdentityPool",
				"cognito-identity:getIdentityPoolRoles",
				"cognito-identity:listIdentities",
				"cognito-identity:listIdentityPools",
				"cognito-idp:describeIdentityProvider",
				"cognito-idp:describeResourceServer",
				"cognito-idp:describeRiskConfiguration",
				"cognito-idp:describeUserImportJob",
				"cognito-idp:describeUserPool",
				"cognito-idp:describeUserPoolClient",
				"cognito-idp:describeUserPoolDomain",
				"cognito-idp:getGroup",
				"cognito-idp:getUICustomization",
				"cognito-idp:getUserPoolMfaConfig",
				"cognito-idp:listGroups",
				"cognito-idp:listIdentityProviders",
				"cognito-idp:listResourceServers",
				"cognito-idp:listUserImportJobs",
				"cognito-idp:listUserPoolClients",
				"cognito-idp:listUserPools",
				"cognito-sync:describeDataset",
				"cognito-sync:describeIdentityPoolUsage",
				"cognito-sync:describeIdentityUsage",
				"cognito-sync:getCognitoEvents",
				"cognito-sync:getIdentityPoolConfiguration",
				"cognito-sync:listDatasets",
				"cognito-sync:listIdentityPoolUsage",
				"compute-optimizer:getAutoScalingGroupRecommendations",
				"compute-optimizer:getEBSVolumeRecommendations",
				"compute-optimizer:getEC2InstanceRecommendations",
				"compute-optimizer:getEC2RecommendationProjectedMetrics",
				"compute-optimizer:getEnrollmentStatus",
				"compute-optimizer:getRecommendationSummaries",
				"config:batchGetAggregateResourceConfig",
				"config:batchGetResourceConfig",
				"config:describeAggregateComplianceByConfigRules",
				"config:describeAggregationAuthorizations",
				"config:describeComplianceByConfigRule",
				"config:describeComplianceByResource",
				"config:describeConfigRuleEvaluationStatus",
				"config:describeConfigRules",
				"config:describeConfigurationAggregators",
				"config:describeConfigurationAggregatorSourcesStatus",
				"config:describeConfigurationRecorders",
				"config:describeConfigurationRecorderStatus",
				"config:describeConformancePackCompliance",
				"config:describeConformancePacks",
				"config:describeConformancePackStatus",
				"config:describeDeliveryChannels",
				"config:describeDeliveryChannelStatus",
				"config:describeOrganizationConfigRules",
				"config:describeOrganizationConfigRuleStatuses",
				"config:describeOrganizationConformancePacks",
				"config:describeOrganizationConformancePackStatuses",
				"config:describePendingAggregationRequests",
				"config:describeRemediationConfigurations",
				"config:describeRemediationExceptions",
				"config:describeRemediationExecutionStatus",
				"config:describeRetentionConfigurations",
				"config:getAggregateComplianceDetailsByConfigRule",
				"config:getAggregateConfigRuleComplianceSummary",
				"config:getAggregateDiscoveredResourceCounts",
				"config:getAggregateResourceConfig",
				"config:getComplianceDetailsByConfigRule",
				"config:getComplianceDetailsByResource",
				"config:getComplianceSummaryByConfigRule",
				"config:getComplianceSummaryByResourceType",
				"config:getConformancePackComplianceDetails",
				"config:getConformancePackComplianceSummary",
				"config:getDiscoveredResourceCounts",
				"config:getOrganizationConfigRuleDetailedStatus",
				"config:getOrganizationConformancePackDetailedStatus",
				"config:getResourceConfigHistory",
				"config:listAggregateDiscoveredResources",
				"config:listDiscoveredResources",
				"config:listTagsForResource",
				"connect:describeUser",
				"connect:getCurrentMetricData",
				"connect:getMetricData",
				"connect:listRoutingProfiles",
				"connect:listSecurityProfiles",
				"connect:listUsers",
				"controltower:describeAccountFactoryConfig",
				"controltower:describeCoreService",
				"controltower:describeGuardrail",
				"controltower:describeGuardrailForTarget",
				"controltower:describeManagedAccount",
				"controltower:describeSingleSignOn",
				"controltower:getAvailableUpdates",
				"controltower:getHomeRegion",
				"controltower:getLandingZoneStatus",
				"controltower:listDirectoryGroups",
				"controltower:listGuardrailsForTarget",
				"controltower:listGuardrailViolations",
				"controltower:listManagedAccounts",
				"controltower:listManagedAccountsForGuardrail",
				"controltower:listManagedAccountsForParent",
				"controltower:listManagedOrganizationalUnits",
				"controltower:listManagedOrganizationalUnitsForGuardrail",
				"databrew:describeDataset",
				"databrew:describeJob",
				"databrew:describeProject",
				"databrew:describeRecipe",
				"databrew:listDatasets",
				"databrew:listJobRuns",
				"databrew:listJobs",
				"databrew:listProjects",
				"databrew:listRecipes",
				"databrew:listRecipeVersions",
				"databrew:listTagsForResource",
				"datapipeline:describeObjects",
				"datapipeline:describePipelines",
				"datapipeline:getPipelineDefinition",
				"datapipeline:listPipelines",
				"datapipeline:queryObjects",
				"datasync:describeAgent",
				"datasync:describeLocationEfs",
				"datasync:describeLocationFsxWindows",
				"datasync:describeLocationNfs",
				"datasync:describeLocationObjectStorage",
				"datasync:describeLocationS3",
				"datasync:describeLocationSmb",
				"datasync:describeTask",
				"datasync:describeTaskExecution",
				"datasync:listAgents",
				"datasync:listLocations",
				"datasync:listTaskExecutions",
				"datasync:listTasks",
				"dax:describeClusters",
				"dax:describeDefaultParameters",
				"dax:describeEvents",
				"dax:describeParameterGroups",
				"dax:describeParameters",
				"dax:describeSubnetGroups",
				"detective:getMembers",
				"detective:listGraphs",
				"detective:listInvitations",
				"detective:listMembers",
				"devicefarm:getAccountSettings",
				"devicefarm:getDevice",
				"devicefarm:getDevicePool",
				"devicefarm:getDevicePoolCompatibility",
				"devicefarm:getJob",
				"devicefarm:getProject",
				"devicefarm:getRemoteAccessSession",
				"devicefarm:getRun",
				"devicefarm:getSuite",
				"devicefarm:getTest",
				"devicefarm:getTestGridProject",
				"devicefarm:getTestGridSession",
				"devicefarm:getUpload",
				"devicefarm:listArtifacts",
				"devicefarm:listDevicePools",
				"devicefarm:listDevices",
				"devicefarm:listJobs",
				"devicefarm:listProjects",
				"devicefarm:listRemoteAccessSessions",
				"devicefarm:listRuns",
				"devicefarm:listSamples",
				"devicefarm:listSuites",
				"devicefarm:listTestGridProjects",
				"devicefarm:listTestGridSessionActions",
				"devicefarm:listTestGridSessionArtifacts",
				"devicefarm:listTestGridSessions",
				"devicefarm:listTests",
				"devicefarm:listUniqueProblems",
				"devicefarm:listUploads",
				"directconnect:describeConnections",
				"directconnect:describeConnectionsOnInterconnect",
				"directconnect:describeInterconnects",
				"directconnect:describeLocations",
				"directconnect:describeVirtualGateways",
				"directconnect:describeVirtualInterfaces",
				"dlm:getLifecyclePolicies",
				"dlm:getLifecyclePolicy",
				"dms:describeAccountAttributes",
				"dms:describeConnections",
				"dms:describeEndpoints",
				"dms:describeEndpointTypes",
				"dms:describeOrderableReplicationInstances",
				"dms:describeRefreshSchemasStatus",
				"dms:describeReplicationInstances",
				"dms:describeReplicationSubnetGroups",
				"drs:describeJobLogItems",
				"drs:describeJobs",
				"drs:describeRecoveryInstances",
				"drs:describeRecoverySnapshots",
				"drs:describeReplicationConfigurationTemplates",
				"drs:describeSourceServers",
				"drs:getLaunchConfiguration",
				"drs:getReplicationConfiguration",
				"ds:describeConditionalForwarders",
				"ds:describeDirectories",
				"ds:describeEventTopics",
				"ds:describeSnapshots",
				"ds:describeTrusts",
				"ds:getDirectoryLimits",
				"ds:getSnapshotLimits",
				"ds:listIpRoutes",
				"ds:listSchemaExtensions",
				"ds:listTagsForResource",
				"dynamodb:describeBackup",
				"dynamodb:describeContinuousBackups",
				"dynamodb:describeGlobalTable",
				"dynamodb:describeLimits",
				"dynamodb:describeStream",
				"dynamodb:describeTable",
				"dynamodb:describeTimeToLive",
				"dynamodb:listBackups",
				"dynamodb:listGlobalTables",
				"dynamodb:listStreams",
				"dynamodb:listTables",
				"dynamodb:listTagsOfResource",
				"ec2:describeAccountAttributes",
				"ec2:describeAddresses",
				"ec2:describeAvailabilityZones",
				"ec2:describeBundleTasks",
				"ec2:describeByoipCidrs",
				"ec2:describeCapacityReservations",
				"ec2:describeClassicLinkInstances",
				"ec2:describeClientVpnAuthorizationRules",
				"ec2:describeClientVpnConnections",
				"ec2:describeClientVpnEndpoints",
				"ec2:describeClientVpnRoutes",
				"ec2:describeClientVpnTargetNetworks",
				"ec2:describeCoipPools",
				"ec2:describeConversionTasks",
				"ec2:describeCustomerGateways",
				"ec2:describeDhcpOptions",
				"ec2:describeElasticGpus",
				"ec2:describeExportImageTasks",
				"ec2:describeExportTasks",
				"ec2:describeFastSnapshotRestores",
				"ec2:describeFleetHistory",
				"ec2:describeFleetInstances",
				"ec2:describeFleets",
				"ec2:describeFlowLogs",
				"ec2:describeHostReservationOfferings",
				"ec2:describeHostReservations",
				"ec2:describeHosts",
				"ec2:describeIdentityIdFormat",
				"ec2:describeIdFormat",
				"ec2:describeImageAttribute",
				"ec2:describeImages",
				"ec2:describeImportImageTasks",
				"ec2:describeImportSnapshotTasks",
				"ec2:describeInstanceAttribute",
				"ec2:describeInstances",
				"ec2:describeInstanceStatus",
				"ec2:describeInternetGateways",
				"ec2:describeIpamPools",
				"ec2:describeIpams",
				"ec2:describeIpamScopes",
				"ec2:describeKeyPairs",
				"ec2:describeLaunchTemplates",
				"ec2:describeLaunchTemplateVersions",
				"ec2:describeLocalGatewayRouteTables",
				"ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
				"ec2:describeLocalGatewayRouteTableVpcAssociations",
				"ec2:describeLocalGateways",
				"ec2:describeLocalGatewayVirtualInterfaceGroups",
				"ec2:describeLocalGatewayVirtualInterfaces",
				"ec2:describeManagedPrefixLists",
				"ec2:describeMovingAddresses",
				"ec2:describeNatGateways",
				"ec2:describeNetworkAcls",
				"ec2:describeNetworkInterfaceAttribute",
				"ec2:describeNetworkInterfaces",
				"ec2:describePlacementGroups",
				"ec2:describePrefixLists",
				"ec2:describePublicIpv4Pools",
				"ec2:describeRegions",
				"ec2:describeReservedInstances",
				"ec2:describeReservedInstancesListings",
				"ec2:describeReservedInstancesModifications",
				"ec2:describeReservedInstancesOfferings",
				"ec2:describeRouteTables",
				"ec2:describeScheduledInstances",
				"ec2:describeSecurityGroups",
				"ec2:describeSnapshotAttribute",
				"ec2:describeSnapshots",
				"ec2:describeSpotDatafeedSubscription",
				"ec2:describeSpotFleetInstances",
				"ec2:describeSpotFleetRequestHistory",
				"ec2:describeSpotFleetRequests",
				"ec2:describeSpotInstanceRequests",
				"ec2:describeSpotPriceHistory",
				"ec2:describeSubnets",
				"ec2:describeTags",
				"ec2:describeTrafficMirrorFilters",
				"ec2:describeTrafficMirrorSessions",
				"ec2:describeTrafficMirrorTargets",
				"ec2:describeTransitGatewayAttachments",
				"ec2:describeTransitGatewayRouteTables",
				"ec2:describeTransitGateways",
				"ec2:describeTransitGatewayVpcAttachments",
				"ec2:describeVolumeAttribute",
				"ec2:describeVolumes",
				"ec2:describeVolumesModifications",
				"ec2:describeVolumeStatus",
				"ec2:describeVpcAttribute",
				"ec2:describeVpcClassicLink",
				"ec2:describeVpcClassicLinkDnsSupport",
				"ec2:describeVpcEndpointConnectionNotifications",
				"ec2:describeVpcEndpointConnections",
				"ec2:describeVpcEndpoints",
				"ec2:describeVpcEndpointServiceConfigurations",
				"ec2:describeVpcEndpointServicePermissions",
				"ec2:describeVpcEndpointServices",
				"ec2:describeVpcPeeringConnections",
				"ec2:describeVpcs",
				"ec2:describeVpnConnections",
				"ec2:describeVpnGateways",
				"ec2:getCoipPoolUsage",
				"ec2:getConsoleScreenshot",
				"ec2:getIpamAddressHistory",
				"ec2:getIpamPoolAllocations",
				"ec2:getIpamPoolCidrs",
				"ec2:getIpamResourceCidrs",
				"ec2:getManagedPrefixListAssociations",
				"ec2:getManagedPrefixListEntries",
				"ec2:getReservedInstancesExchangeQuote",
				"ec2:searchLocalGatewayRoutes",
				"ecr-public:describeImages",
				"ecr-public:describeImageTags",
				"ecr-public:describeRegistries",
				"ecr-public:describeRepositories",
				"ecr-public:getRegistryCatalogData",
				"ecr-public:getRepositoryCatalogData",
				"ecr-public:getRepositoryPolicy",
				"ecr-public:listTagsForResource",
				"ecr:batchCheckLayerAvailability",
				"ecr:describeImages",
				"ecr:describeImageScanFindings",
				"ecr:describeRegistry",
				"ecr:describeRepositories",
				"ecr:getLifecyclePolicy",
				"ecr:getRegistryPolicy",
				"ecr:getRepositoryPolicy",
				"ecr:listImages",
				"ecr:listTagsForResource",
				"ecs:describeCapacityProviders",
				"ecs:describeClusters",
				"ecs:describeContainerInstances",
				"ecs:describeServices",
				"ecs:describeTaskDefinition",
				"ecs:describeTasks",
				"ecs:describeTaskSets",
				"ecs:listAccountSettings",
				"ecs:listAttributes",
				"ecs:listClusters",
				"ecs:listContainerInstances",
				"ecs:listServices",
				"ecs:listTagsForResource",
				"ecs:listTaskDefinitionFamilies",
				"ecs:listTaskDefinitions",
				"ecs:listTasks",
				"eks:describeCluster",
				"eks:describeFargateProfile",
				"eks:describeNodegroup",
				"eks:describeUpdate",
				"eks:listClusters",
				"eks:listFargateProfiles",
				"eks:listNodegroups",
				"eks:listUpdates",
				"elasticache:describeCacheClusters",
				"elasticache:describeCacheEngineVersions",
				"elasticache:describeCacheParameterGroups",
				"elasticache:describeCacheParameters",
				"elasticache:describeCacheSecurityGroups",
				"elasticache:describeCacheSubnetGroups",
				"elasticache:describeEngineDefaultParameters",
				"elasticache:describeEvents",
				"elasticache:describeReplicationGroups",
				"elasticache:describeReservedCacheNodes",
				"elasticache:describeReservedCacheNodesOfferings",
				"elasticache:describeSnapshots",
				"elasticache:listAllowedNodeTypeModifications",
				"elasticache:listTagsForResource",
				"elasticbeanstalk:checkDNSAvailability",
				"elasticbeanstalk:describeApplicationVersions",
				"elasticbeanstalk:describeConfigurationOptions",
				"elasticbeanstalk:describeEnvironmentHealth",
				"elasticbeanstalk:describeEnvironmentManagedActionHistory",
				"elasticbeanstalk:describeEnvironmentManagedActions",
				"elasticbeanstalk:describeEnvironmentResources",
				"elasticbeanstalk:describeEnvironments",
				"elasticbeanstalk:describeEvents",
				"elasticbeanstalk:describeInstancesHealth",
				"elasticbeanstalk:describePlatformVersion",
				"elasticbeanstalk:listAvailableSolutionStacks",
				"elasticbeanstalk:listPlatformVersions",
				"elasticbeanstalk:validateConfigurationSettings",
				"elasticfilesystem:describeAccessPoints",
				"elasticfilesystem:describeFileSystemPolicy",
				"elasticfilesystem:describeFileSystems",
				"elasticfilesystem:describeLifecycleConfiguration",
				"elasticfilesystem:describeMountTargets",
				"elasticfilesystem:describeMountTargetSecurityGroups",
				"elasticfilesystem:describeTags",
				"elasticfilesystem:listTagsForResource",
				"elasticloadbalancing:describeAccountLimits",
				"elasticloadbalancing:describeInstanceHealth",
				"elasticloadbalancing:describeListenerCertificates",
				"elasticloadbalancing:describeListeners",
				"elasticloadbalancing:describeLoadBalancerAttributes",
				"elasticloadbalancing:describeLoadBalancerPolicies",
				"elasticloadbalancing:describeLoadBalancerPolicyTypes",
				"elasticloadbalancing:describeLoadBalancers",
				"elasticloadbalancing:describeRules",
				"elasticloadbalancing:describeSSLPolicies",
				"elasticloadbalancing:describeTags",
				"elasticloadbalancing:describeTargetGroupAttributes",
				"elasticloadbalancing:describeTargetGroups",
				"elasticloadbalancing:describeTargetHealth",
				"elasticmapreduce:describeCluster",
				"elasticmapreduce:describeSecurityConfiguration",
				"elasticmapreduce:describeStep",
				"elasticmapreduce:listBootstrapActions",
				"elasticmapreduce:listClusters",
				"elasticmapreduce:listInstanceGroups",
				"elasticmapreduce:listInstances",
				"elasticmapreduce:listSecurityConfigurations",
				"elasticmapreduce:listSteps",
				"elastictranscoder:listJobsByPipeline",
				"elastictranscoder:listJobsByStatus",
				"elastictranscoder:listPipelines",
				"elastictranscoder:listPresets",
				"elastictranscoder:readPipeline",
				"elastictranscoder:readPreset",
				"es:describeElasticsearchDomain",
				"es:describeElasticsearchDomainConfig",
				"es:describeElasticsearchDomains",
				"es:listDomainNames",
				"events:describeApiDestination",
				"events:describeEventBus",
				"events:describeEventSource",
				"events:describePartnerEventSource",
				"events:describeRule",
				"events:listApiDestinations",
				"events:listConnections",
				"events:listEventBuses",
				"events:listEventSources",
				"events:listPartnerEventSourceAccounts",
				"events:listPartnerEventSources",
				"events:listRuleNamesByTarget",
				"events:listRules",
				"events:listTargetsByRule",
				"events:testEventPattern",
				"firehose:describeDeliveryStream",
				"firehose:listDeliveryStreams",
				"fms:getAdminAccount",
				"fms:getComplianceDetail",
				"fms:getNotificationChannel",
				"fms:getPolicy",
				"fms:getProtectionStatus",
				"fms:listComplianceStatus",
				"fms:listMemberAccounts",
				"fms:listPolicies",
				"forecast:describeDataset",
				"forecast:describeDatasetGroup",
				"forecast:describeDatasetImportJob",
				"forecast:describeForecast",
				"forecast:describeForecastExportJob",
				"forecast:describePredictor",
				"forecast:getAccuracyMetrics",
				"forecast:listDatasetGroups",
				"forecast:listDatasetImportJobs",
				"forecast:listDatasets",
				"forecast:listForecastExportJobs",
				"forecast:listForecasts",
				"forecast:listPredictors",
				"fsx:describeBackups",
				"fsx:describeDataRepositoryTasks",
				"fsx:describeFileSystems",
				"fsx:describeSnapshots",
				"fsx:describeStorageVirtualMachines",
				"fsx:describeVolumes",
				"fsx:listTagsForResource",
				"glacier:describeJob",
				"glacier:describeVault",
				"glacier:getDataRetrievalPolicy",
				"glacier:getVaultAccessPolicy",
				"glacier:getVaultLock",
				"glacier:getVaultNotifications",
				"glacier:listJobs",
				"glacier:listTagsForVault",
				"glacier:listVaults",
				"globalaccelerator:describeAccelerator",
				"globalaccelerator:describeAcceleratorAttributes",
				"globalaccelerator:describeEndpointGroup",
				"globalaccelerator:describeListener",
				"globalaccelerator:listAccelerators",
				"globalaccelerator:listEndpointGroups",
				"globalaccelerator:listListeners",
				"glue:batchGetPartition",
				"glue:checkSchemaVersionValidity",
				"glue:getCatalogImportStatus",
				"glue:getClassifier",
				"glue:getClassifiers",
				"glue:getCrawler",
				"glue:getCrawlerMetrics",
				"glue:getCrawlers",
				"glue:getDatabase",
				"glue:getDatabases",
				"glue:getDataflowGraph",
				"glue:getDevEndpoint",
				"glue:getDevEndpoints",
				"glue:getJob",
				"glue:getJobRun",
				"glue:getJobRuns",
				"glue:getJobs",
				"glue:getMapping",
				"glue:getPartition",
				"glue:getPartitions",
				"glue:getRegistry",
				"glue:getSchema",
				"glue:getSchemaByDefinition",
				"glue:getSchemaVersion",
				"glue:getSchemaVersionsDiff",
				"glue:getTable",
				"glue:getTables",
				"glue:getTableVersions",
				"glue:getTrigger",
				"glue:getTriggers",
				"glue:getUserDefinedFunction",
				"glue:getUserDefinedFunctions",
				"glue:listRegistries",
				"glue:listSchemas",
				"glue:listSchemaVersions",
				"glue:querySchemaVersionMetadata",
				"greengrass:getConnectivityInfo",
				"greengrass:getCoreDefinition",
				"greengrass:getCoreDefinitionVersion",
				"greengrass:getDeploymentStatus",
				"greengrass:getDeviceDefinition",
				"greengrass:getDeviceDefinitionVersion",
				"greengrass:getFunctionDefinition",
				"greengrass:getFunctionDefinitionVersion",
				"greengrass:getGroup",
				"greengrass:getGroupCertificateAuthority",
				"greengrass:getGroupVersion",
				"greengrass:getLoggerDefinition",
				"greengrass:getLoggerDefinitionVersion",
				"greengrass:getResourceDefinitionVersion",
				"greengrass:getServiceRoleForAccount",
				"greengrass:getSubscriptionDefinition",
				"greengrass:getSubscriptionDefinitionVersion",
				"greengrass:listCoreDefinitions",
				"greengrass:listCoreDefinitionVersions",
				"greengrass:listDeployments",
				"greengrass:listDeviceDefinitions",
				"greengrass:listDeviceDefinitionVersions",
				"greengrass:listFunctionDefinitions",
				"greengrass:listFunctionDefinitionVersions",
				"greengrass:listGroups",
				"greengrass:listGroupVersions",
				"greengrass:listLoggerDefinitions",
				"greengrass:listLoggerDefinitionVersions",
				"greengrass:listResourceDefinitions",
				"greengrass:listResourceDefinitionVersions",
				"greengrass:listSubscriptionDefinitions",
				"greengrass:listSubscriptionDefinitionVersions",
				"guardduty:getDetector",
				"guardduty:getFindings",
				"guardduty:getFindingsStatistics",
				"guardduty:getInvitationsCount",
				"guardduty:getIPSet",
				"guardduty:getMasterAccount",
				"guardduty:getMembers",
				"guardduty:getThreatIntelSet",
				"guardduty:listDetectors",
				"guardduty:listFindings",
				"guardduty:listInvitations",
				"guardduty:listIPSets",
				"guardduty:listMembers",
				"guardduty:listThreatIntelSets",
				"health:describeAffectedAccountsForOrganization",
				"health:describeAffectedEntities",
				"health:describeAffectedEntitiesForOrganization",
				"health:describeEntityAggregates",
				"health:describeEventAggregates",
				"health:describeEventDetails",
				"health:describeEventDetailsForOrganization",
				"health:describeEvents",
				"health:describeEventsForOrganization",
				"health:describeEventTypes",
				"health:describeHealthServiceStatusForOrganization",
				"iam:getAccessKeyLastUsed",
				"iam:getAccountAuthorizationDetails",
				"iam:getAccountPasswordPolicy",
				"iam:getAccountSummary",
				"iam:getContextKeysForCustomPolicy",
				"iam:getContextKeysForPrincipalPolicy",
				"iam:getCredentialReport",
				"iam:getGroup",
				"iam:getGroupPolicy",
				"iam:getInstanceProfile",
				"iam:getLoginProfile",
				"iam:getOpenIDConnectProvider",
				"iam:getPolicy",
				"iam:getPolicyVersion",
				"iam:getRole",
				"iam:getRolePolicy",
				"iam:getSAMLProvider",
				"iam:getServerCertificate",
				"iam:getSSHPublicKey",
				"iam:getUser",
				"iam:getUserPolicy",
				"iam:listAccessKeys",
				"iam:listAccountAliases",
				"iam:listAttachedGroupPolicies",
				"iam:listAttachedRolePolicies",
				"iam:listAttachedUserPolicies",
				"iam:listEntitiesForPolicy",
				"iam:listGroupPolicies",
				"iam:listGroups",
				"iam:listGroupsForUser",
				"iam:listInstanceProfiles",
				"iam:listInstanceProfilesForRole",
				"iam:listMFADevices",
				"iam:listOpenIDConnectProviders",
				"iam:listPolicies",
				"iam:listPolicyVersions",
				"iam:listRolePolicies",
				"iam:listRoles",
				"iam:listSAMLProviders",
				"iam:listServerCertificates",
				"iam:listSigningCertificates",
				"iam:listSSHPublicKeys",
				"iam:listUserPolicies",
				"iam:listUsers",
				"iam:listVirtualMFADevices",
				"iam:simulateCustomPolicy",
				"iam:simulatePrincipalPolicy",
				"imagebuilder:getComponent",
				"imagebuilder:getComponentPolicy",
				"imagebuilder:getContainerRecipe",
				"imagebuilder:getDistributionConfiguration",
				"imagebuilder:getImage",
				"imagebuilder:getImagePipeline",
				"imagebuilder:getImagePolicy",
				"imagebuilder:getImageRecipe",
				"imagebuilder:getImageRecipePolicy",
				"imagebuilder:getInfrastructureConfiguration",
				"imagebuilder:listComponentBuildVersions",
				"imagebuilder:listComponents",
				"imagebuilder:listContainerRecipes",
				"imagebuilder:listDistributionConfigurations",
				"imagebuilder:listImageBuildVersions",
				"imagebuilder:listImagePipelineImages",
				"imagebuilder:listImagePipelines",
				"imagebuilder:listImageRecipes",
				"imagebuilder:listImages",
				"imagebuilder:listInfrastructureConfigurations",
				"imagebuilder:listTagsForResource",
				"inspector:describeAssessmentRuns",
				"inspector:describeAssessmentTargets",
				"inspector:describeAssessmentTemplates",
				"inspector:describeCrossAccountAccessRole",
				"inspector:describeResourceGroups",
				"inspector:describeRulesPackages",
				"inspector:getTelemetryMetadata",
				"inspector:listAssessmentRunAgents",
				"inspector:listAssessmentRuns",
				"inspector:listAssessmentTargets",
				"inspector:listAssessmentTemplates",
				"inspector:listEventSubscriptions",
				"inspector:listRulesPackages",
				"inspector:listTagsForResource",
				"iot:describeAuthorizer",
				"iot:describeCACertificate",
				"iot:describeCertificate",
				"iot:describeDefaultAuthorizer",
				"iot:describeEndpoint",
				"iot:describeIndex",
				"iot:describeJobExecution",
				"iot:describeThing",
				"iot:describeThingGroup",
				"iot:describeTunnel",
				"iot:getEffectivePolicies",
				"iot:getIndexingConfiguration",
				"iot:getLoggingOptions",
				"iot:getPolicy",
				"iot:getPolicyVersion",
				"iot:getTopicRule",
				"iot:getV2LoggingOptions",
				"iot:listAttachedPolicies",
				"iot:listAuthorizers",
				"iot:listCACertificates",
				"iot:listCertificates",
				"iot:listCertificatesByCA",
				"iot:listJobExecutionsForJob",
				"iot:listJobExecutionsForThing",
				"iot:listJobs",
				"iot:listOutgoingCertificates",
				"iot:listPolicies",
				"iot:listPolicyPrincipals",
				"iot:listPolicyVersions",
				"iot:listPrincipalPolicies",
				"iot:listPrincipalThings",
				"iot:listRoleAliases",
				"iot:listTargetsForPolicy",
				"iot:listThingGroups",
				"iot:listThingGroupsForThing",
				"iot:listThingPrincipals",
				"iot:listThingRegistrationTasks",
				"iot:listThings",
				"iot:listThingTypes",
				"iot:listTopicRules",
				"iot:listTunnels",
				"iot:listV2LoggingLevels",
				"iotevents:describeDetector",
				"iotevents:describeDetectorModel",
				"iotevents:describeInput",
				"iotevents:describeLoggingOptions",
				"iotevents:listDetectorModels",
				"iotevents:listDetectorModelVersions",
				"iotevents:listDetectors",
				"iotevents:listInputs",
				"iotsitewise:describeAccessPolicy",
				"iotsitewise:describeAsset",
				"iotsitewise:describeAssetModel",
				"iotsitewise:describeAssetProperty",
				"iotsitewise:describeDashboard",
				"iotsitewise:describeGateway",
				"iotsitewise:describeGatewayCapabilityConfiguration",
				"iotsitewise:describeLoggingOptions",
				"iotsitewise:describePortal",
				"iotsitewise:describeProject",
				"iotsitewise:listAccessPolicies",
				"iotsitewise:listAssetModels",
				"iotsitewise:listAssets",
				"iotsitewise:listAssociatedAssets",
				"iotsitewise:listDashboards",
				"iotsitewise:listGateways",
				"iotsitewise:listPortals",
				"iotsitewise:listProjectAssets",
				"iotsitewise:listProjects",
				"iotwireless:getDestination",
				"iotwireless:getDeviceProfile",
				"iotwireless:getPartnerAccount",
				"iotwireless:getServiceEndpoint",
				"iotwireless:getServiceProfile",
				"iotwireless:getWirelessDevice",
				"iotwireless:getWirelessDeviceStatistics",
				"iotwireless:getWirelessGateway",
				"iotwireless:getWirelessGatewayCertificate",
				"iotwireless:getWirelessGatewayFirmwareInformation",
				"iotwireless:getWirelessGatewayStatistics",
				"iotwireless:getWirelessGatewayTask",
				"iotwireless:getWirelessGatewayTaskDefinition",
				"iotwireless:listDestinations",
				"iotwireless:listDeviceProfiles",
				"iotwireless:listPartnerAccounts",
				"iotwireless:listServiceProfiles",
				"iotwireless:listTagsForResource",
				"iotwireless:listWirelessDevices",
				"iotwireless:listWirelessGateways",
				"iotwireless:listWirelessGatewayTaskDefinitions",
				"kafka:describeCluster",
				"kafka:getBootstrapBrokers",
				"kafka:listClusters",
				"kafka:listNodes",
				"kendra:describeDataSource",
				"kendra:describeFaq",
				"kendra:describeIndex",
				"kendra:listDataSources",
				"kendra:listFaqs",
				"kendra:listIndices",
				"kinesis:describeStream",
				"kinesis:describeStreamConsumer",
				"kinesis:describeStreamSummary",
				"kinesis:listShards",
				"kinesis:listStreams",
				"kinesis:listStreamConsumers",
				"kinesis:listTagsForStream",
				"kinesisanalytics:describeApplication",
				"kinesisanalytics:describeApplicationSnapshot",
				"kinesisanalytics:listApplications",
				"kinesisanalytics:listApplicationSnapshots",
				"kms:describeKey",
				"kms:getKeyPolicy",
				"kms:getKeyRotationStatus",
				"kms:listAliases",
				"kms:listGrants",
				"kms:listKeyPolicies",
				"kms:listKeys",
				"kms:listResourceTags",
				"kms:listRetirableGrants",
				"lambda:getAccountSettings",
				"lambda:getAlias",
				"lambda:getCodeSigningConfig",
				"lambda:getEventSourceMapping",
				"lambda:getFunction",
				"lambda:getFunctionCodeSigningConfig",
				"lambda:getFunctionConcurrency",
				"lambda:getFunctionConfiguration",
				"lambda:getFunctionEventInvokeConfig",
				"lambda:getLayerVersion",
				"lambda:getLayerVersionPolicy",
				"lambda:getPolicy",
				"lambda:getProvisionedConcurrencyConfig",
				"lambda:listAliases",
				"lambda:listCodeSigningConfigs",
				"lambda:listEventSourceMappings",
				"lambda:listFunctionEventInvokeConfigs",
				"lambda:listFunctions",
				"lambda:listFunctionsByCodeSigningConfig",
				"lambda:listLayers",
				"lambda:listLayerVersions",
				"lambda:listProvisionedConcurrencyConfigs",
				"lambda:listVersionsByFunction",
				"launchwizard:describeProvisionedApp",
				"launchwizard:describeProvisioningEvents",
				"launchwizard:listProvisionedApps",
				"lex:getBot",
				"lex:getBotAlias",
				"lex:getBotAliases",
				"lex:getBotChannelAssociation",
				"lex:getBotChannelAssociations",
				"lex:getBots",
				"lex:getBotVersions",
				"lex:getBuiltinIntent",
				"lex:getBuiltinIntents",
				"lex:getBuiltinSlotTypes",
				"lex:getIntent",
				"lex:getIntents",
				"lex:getIntentVersions",
				"lex:getSlotType",
				"lex:getSlotTypes",
				"lex:getSlotTypeVersions",
				"license-manager:getLicenseConfiguration",
				"license-manager:getServiceSettings",
				"license-manager:listAssociationsForLicenseConfiguration",
				"license-manager:listFailuresForLicenseConfigurationOperations",
				"license-manager:listLicenseConfigurations",
				"license-manager:listLicenseSpecificationsForResource",
				"license-manager:listResourceInventory",
				"license-manager:listUsageForLicenseConfiguration",
				"lightsail:getActiveNames",
				"lightsail:getAlarms",
				"lightsail:getAutoSnapshots",
				"lightsail:getBlueprints",
				"lightsail:getBucketBundles",
				"lightsail:getBucketMetricData",
				"lightsail:getBuckets",
				"lightsail:getBundles",
				"lightsail:getCertificates",
				"lightsail:getContainerImages",
				"lightsail:getContainerServiceDeployments",
				"lightsail:getContainerServiceMetricData",
				"lightsail:getContainerServicePowers",
				"lightsail:getContainerServices",
				"lightsail:getDisk",
				"lightsail:getDisks",
				"lightsail:getDiskSnapshot",
				"lightsail:getDiskSnapshots",
				"lightsail:getDistributionBundles",
				"lightsail:getDistributionMetricData",
				"lightsail:getDistributions",
				"lightsail:getDomain",
				"lightsail:getDomains",
				"lightsail:getExportSnapshotRecords",
				"lightsail:getInstance",
				"lightsail:getInstanceMetricData",
				"lightsail:getInstancePortStates",
				"lightsail:getInstances",
				"lightsail:getInstanceSnapshot",
				"lightsail:getInstanceSnapshots",
				"lightsail:getInstanceState",
				"lightsail:getKeyPair",
				"lightsail:getKeyPairs",
				"lightsail:getLoadBalancer",
				"lightsail:getLoadBalancerMetricData",
				"lightsail:getLoadBalancers",
				"lightsail:getLoadBalancerTlsCertificates",
				"lightsail:getOperation",
				"lightsail:getOperations",
				"lightsail:getOperationsForResource",
				"lightsail:getRegions",
				"lightsail:getRelationalDatabase",
				"lightsail:getRelationalDatabaseMetricData",
				"lightsail:getRelationalDatabases",
				"lightsail:getRelationalDatabaseSnapshot",
				"lightsail:getRelationalDatabaseSnapshots",
				"lightsail:getStaticIp",
				"lightsail:getStaticIps",
				"lightsail:isVpcPeered",
				"logs:describeDestinations",
				"logs:describeExportTasks",
				"logs:describeLogGroups",
				"logs:describeLogStreams",
				"logs:describeMetricFilters",
				"logs:describeQueries",
				"logs:describeResourcePolicies",
				"logs:describeSubscriptionFilters",
				"logs:testMetricFilter",
				"lookoutmetrics:describeAlert",
				"lookoutmetrics:describeAnomalyDetectionExecutions",
				"lookoutmetrics:describeAnomalyDetector",
				"lookoutmetrics:describeMetricSet",
				"lookoutmetrics:getAnomalyGroup",
				"lookoutmetrics:getDataQualityMetrics",
				"lookoutmetrics:getFeedback",
				"lookoutmetrics:getSampleData",
				"lookoutmetrics:listAlerts",
				"lookoutmetrics:listAnomalyDetectors",
				"lookoutmetrics:listAnomalyGroupSummaries",
				"lookoutmetrics:listAnomalyGroupTimeSeries",
				"lookoutmetrics:listMetricSets",
				"lookoutmetrics:listTagsForResource",
				"machinelearning:describeBatchPredictions",
				"machinelearning:describeDataSources",
				"machinelearning:describeEvaluations",
				"machinelearning:describeMLModels",
				"machinelearning:getBatchPrediction",
				"machinelearning:getDataSource",
				"machinelearning:getEvaluation",
				"machinelearning:getMLModel",
				"macie2:getClassificationExportConfiguration",
				"macie2:getCustomDataIdentifier",
				"macie2:getFindings",
				"macie2:getFindingStatistics",
				"macie2:listClassificationJobs",
				"macie2:listCustomDataIdentifiers",
				"macie2:listFindings",
				"managedblockchain:getMember",
				"managedblockchain:getNetwork",
				"managedblockchain:getNode",
				"managedblockchain:listMembers",
				"managedblockchain:listNetworks",
				"managedblockchain:listNodes",
				"mediaconnect:describeFlow",
				"mediaconnect:listEntitlements",
				"mediaconnect:listFlows",
				"mediaconvert:describeEndpoints",
				"mediaconvert:getJob",
				"mediaconvert:getJobTemplate",
				"mediaconvert:getPreset",
				"mediaconvert:getQueue",
				"mediaconvert:listJobs",
				"mediaconvert:listJobTemplates",
				"medialive:describeChannel",
				"medialive:describeInput",
				"medialive:describeInputDevice",
				"medialive:describeInputSecurityGroup",
				"medialive:describeMultiplex",
				"medialive:describeOffering",
				"medialive:describeReservation",
				"medialive:describeSchedule",
				"medialive:listChannels",
				"medialive:listInputDevices",
				"medialive:listInputs",
				"medialive:listInputSecurityGroups",
				"medialive:listMultiplexes",
				"medialive:listOfferings",
				"medialive:listReservations",
				"mediapackage:describeChannel",
				"mediapackage:describeOriginEndpoint",
				"mediapackage:listChannels",
				"mediapackage:listOriginEndpoints",
				"mediastore:describeContainer",
				"mediastore:getContainerPolicy",
				"mediastore:getCorsPolicy",
				"mediastore:listContainers",
				"mediatailor:getPlaybackConfiguration",
				"mediatailor:listPlaybackConfigurations",
				"mgn:describeJobLogItems",
				"mgn:describeJobs",
				"mgn:describeReplicationConfigurationTemplates",
				"mgn:describeSourceServers",
				"mgn:describeVcenterClients",
				"mgn:getLaunchConfiguration",
				"mgn:getReplicationConfiguration",
				"mobiletargeting:getAdmChannel",
				"mobiletargeting:getApnsChannel",
				"mobiletargeting:getApnsSandboxChannel",
				"mobiletargeting:getApnsVoipChannel",
				"mobiletargeting:getApnsVoipSandboxChannel",
				"mobiletargeting:getApp",
				"mobiletargeting:getApplicationSettings",
				"mobiletargeting:getApps",
				"mobiletargeting:getBaiduChannel",
				"mobiletargeting:getCampaign",
				"mobiletargeting:getCampaignActivities",
				"mobiletargeting:getCampaigns",
				"mobiletargeting:getCampaignVersion",
				"mobiletargeting:getCampaignVersions",
				"mobiletargeting:getEmailChannel",
				"mobiletargeting:getEndpoint",
				"mobiletargeting:getEventStream",
				"mobiletargeting:getExportJob",
				"mobiletargeting:getExportJobs",
				"mobiletargeting:getGcmChannel",
				"mobiletargeting:getImportJob",
				"mobiletargeting:getImportJobs",
				"mobiletargeting:getSegment",
				"mobiletargeting:getSegmentImportJobs",
				"mobiletargeting:getSegments",
				"mobiletargeting:getSegmentVersion",
				"mobiletargeting:getSegmentVersions",
				"mobiletargeting:getSmsChannel",
				"mq:describeBroker",
				"mq:describeConfiguration",
				"mq:describeConfigurationRevision",
				"mq:describeUser",
				"mq:listBrokers",
				"mq:listConfigurationRevisions",
				"mq:listConfigurations",
				"mq:listUsers",
				"network-firewall:describeFirewall",
				"network-firewall:describeFirewallPolicy",
				"network-firewall:describeLoggingConfiguration",
				"network-firewall:describeRuleGroup",
				"network-firewall:listFirewallPolicies",
				"network-firewall:listFirewalls",
				"network-firewall:listRuleGroups",
				"networkmanager:describeGlobalNetworks",
				"networkmanager:getConnectAttachment",
				"networkmanager:getConnections",
				"networkmanager:getConnectPeer",
				"networkmanager:getConnectPeerAssociations",
				"networkmanager:getCoreNetwork",
				"networkmanager:getCoreNetworkChangeSet",
				"networkmanager:getCoreNetworkPolicy",
				"networkmanager:getCustomerGatewayAssociations",
				"networkmanager:getDevices",
				"networkmanager:getLinkAssociations",
				"networkmanager:getLinks",
				"networkmanager:getNetworkResourceCounts",
				"networkmanager:getNetworkResourceRelationships",
				"networkmanager:getNetworkResources",
				"networkmanager:getNetworkRoutes",
				"networkmanager:getNetworkTelemetry",
				"networkmanager:getResourcePolicy",
				"networkmanager:getRouteAnalysis",
				"networkmanager:getSites",
				"networkmanager:getSiteToSiteVpnAttachment",
				"networkmanager:getTransitGatewayConnectPeerAssociations",
				"networkmanager:getTransitGatewayRegistrations",
				"networkmanager:getVpcAttachment",
				"networkmanager:listAttachments",
				"networkmanager:listConnectPeers",
				"networkmanager:listCoreNetworkPolicyVersions",
				"networkmanager:listCoreNetworks",
				"networkmanager:listTagsForResource",
				"opsworks-cm:describeAccountAttributes",
				"opsworks-cm:describeBackups",
				"opsworks-cm:describeEvents",
				"opsworks-cm:describeNodeAssociationStatus",
				"opsworks-cm:describeServers",
				"opsworks:describeAgentVersions",
				"opsworks:describeApps",
				"opsworks:describeCommands",
				"opsworks:describeDeployments",
				"opsworks:describeEcsClusters",
				"opsworks:describeElasticIps",
				"opsworks:describeElasticLoadBalancers",
				"opsworks:describeInstances",
				"opsworks:describeLayers",
				"opsworks:describeLoadBasedAutoScaling",
				"opsworks:describeMyUserProfile",
				"opsworks:describePermissions",
				"opsworks:describeRaidArrays",
				"opsworks:describeRdsDbInstances",
				"opsworks:describeServiceErrors",
				"opsworks:describeStackProvisioningParameters",
				"opsworks:describeStacks",
				"opsworks:describeStackSummary",
				"opsworks:describeTimeBasedAutoScaling",
				"opsworks:describeUserProfiles",
				"opsworks:describeVolumes",
				"opsworks:getHostnameSuggestion",
				"organizations:listAccounts",
				"organizations:listTagsForResource",
				"outposts:getOutpost",
				"outposts:getOutpostInstanceTypes",
				"outposts:listOutposts",
				"outposts:listSites",
				"personalize:describeAlgorithm",
				"personalize:describeCampaign",
				"personalize:describeDataset",
				"personalize:describeDatasetGroup",
				"personalize:describeDatasetImportJob",
				"personalize:describeEventTracker",
				"personalize:describeFeatureTransformation",
				"personalize:describeRecipe",
				"personalize:describeSchema",
				"personalize:describeSolution",
				"personalize:describeSolutionVersion",
				"personalize:listCampaigns",
				"personalize:listDatasetGroups",
				"personalize:listDatasetImportJobs",
				"personalize:listDatasets",
				"personalize:listEventTrackers",
				"personalize:listRecipes",
				"personalize:listSchemas",
				"personalize:listSolutions",
				"personalize:listSolutionVersions",
				"polly:describeVoices",
				"polly:getLexicon",
				"polly:listLexicons",
				"pricing:describeServices",
				"pricing:getAttributeValues",
				"pricing:getProducts",
				"quicksight:describeDashboard",
				"quicksight:describeDashboardPermissions",
				"quicksight:describeGroup",
				"quicksight:describeIAMPolicyAssignment",
				"quicksight:describeTemplate",
				"quicksight:describeTemplateAlias",
				"quicksight:describeTemplatePermissions",
				"quicksight:describeUser",
				"quicksight:listDashboards",
				"quicksight:listGroupMemberships",
				"quicksight:listGroups",
				"quicksight:listIAMPolicyAssignments",
				"quicksight:listIAMPolicyAssignmentsForUser",
				"quicksight:listTemplateAliases",
				"quicksight:listTemplates",
				"quicksight:listTemplateVersions",
				"quicksight:listUserGroups",
				"quicksight:listUsers",
				"ram:getPermission",
				"ram:getResourceShareAssociations",
				"ram:getResourceShareInvitations",
				"ram:getResourceShares",
				"ram:listPendingInvitationResources",
				"ram:listPrincipals",
				"ram:listResources",
				"ram:listResourceSharePermissions",
				"rbin:getRule",
				"rbin:listRules",
				"rds:describeAccountAttributes",
				"rds:describeCertificates",
				"rds:describeDBClusterParameterGroups",
				"rds:describeDBClusterParameters",
				"rds:describeDBClusters",
				"rds:describeDBClusterSnapshots",
				"rds:describeDBEngineVersions",
				"rds:describeDBInstances",
				"rds:describeDBParameterGroups",
				"rds:describeDBParameters",
				"rds:describeDBSecurityGroups",
				"rds:describeDBSnapshotAttributes",
				"rds:describeDBSnapshots",
				"rds:describeDBSubnetGroups",
				"rds:describeEngineDefaultClusterParameters",
				"rds:describeEngineDefaultParameters",
				"rds:describeEventCategories",
				"rds:describeEvents",
				"rds:describeEventSubscriptions",
				"rds:describeExportTasks",
				"rds:describeOptionGroupOptions",
				"rds:describeOptionGroups",
				"rds:describeOrderableDBInstanceOptions",
				"rds:describePendingMaintenanceActions",
				"rds:describeReservedDBInstances",
				"rds:describeReservedDBInstancesOfferings",
				"rds:listTagsForResource",
				"redshift-data:describeStatement",
				"redshift-data:listStatements",
				"redshift:describeClusterParameterGroups",
				"redshift:describeClusterParameters",
				"redshift:describeClusters",
				"redshift:describeClusterSecurityGroups",
				"redshift:describeClusterSnapshots",
				"redshift:describeClusterSubnetGroups",
				"redshift:describeClusterVersions",
				"redshift:describeDefaultClusterParameters",
				"redshift:describeEventCategories",
				"redshift:describeEvents",
				"redshift:describeEventSubscriptions",
				"redshift:describeHsmClientCertificates",
				"redshift:describeHsmConfigurations",
				"redshift:describeLoggingStatus",
				"redshift:describeOrderableClusterOptions",
				"redshift:describeReservedNodeOfferings",
				"redshift:describeReservedNodes",
				"redshift:describeResize",
				"redshift:describeSnapshotCopyGrants",
				"redshift:describeStorage",
				"redshift:describeTableRestoreStatus",
				"redshift:describeTags",
				"rekognition:listCollections",
				"rekognition:listFaces",
				"resource-groups:getGroup",
				"resource-groups:getGroupQuery",
				"resource-groups:getTags",
				"resource-groups:listGroupResources",
				"resource-groups:listGroups",
				"resource-groups:searchResources",
				"robomaker:batchDescribeSimulationJob",
				"robomaker:describeDeploymentJob",
				"robomaker:describeFleet",
				"robomaker:describeRobot",
				"robomaker:describeRobotApplication",
				"robomaker:describeSimulationApplication",
				"robomaker:describeSimulationJob",
				"robomaker:listDeploymentJobs",
				"robomaker:listFleets",
				"robomaker:listRobotApplications",
				"robomaker:listRobots",
				"robomaker:listSimulationApplications",
				"robomaker:listSimulationJobs",
				"route53-recovery-readiness:getCell",
				"route53-recovery-readiness:getCellReadinessSummary",
				"route53-recovery-readiness:getReadinessCheck",
				"route53-recovery-readiness:getReadinessCheckResourceStatus",
				"route53-recovery-readiness:getReadinessCheckStatus",
				"route53-recovery-readiness:getRecoveryGroup",
				"route53-recovery-readiness:getRecoveryGroupReadinessSummary",
				"route53-recovery-readiness:listCells",
				"route53-recovery-readiness:listReadinessChecks",
				"route53-recovery-readiness:listRecoveryGroups",
				"route53-recovery-readiness:listResourceSets",
				"route53:getChange",
				"route53:getCheckerIpRanges",
				"route53:getGeoLocation",
				"route53:getHealthCheck",
				"route53:getHealthCheckCount",
				"route53:getHealthCheckLastFailureReason",
				"route53:getHealthCheckStatus",
				"route53:getHostedZone",
				"route53:getHostedZoneCount",
				"route53:getReusableDelegationSet",
				"route53:getTrafficPolicy",
				"route53:getTrafficPolicyInstance",
				"route53:getTrafficPolicyInstanceCount",
				"route53:listGeoLocations",
				"route53:listHealthChecks",
				"route53:listHostedZones",
				"route53:listHostedZonesByName",
				"route53:listResourceRecordSets",
				"route53:listReusableDelegationSets",
				"route53:listTrafficPolicies",
				"route53:listTrafficPolicyInstances",
				"route53:listTrafficPolicyInstancesByHostedZone",
				"route53:listTrafficPolicyInstancesByPolicy",
				"route53:listTrafficPolicyVersions",
				"route53domains:checkDomainAvailability",
				"route53domains:getContactReachabilityStatus",
				"route53domains:getDomainDetail",
				"route53domains:getOperationDetail",
				"route53domains:listDomains",
				"route53domains:listOperations",
				"route53domains:listTagsForDomain",
				"route53domains:viewBilling",
				"route53resolver:getFirewallConfig",
				"route53resolver:getFirewallDomainList",
				"route53resolver:getFirewallRuleGroup",
				"route53resolver:getFirewallRuleGroupAssociation",
				"route53resolver:getResolverDnssecConfig",
				"route53resolver:getResolverRulePolicy",
				"route53resolver:listFirewallConfigs",
				"route53resolver:listFirewallDomainLists",
				"route53resolver:listFirewallDomains",
				"route53resolver:listFirewallRuleGroupAssociations",
				"route53resolver:listFirewallRuleGroups",
				"route53resolver:listFirewallRules",
				"route53resolver:listResolverDnssecConfigs",
				"route53resolver:listResolverEndpointIpAddresses",
				"route53resolver:listResolverEndpoints",
				"route53resolver:listResolverRuleAssociations",
				"route53resolver:listResolverRules",
				"route53resolver:listTagsForResource",
				"s3:describeJob",
				"s3:describeMultiRegionAccessPointOperation",
				"s3:getAccelerateConfiguration",
				"s3:getAccessPoint",
				"s3:getAccessPointConfigurationForObjectLambda",
				"s3:getAccessPointForObjectLambda",
				"s3:getAccessPointPolicy",
				"s3:getAccessPointPolicyForObjectLambda",
				"s3:getAccessPointPolicyStatus",
				"s3:getAccessPointPolicyStatusForObjectLambda",
				"s3:getAccountPublicAccessBlock",
				"s3:getAnalyticsConfiguration",
				"s3:getBucketAcl",
				"s3:getBucketCORS",
				"s3:getBucketLocation",
				"s3:getBucketLogging",
				"s3:getBucketNotification",
				"s3:getBucketObjectLockConfiguration",
				"s3:getBucketOwnershipControls",
				"s3:getBucketPolicy",
				"s3:getBucketPolicyStatus",
				"s3:getBucketPublicAccessBlock",
				"s3:getBucketRequestPayment",
				"s3:getBucketVersioning",
				"s3:getBucketWebsite",
				"s3:getEncryptionConfiguration",
				"s3:getIntelligentTieringConfiguration",
				"s3:getInventoryConfiguration",
				"s3:getLifecycleConfiguration",
				"s3:getMetricsConfiguration",
				"s3:getMultiRegionAccessPoint",
				"s3:getMultiRegionAccessPointPolicy",
				"s3:getMultiRegionAccessPointPolicyStatus",
				"s3:getObjectLegalHold",
				"s3:getObjectRetention",
				"s3:getReplicationConfiguration",
				"s3:getStorageLensConfiguration",
				"s3:listAccessPoints",
				"s3:listAccessPointsForObjectLambda",
				"s3:listAllMyBuckets",
				"s3:listBucket",
				"s3:listBucketMultipartUploads",
				"s3:listBucketVersions",
				"s3:listJobs",
				"s3:listMultipartUploadParts",
				"s3:listMultiRegionAccessPoints",
				"s3:listStorageLensConfigurations",
				"sagemaker:describeAction",
				"sagemaker:describeAlgorithm",
				"sagemaker:describeApp",
				"sagemaker:describeArtifact",
				"sagemaker:describeAutoMLJob",
				"sagemaker:describeCompilationJob",
				"sagemaker:describeContext",
				"sagemaker:describeDataQualityJobDefinition",
				"sagemaker:describeDevice",
				"sagemaker:describeDeviceFleet",
				"sagemaker:describeDomain",
				"sagemaker:describeEdgePackagingJob",
				"sagemaker:describeEndpoint",
				"sagemaker:describeEndpointConfig",
				"sagemaker:describeExperiment",
				"sagemaker:describeFeatureGroup",
				"sagemaker:describeHumanTaskUi",
				"sagemaker:describeHyperParameterTuningJob",
				"sagemaker:describeImage",
				"sagemaker:describeImageVersion",
				"sagemaker:describeLabelingJob",
				"sagemaker:describeModel",
				"sagemaker:describeModelBiasJobDefinition",
				"sagemaker:describeModelExplainabilityJobDefinition",
				"sagemaker:describeModelPackage",
				"sagemaker:describeModelPackageGroup",
				"sagemaker:describeModelQualityJobDefinition",
				"sagemaker:describeMonitoringSchedule",
				"sagemaker:describeNotebookInstance",
				"sagemaker:describeNotebookInstanceLifecycleConfig",
				"sagemaker:describePipeline",
				"sagemaker:describePipelineDefinitionForExecution",
				"sagemaker:describePipelineExecution",
				"sagemaker:describeProcessingJob",
				"sagemaker:describeProject",
				"sagemaker:describeSubscribedWorkteam",
				"sagemaker:describeTrainingJob",
				"sagemaker:describeTransformJob",
				"sagemaker:describeTrial",
				"sagemaker:describeTrialComponent",
				"sagemaker:describeUserProfile",
				"sagemaker:describeWorkteam",
				"sagemaker:listActions",
				"sagemaker:listAlgorithms",
				"sagemaker:listApps",
				"sagemaker:listArtifacts",
				"sagemaker:listAssociations",
				"sagemaker:listAutoMLJobs",
				"sagemaker:listCandidatesForAutoMLJob",
				"sagemaker:listCodeRepositories",
				"sagemaker:listCompilationJobs",
				"sagemaker:listContexts",
				"sagemaker:listDataQualityJobDefinitions",
				"sagemaker:listDeviceFleets",
				"sagemaker:listDevices",
				"sagemaker:listDomains",
				"sagemaker:listEdgePackagingJobs",
				"sagemaker:listEndpointConfigs",
				"sagemaker:listEndpoints",
				"sagemaker:listExperiments",
				"sagemaker:listFeatureGroups",
				"sagemaker:listFlowDefinitions",
				"sagemaker:listHumanTaskUis",
				"sagemaker:listHyperParameterTuningJobs",
				"sagemaker:listImages",
				"sagemaker:listImageVersions",
				"sagemaker:listLabelingJobs",
				"sagemaker:listLabelingJobsForWorkteam",
				"sagemaker:listModelBiasJobDefinitions",
				"sagemaker:listModelExplainabilityJobDefinitions",
				"sagemaker:listModelPackageGroups",
				"sagemaker:listModelPackages",
				"sagemaker:listModelQualityJobDefinitions",
				"sagemaker:listModels",
				"sagemaker:listMonitoringExecutions",
				"sagemaker:listMonitoringSchedules",
				"sagemaker:listNotebookInstanceLifecycleConfigs",
				"sagemaker:listNotebookInstances",
				"sagemaker:listPipelineExecutions",
				"sagemaker:listPipelineExecutionSteps",
				"sagemaker:listPipelineParametersForExecution",
				"sagemaker:listPipelines",
				"sagemaker:listProcessingJobs",
				"sagemaker:listProjects",
				"sagemaker:listSubscribedWorkteams",
				"sagemaker:listTags",
				"sagemaker:listTrainingJobs",
				"sagemaker:listTrainingJobsForHyperParameterTuningJob",
				"sagemaker:listTransformJobs",
				"sagemaker:listTrialComponents",
				"sagemaker:listTrials",
				"sagemaker:listUserProfiles",
				"sagemaker:listWorkteams",
				"savingsplans:describeSavingsPlans",
				"sdb:domainMetadata",
				"sdb:listDomains",
				"secretsmanager:describeSecret",
				"secretsmanager:getResourcePolicy",
				"secretsmanager:listSecrets",
				"secretsmanager:listSecretVersionIds",
				"securityhub:getEnabledStandards",
				"securityhub:getFindings",
				"securityhub:getInsightResults",
				"securityhub:getInsights",
				"securityhub:getMasterAccount",
				"securityhub:getMembers",
				"securityhub:listEnabledProductsForImport",
				"securityhub:listInvitations",
				"securityhub:listMembers",
				"serverlessrepo:getApplication",
				"serverlessrepo:getApplicationPolicy",
				"serverlessrepo:getCloudFormationTemplate",
				"serverlessrepo:listApplicationDependencies",
				"serverlessrepo:listApplications",
				"serverlessrepo:listApplicationVersions",
				"servicecatalog:describeConstraint",
				"servicecatalog:describePortfolio",
				"servicecatalog:describeProduct",
				"servicecatalog:describeProductAsAdmin",
				"servicecatalog:describeProductView",
				"servicecatalog:describeProvisioningArtifact",
				"servicecatalog:describeProvisioningParameters",
				"servicecatalog:describeRecord",
				"servicecatalog:listAcceptedPortfolioShares",
				"servicecatalog:listConstraintsForPortfolio",
				"servicecatalog:listLaunchPaths",
				"servicecatalog:listPortfolioAccess",
				"servicecatalog:listPortfolios",
				"servicecatalog:listPortfoliosForProduct",
				"servicecatalog:listPrincipalsForPortfolio",
				"servicecatalog:listProvisioningArtifacts",
				"servicecatalog:listRecordHistory",
				"servicecatalog:scanProvisionedProducts",
				"servicecatalog:searchProducts",
				"servicequotas:getAssociationForServiceQuotaTemplate",
				"servicequotas:getAWSDefaultServiceQuota",
				"servicequotas:getRequestedServiceQuotaChange",
				"servicequotas:getServiceQuota",
				"servicequotas:getServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:listAWSDefaultServiceQuotas",
				"servicequotas:listRequestedServiceQuotaChangeHistory",
				"servicequotas:listRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:listServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:listServiceQuotas",
				"servicequotas:listServices",
				"ses:describeActiveReceiptRuleSet",
				"ses:describeReceiptRule",
				"ses:describeReceiptRuleSet",
				"ses:getAccount",
				"ses:getBlacklistReports",
				"ses:getConfigurationSet",
				"ses:getConfigurationSetEventDestinations",
				"ses:getDedicatedIp",
				"ses:getDedicatedIps",
				"ses:getDeliverabilityDashboardOptions",
				"ses:getDeliverabilityTestReport",
				"ses:getDomainDeliverabilityCampaign",
				"ses:getDomainStatisticsReport",
				"ses:getEmailIdentity",
				"ses:getIdentityDkimAttributes",
				"ses:getIdentityMailFromDomainAttributes",
				"ses:getIdentityNotificationAttributes",
				"ses:getIdentityPolicies",
				"ses:getIdentityVerificationAttributes",
				"ses:getSendQuota",
				"ses:getSendStatistics",
				"ses:listConfigurationSets",
				"ses:listDedicatedIpPools",
				"ses:listDeliverabilityTestReports",
				"ses:listDomainDeliverabilityCampaigns",
				"ses:listEmailIdentities",
				"ses:listIdentities",
				"ses:listIdentityPolicies",
				"ses:listReceiptFilters",
				"ses:listReceiptRuleSets",
				"ses:listTagsForResource",
				"ses:listVerifiedEmailAddresses",
				"shield:describeAttack",
				"shield:describeProtection",
				"shield:describeSubscription",
				"shield:listAttacks",
				"shield:listProtections",
				"sms-voice:getConfigurationSetEventDestinations",
				"sms:getConnectors",
				"sms:getReplicationJobs",
				"sms:getReplicationRuns",
				"sms:getServers",
				"snowball:describeAddress",
				"snowball:describeAddresses",
				"snowball:describeJob",
				"snowball:getSnowballUsage",
				"snowball:listJobs",
				"sns:checkIfPhoneNumberIsOptedOut",
				"sns:getEndpointAttributes",
				"sns:getPlatformApplicationAttributes",
				"sns:getSMSAttributes",
				"sns:getSubscriptionAttributes",
				"sns:getTopicAttributes",
				"sns:listEndpointsByPlatformApplication",
				"sns:listPhoneNumbersOptedOut",
				"sns:listPlatformApplications",
				"sns:listSubscriptions",
				"sns:listSubscriptionsByTopic",
				"sns:listTopics",
				"sqs:getQueueAttributes",
				"sqs:getQueueUrl",
				"sqs:listDeadLetterSourceQueues",
				"sqs:listQueues",
				"ssm-contacts:describeEngagement",
				"ssm-contacts:describePage",
				"ssm-contacts:getContact",
				"ssm-contacts:getContactChannel",
				"ssm-contacts:listContactChannels",
				"ssm-contacts:listContacts",
				"ssm-contacts:listEngagements",
				"ssm-contacts:listPageReceipts",
				"ssm-contacts:listPagesByContact",
				"ssm-contacts:listPagesByEngagement",
				"ssm-incidents:getIncidentRecord",
				"ssm-incidents:getReplicationSet",
				"ssm-incidents:getResponsePlan",
				"ssm-incidents:listIncidentRecords",
				"ssm-incidents:listReplicationSets",
				"ssm-incidents:listResponsePlans",
				"ssm-incidents:listTimelineEvents",
				"ssm:describeActivations",
				"ssm:describeAssociation",
				"ssm:describeAssociationExecutions",
				"ssm:describeAssociationExecutionTargets",
				"ssm:describeAutomationExecutions",
				"ssm:describeAutomationStepExecutions",
				"ssm:describeAvailablePatches",
				"ssm:describeDocument",
				"ssm:describeDocumentPermission",
				"ssm:describeEffectiveInstanceAssociations",
				"ssm:describeEffectivePatchesForPatchBaseline",
				"ssm:describeInstanceAssociationsStatus",
				"ssm:describeInstanceInformation",
				"ssm:describeInstancePatches",
				"ssm:describeInstancePatchStates",
				"ssm:describeInstancePatchStatesForPatchGroup",
				"ssm:describeInventoryDeletions",
				"ssm:describeMaintenanceWindowExecutions",
				"ssm:describeMaintenanceWindowExecutionTaskInvocations",
				"ssm:describeMaintenanceWindowExecutionTasks",
				"ssm:describeMaintenanceWindows",
				"ssm:describeMaintenanceWindowSchedule",
				"ssm:describeMaintenanceWindowsForTarget",
				"ssm:describeMaintenanceWindowTargets",
				"ssm:describeMaintenanceWindowTasks",
				"ssm:describeOpsItems",
				"ssm:describeParameters",
				"ssm:describePatchBaselines",
				"ssm:describePatchGroups",
				"ssm:describePatchGroupState",
				"ssm:describePatchProperties",
				"ssm:describeSessions",
				"ssm:getAutomationExecution",
				"ssm:getCommandInvocation",
				"ssm:getConnectionStatus",
				"ssm:getDefaultPatchBaseline",
				"ssm:getDeployablePatchSnapshotForInstance",
				"ssm:getInventorySchema",
				"ssm:getMaintenanceWindow",
				"ssm:getMaintenanceWindowExecution",
				"ssm:getMaintenanceWindowExecutionTask",
				"ssm:getMaintenanceWindowExecutionTaskInvocation",
				"ssm:getMaintenanceWindowTask",
				"ssm:getOpsItem",
				"ssm:getPatchBaseline",
				"ssm:getPatchBaselineForPatchGroup",
				"ssm:getServiceSetting",
				"ssm:labelParameterVersion",
				"ssm:listAssociations",
				"ssm:listAssociationVersions",
				"ssm:listCommandInvocations",
				"ssm:listCommands",
				"ssm:listComplianceItems",
				"ssm:listComplianceSummaries",
				"ssm:listDocuments",
				"ssm:listDocumentVersions",
				"ssm:listOpsItemEvents",
				"ssm:listResourceComplianceSummaries",
				"ssm:listResourceDataSync",
				"ssm:listTagsForResource",
				"states:describeActivity",
				"states:describeExecution",
				"states:describeStateMachine",
				"states:describeStateMachineForExecution",
				"states:getExecutionHistory",
				"states:listActivities",
				"states:listExecutions",
				"states:listStateMachines",
				"storagegateway:describeBandwidthRateLimit",
				"storagegateway:describeCache",
				"storagegateway:describeCachediSCSIVolumes",
				"storagegateway:describeFileSystemAssociations",
				"storagegateway:describeGatewayInformation",
				"storagegateway:describeMaintenanceStartTime",
				"storagegateway:describeNFSFileShares",
				"storagegateway:describeSMBFileShares",
				"storagegateway:describeSMBSettings",
				"storagegateway:describeSnapshotSchedule",
				"storagegateway:describeStorediSCSIVolumes",
				"storagegateway:describeTapeArchives",
				"storagegateway:describeTapeRecoveryPoints",
				"storagegateway:describeTapes",
				"storagegateway:describeUploadBuffer",
				"storagegateway:describeVTLDevices",
				"storagegateway:describeWorkingStorage",
				"storagegateway:listAutomaticTapeCreationPolicies",
				"storagegateway:listFileShares",
				"storagegateway:listFileSystemAssociations",
				"storagegateway:listGateways",
				"storagegateway:listLocalDisks",
				"storagegateway:listTagsForResource",
				"storagegateway:listTapes",
				"storagegateway:listVolumeInitiators",
				"storagegateway:listVolumeRecoveryPoints",
				"storagegateway:listVolumes",
				"swf:countClosedWorkflowExecutions",
				"swf:countOpenWorkflowExecutions",
				"swf:countPendingActivityTasks",
				"swf:countPendingDecisionTasks",
				"swf:describeActivityType",
				"swf:describeDomain",
				"swf:describeWorkflowExecution",
				"swf:describeWorkflowType",
				"swf:getWorkflowExecutionHistory",
				"swf:listActivityTypes",
				"swf:listClosedWorkflowExecutions",
				"swf:listDomains",
				"swf:listOpenWorkflowExecutions",
				"swf:listWorkflowTypes",
				"synthetics:describeCanaries",
				"synthetics:describeCanariesLastRun",
				"synthetics:describeRuntimeVersions",
				"synthetics:getCanary",
				"synthetics:getCanaryRuns",
				"transfer:describeExecution",
				"transfer:describeServer",
				"transfer:describeUser",
				"transfer:describeWorkflow",
				"transfer:listExecutions",
				"transfer:listServers",
				"transfer:listTagsForResource",
				"transfer:listUsers",
				"transfer:listWorkflows",
				"transfer:sendWorkflowStepState",
				"waf-regional:getByteMatchSet",
				"waf-regional:getChangeTokenStatus",
				"waf-regional:getIPSet",
				"waf-regional:getRule",
				"waf-regional:getSqlInjectionMatchSet",
				"waf-regional:getWebACL",
				"waf-regional:getWebACLForResource",
				"waf-regional:listByteMatchSets",
				"waf-regional:listIPSets",
				"waf-regional:listResourcesForWebACL",
				"waf-regional:listRules",
				"waf-regional:listSqlInjectionMatchSets",
				"waf-regional:listWebACLs",
				"waf:getByteMatchSet",
				"waf:getChangeTokenStatus",
				"waf:getIPSet",
				"waf:getRule",
				"waf:getSampledRequests",
				"waf:getSizeConstraintSet",
				"waf:getSqlInjectionMatchSet",
				"waf:getWebACL",
				"waf:getXssMatchSet",
				"waf:listByteMatchSets",
				"waf:listIPSets",
				"waf:listRules",
				"waf:listSizeConstraintSets",
				"waf:listSqlInjectionMatchSets",
				"waf:listWebACLs",
				"waf:listXssMatchSets",
				"wafv2:checkCapacity",
				"wafv2:describeManagedRuleGroup",
				"wafv2:getIPSet",
				"wafv2:getLoggingConfiguration",
				"wafv2:getPermissionPolicy",
				"wafv2:getRateBasedStatementManagedKeys",
				"wafv2:getRegexPatternSet",
				"wafv2:getRuleGroup",
				"wafv2:getSampledRequests",
				"wafv2:getWebACL",
				"wafv2:getWebACLForResource",
				"wafv2:listAvailableManagedRuleGroups",
				"wafv2:listIPSets",
				"wafv2:listLoggingConfigurations",
				"wafv2:listRegexPatternSets",
				"wafv2:listResourcesForWebACL",
				"wafv2:listRuleGroups",
				"wafv2:listTagsForResource",
				"wafv2:listWebACLs",
				"workdocs:checkAlias",
				"workdocs:describeAvailableDirectories",
				"workdocs:describeInstances",
				"worklink:describeAuditStreamConfiguration",
				"worklink:describeCompanyNetworkConfiguration",
				"worklink:describeDevice",
				"worklink:describeDevicePolicyConfiguration",
				"worklink:describeDomain",
				"worklink:describeFleetMetadata",
				"worklink:describeIdentityProviderConfiguration",
				"worklink:describeWebsiteCertificateAuthority",
				"worklink:listDevices",
				"worklink:listDomains",
				"worklink:listFleets",
				"worklink:listWebsiteAuthorizationProviders",
				"worklink:listWebsiteCertificateAuthorities",
				"workmail:describeGroup",
				"workmail:describeOrganization",
				"workmail:describeResource",
				"workmail:describeUser",
				"workmail:listAliases",
				"workmail:listGroupMembers",
				"workmail:listGroups",
				"workmail:listMailboxPermissions",
				"workmail:listOrganizations",
				"workmail:listResourceDelegates",
				"workmail:listResources",
				"workmail:listUsers",
				"workspaces-web:getBrowserSettings",
				"workspaces-web:getIdentityProvider",
				"workspaces-web:getNetworkSettings",
				"workspaces-web:getPortal",
				"workspaces-web:getPortalServiceProviderMetadata",
				"workspaces-web:getTrustStoreCertificate",
				"workspaces-web:getUserSettings",
				"workspaces-web:listBrowserSettings",
				"workspaces-web:listIdentityProviders",
				"workspaces-web:listNetworkSettings",
				"workspaces-web:listPortals",
				"workspaces-web:listTagsForResource",
				"workspaces-web:listTrustStoreCertificates",
				"workspaces-web:listTrustStores",
				"workspaces-web:listUserSettings",
				"workspaces:describeAccount",
				"workspaces:describeAccountModifications",
				"workspaces:describeIpGroups",
				"workspaces:describeTags",
				"workspaces:describeWorkspaceBundles",
				"workspaces:describeWorkspaceDirectories",
				"workspaces:describeWorkspaceImages",
				"workspaces:describeWorkspaces",
				"workspaces:describeWorkspacesConnectionStatus"
			],
			"Effect": "Allow",
			"Resource": [
				"*"
			]
		}
	],
	"Version": "2012-10-17"
},
        PolicyName: AWSSupportServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForSupport
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "autoscaling:DescribeAccountLimits",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeLaunchConfigurations",
                "cloudformation:DescribeAccountLimits",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStacks",
                "cloudfront:ListDistributions",
                "cloudtrail:DescribeTrails",
                "cloudtrail:GetTrailStatus",
                "dynamodb:DescribeLimits",
                "dynamodb:DescribeTable",
                "dynamodb:ListTables",
                "ec2:DescribeAddresses",
                "ec2:DescribeReservedInstances",
                "ec2:DescribeInstances",
                "ec2:DescribeVpcs",
                "ec2:DescribeInternetGateways",
                "ec2:DescribeImages",
                "ec2:DescribeVolumes",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeReservedInstancesOfferings",
                "ec2:DescribeSnapshots",
                "ec2:DescribeVpnConnections",
                "ec2:DescribeVpnGateways",
                "ec2:DescribeLaunchTemplateVersions",
                "elasticloadbalancing:DescribeAccountLimits",
                "elasticloadbalancing:DescribeInstanceHealth",
                "elasticloadbalancing:DescribeLoadBalancerAttributes",
                "elasticloadbalancing:DescribeLoadBalancerPolicies",
                "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeTargetGroups",
                "iam:GenerateCredentialReport",
                "iam:GetAccountPasswordPolicy",
                "iam:GetAccountSummary",
                "iam:GetCredentialReport",
                "iam:GetServerCertificate",
                "iam:ListServerCertificates",
                "kinesis:DescribeLimits",
                "rds:DescribeAccountAttributes",
                "rds:DescribeDBClusters",
                "rds:DescribeDBEngineVersions",
                "rds:DescribeDBInstances",
                "rds:DescribeDBParameterGroups",
                "rds:DescribeDBParameters",
                "rds:DescribeDBSecurityGroups",
                "rds:DescribeDBSnapshots",
                "rds:DescribeDBSubnetGroups",
                "rds:DescribeEngineDefaultParameters",
                "rds:DescribeEvents",
                "rds:DescribeOptionGroupOptions",
                "rds:DescribeOptionGroups",
                "rds:DescribeOrderableDBInstanceOptions",
                "rds:DescribeReservedDBInstances",
                "rds:DescribeReservedDBInstancesOfferings",
                "rds:ListTagsForResource",
                "redshift:DescribeClusters",
                "redshift:DescribeReservedNodeOfferings",
                "redshift:DescribeReservedNodes",
                "route53:GetAccountLimit",
                "route53:GetHealthCheck",
                "route53:GetHostedZone",
                "route53:ListHealthChecks",
                "route53:ListHostedZones",
                "route53:ListHostedZonesByName",
                "route53:ListResourceRecordSets",
                "s3:GetAccountPublicAccessBlock",
                "s3:GetBucketAcl",
                "s3:GetBucketPolicy",
                "s3:GetBucketPolicyStatus",
                "s3:GetBucketLocation",
                "s3:GetBucketLogging",
                "s3:GetBucketVersioning",
                "s3:GetBucketPublicAccessBlock",
                "s3:ListBucket",
                "s3:ListAllMyBuckets",
                "ses:GetSendQuota",
                "sqs:ListQueues",
                "cloudwatch:GetMetricStatistics",
                "ce:GetReservationPurchaseRecommendation",
                "ce:GetSavingsPlansPurchaseRecommendation"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AWSTrustedAdvisorServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForTrustedAdvisor
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ec2:CreateNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:ModifyNetworkInterfaceAttribute",
                "ec2:DeleteNetworkInterface",
                "ec2:CreateNetworkInterfacePermission",
                "ec2:AssignIpv6Addresses",
                "ec2:UnAssignIpv6Addresses"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "0"
        }
    ]
},
        PolicyName: AWSVPCTransitGatewayServiceRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: AWSServiceRoleForVPCTransitGateway
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": "*"
        }
    ]
}
,
        PolicyName: bulkUploadAPILambdaPolicy
      }
    ],
    InlineDocuments: [],
    Role: bulkUploadAPILambdaRole
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "bulkPerms",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:ListBucket",
                "s3:GetObjectVersion"
            ],
            "Resource": [
                "arn:aws-us-gov:s3:::bulkupload-lambda-bucket",
                "arn:aws-us-gov:s3:::bulkupload-lambda-bucket/*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "logs:CreateLogGroup",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "ec2:CreateNetworkInterface",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "ec2:DescribeNetworkInterfaces",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "ec2:DeleteNetworkInterface",
            "Resource": "*"
        }
    ]
},
        PolicyName: bulkUploadLambdaPolicy
      }
    ],
    InlineDocuments: [],
    Role: bulkUploadLambdaRole
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-partner-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/partner-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/4a41e050-9b9b-4a8b-b4b0-541d12c46508"
    }
 ]
}
,
        PolicyName: claims-partner-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-partner-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-partner-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-partner-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/a3ad457c-fdea-403c-93e2-0a2140a0ee18"
    }
  ]
},
        PolicyName: claims-partner-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/bbc45b4e-1178-4363-85ba-f7a4da6c5d51",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/b4f886f5-c04d-44eb-8ba6-6bfc018816be",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/a5b6638e-5014-4be5-a080-ca7a4a4bac08",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/41a9ecf7-02cc-4c04-b06b-910c36a88011",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/0e721ccd-3880-49ca-a04e-f0ebcb59374f",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/0940f3c8-4dba-4eae-af2a-2379715354c4",
        "arn:aws-us-gov:kms:us-gov-west-1:338816603881:key/87c22718-05e3-4140-9936-1a8d58bf826f",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-partner-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-partner-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-partner-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-partner-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-partner-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338816603881:ent-services-partner-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-partner-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-claims-validation-complete",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-partner-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701646086524:role/partner-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701646086524:userpool/us-gov-west-1_ftpXNkFfx"
    }
  ]
},
        PolicyName: claims-partner-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:AssumeRole"
            ],
            "Resource": "arn:aws-us-gov:iam::701646086524:role/partner-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-partner-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::806712165051-claims-partner-document-storage/*",
            "arn:aws-us-gov:s3:::806712165051-claims-partner-document-storage",
            "arn:aws-us-gov:s3:::806712165051-claims-partner-certificates-bucket",
            "arn:aws-us-gov:s3:::806712165051-claims-partner-certificates-bucket/*"
            ]
        }
    ]
}
,
        PolicyName: claims-partner-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-partner-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::806712165051-claims-partner-rule-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-partner-rule-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-partner-result-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-partner-result-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-partner-document-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-partner-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/b4f886f5-c04d-44eb-8ba6-6bfc018816be",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/0e721ccd-3880-49ca-a04e-f0ebcb59374f"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-partner-claims-validation-complete-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:Send*",
        "sqs:ReceiveMessage",
        "sqs:List*",
        "sqs:Get*"
      ],
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-partner-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-partner-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-partner-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-partner-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-partner-vpc-flow-role-policy
      }
    ],
    Role: claims-partner-vpc-flow-log
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-prod-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/prod-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/6e78a938-35d7-4118-b955-89cdcd38ae53"
    }
 ]
}
,
        PolicyName: claims-prod-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-prod-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-prod-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-prod-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/ef4cbded-99b3-4e04-a00f-cc94980baca2"
    }
  ]
},
        PolicyName: claims-prod-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/f2fc7145-c9f5-41c3-bb9e-c4e9cf4a7c8e",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/e4f5ff61-0262-403a-b046-3b084099dbd7",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/dfeec1b0-b53a-46e7-8651-8014443434ef",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/536f1caa-9b5c-4a51-9115-6d305f22f487",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/2e23a949-4b5d-4321-b570-de119de8f651",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/2d8dbdc4-9f3a-44e2-be16-efe2169d110a",
        "arn:aws-us-gov:kms:us-gov-west-1:338816603881:key/7f3ff922-0b8e-4f35-844c-203bb4e0bbcc",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-prod-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-prod-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-prod-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-prod-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-prod-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338816603881:ent-services-prod-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-prod-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-claims-validation-complete",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-prod-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701646086524:role/prod-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701646086524:userpool/us-gov-west-1_KWOyy2O5J"
    }
  ]
},
        PolicyName: claims-prod-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:AssumeRole"
            ],
            "Resource": "arn:aws-us-gov:iam::701646086524:role/prod-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-prod-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::806712165051-claims-prod-document-storage/*",
            "arn:aws-us-gov:s3:::806712165051-claims-prod-document-storage",
            "arn:aws-us-gov:s3:::806712165051-claims-prod-certificates-bucket",
            "arn:aws-us-gov:s3:::806712165051-claims-prod-certificates-bucket/*"
            ]
        }
    ]
}
,
        PolicyName: claims-prod-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-prod-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::806712165051-claims-prod-rule-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-prod-rule-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-prod-result-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-prod-result-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-prod-document-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-prod-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/dfeec1b0-b53a-46e7-8651-8014443434ef",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/2e23a949-4b5d-4321-b570-de119de8f651"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-prod-claims-validation-complete-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:Send*",
        "sqs:ReceiveMessage",
        "sqs:List*",
        "sqs:Get*"
      ],
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-prod-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-prod-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-prod-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-prod-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-prod-vpc-flow-role-policy
      }
    ],
    Role: claims-prod-vpc-flow-log
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
       "cloudwatch:PutMetricData",
       "ec2:DescribeNetworkInterfaces",
       "ec2:DescribeNetworkInterfaceAttribute",
       "elasticloadbalancing:RegisterTargets",
       "elasticloadbalancing:Describe*",
       "elasticloadbalancing:DeregisterTargets",
       "sns:Publish",
       "logs:CreateLogStream",
       "logs:PutLogEvents",
       "logs:CreateLogGroup"
       ],
     "Resource": "*"
   },
   {
     "Effect": "Allow",
     "Action": [
       "s3:PutObject",
       "s3:CreateBucket",
       "s3:Get*"
       ],
     "Resource": "arn:aws-us-gov:s3:::claims-stage-alb-ip-monitoring/*"
   },
   {
     "Effect": "Allow",
     "Action": "sts:AssumeRole",
     "Resource": "arn:aws-us-gov:iam::701341283067:role/staging-tg-update-claims-role"
   },
   {
    "Effect": "Allow",
    "Action": [
            "kms:Decrypt",
            "kms:GenerateDataKey*",
            "kms:DescribeKey"
        ],
    "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/2a30523a-5a94-4f9b-b05e-872fc8bb25bf"
    }
 ]
}
,
        PolicyName: claims-stage-alb-ip-monitoring-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-alb-ip-monitoring-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObjectAcl",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-stage-bastion-ec2/logs/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-stage-bastion-ec2/public-keys/*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "s3:ListBucket",
      "Resource": "arn:aws-us-gov:s3:::806712165051-infrastructure-claims-stage-bastion-ec2",
      "Condition": {
        "ForAnyValue:StringEquals": {
          "s3:prefix": "public-keys/"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt"
      ],
      "Resource": "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/fc87e250-e90a-43b3-b41f-cc124bb7b35a"
    }
  ]
},
        PolicyName: claims-stage-bastion-s3-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "ec2:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "elasticloadbalancing:Describe*",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:ListMetrics",
        "cloudwatch:GetMetricStatistics",
        "cloudwatch:Describe*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "autoscaling:Describe*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonEC2ReadOnlyAccess
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-bastion-server-ec2-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "ec2:CreateNetworkInterface",
        "ec2:DescribeNetworkInterfaces",
        "ec2:DeleteNetworkInterface",
        "ec2:AssignPrivateIpAddresses",
        "ec2:UnassignPrivateIpAddresses"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaVPCAccessExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaSQSExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:*"
      ],
      "Resource": "arn:aws-us-gov:logs:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": "arn:aws-us-gov:s3:::*"
    }
  ]
},
        PolicyName: AWSLambdaExecute
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "cloudwatch:PutMetricData",
                "ec2:DescribeVolumes",
                "ec2:DescribeTags",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams",
                "logs:DescribeLogGroups",
                "logs:CreateLogStream",
                "logs:CreateLogGroup"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws-us-gov:ssm:*:*:parameter/AmazonCloudWatch-*"
        }
    ]
},
        PolicyName: CloudWatchAgentServerPolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-claims-sftp-gateway-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-claims-submission-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/e1b51f3e-0916-4de0-a346-226ef554611f",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/cae223ce-1b8b-49d5-ab44-846217184326",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/b290bf80-18e2-496f-8d64-2dc20c1eb9ff",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/acc19a3d-2c85-4d79-a75d-1a6ab672a3c5",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/41b4f3ff-1682-41dd-b108-4e8407a4f80f",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/13fad3a3-bbf0-4c1a-9dcd-63b33067b58c",
        "arn:aws-us-gov:kms:us-gov-west-1:338816603881:key/c02d304c-7572-4ca1-90a3-370b3778b295",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-stage-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": [
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-stage-single-claim-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-stage-ready-for-response-file-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-stage-claims-validation-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-stage-claims-validation-complete-topic",
        "arn:aws-us-gov:sns:us-gov-west-1:338816603881:ent-services-stage-virus-scan-pending-topic",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-stage-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sqs:*",
      "Resource": [
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-virus-scan-result-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-ready-to-process-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-ready-for-response-file-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-finished-processing-single-claim-queue",
        "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-claims-validation-complete",
        "arn:aws-us-gov:iam::338816603881:role/ent-services-stage-virus-scan-ecs-task-execution"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "ssm:GetParameters",
        "secretsmanager:GetSecretValue"
      ],
      "Resource": "*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Resource": "arn:aws-us-gov:iam::701646086524:role/stage-green-catalyst-cognito-service-role"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "cognito-idp:ListUserPoolClients",
      "Resource": "arn:aws-us-gov:cognito-idp:us-gov-west-1:701646086524:userpool/us-gov-west-1_gGsuA2wrt"
    }
  ]
},
        PolicyName: claims-stage-claims-submission-task-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "sts:AssumeRole"
            ],
            "Resource": "arn:aws-us-gov:iam::701646086524:role/stage-green-catalyst-cognito-service-role"
        }
    ]
}
,
        PolicyName: claims-stage-claims-submission-service-cognito-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:PutObject"
            ],
          "Resource": [
            "arn:aws-us-gov:s3:::806712165051-claims-stage-document-storage/*",
            "arn:aws-us-gov:s3:::806712165051-claims-stage-document-storage",
            "arn:aws-us-gov:s3:::806712165051-claims-stage-certificates-bucket",
            "arn:aws-us-gov:s3:::806712165051-claims-stage-certificates-bucket/*"
            ]
        }
    ]
}
,
        PolicyName: claims-stage-claims-submission-service-s3-execution-policy
      }
    ],
    Role: claims-stage-claims-submission-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-claims-validation-ecs-instance-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:ListBucket",
        "s3:GetObject"
      ],
      "Resource": [
        "arn:aws-us-gov:s3:::806712165051-claims-stage-rule-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-stage-rule-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-stage-result-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-stage-result-storage",
        "arn:aws-us-gov:s3:::806712165051-claims-stage-document-storage/*",
        "arn:aws-us-gov:s3:::806712165051-claims-stage-document-storage"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "kms:Decrypt"
      ],
      "Resource": [
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/b290bf80-18e2-496f-8d64-2dc20c1eb9ff",
        "arn:aws-us-gov:kms:us-gov-west-1:806712165051:key/13fad3a3-bbf0-4c1a-9dcd-63b33067b58c"
      ]
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sns:Subscribe",
        "sns:Publish",
        "sns:List*",
        "sns:Get*"
      ],
      "Resource": "arn:aws-us-gov:sns:us-gov-west-1:806712165051:claims-stage-claims-validation-complete-topic"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sqs:Send*",
        "sqs:ReceiveMessage",
        "sqs:List*",
        "sqs:Get*"
      ],
      "Resource": "arn:aws-us-gov:sqs:us-gov-west-1:806712165051:claims-stage-claims-validation-queue"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "ssm:GetParameters",
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "aws:ResourceTag/Project": "claims"
        }
      }
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "secretsmanager:GetSecretValue",
      "Resource": "*"
    }
  ]
},
        PolicyName: claims-stage-claims-validation-task-role-execution-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ecr:GetAuthorizationToken",
        "ecr:BatchCheckLayerAvailability",
        "ecr:GetDownloadUrlForLayer",
        "ecr:BatchGetImage",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonECSTaskExecutionRolePolicy
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-claims-validation-ecs-task-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "ssm:Describe*",
        "ssm:Get*",
        "ssm:List*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-hsts-lambda-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
 "Version": "2012-10-17",
 "Statement": [
   {
     "Effect": "Allow",
     "Action": [
        "ec2:DescribeNetworkInterfaces",
        "ec2:CreateNetworkInterface",
        "ec2:DeleteNetworkInterface",
        "ec2:DescribeInstances",
        "ec2:AttachNetworkInterface",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "rds:DescribeDBInstances",
        "kms:Decrypt",
        "kms:GenerateDataKey*",
        "kms:DescribeKey",
        "ssm:PutParameter",
        "ssm:GetParameter"
     ],
     "Resource": "*"
   }
 ]
}
,
        PolicyName: claims-stage-rds-setup-submission-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: claims-stage-rds-setup-submission-service-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [],
    InlineDocuments: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams"
      ],
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
,
        PolicyName: claims-stage-vpc-flow-role-policy
      }
    ],
    Role: claims-stage-vpc-flow-log
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:DescribeAssociation",
                "ssm:GetDeployablePatchSnapshotForInstance",
                "ssm:GetDocument",
                "ssm:DescribeDocument",
                "ssm:GetManifest",
                "ssm:GetParameter",
                "ssm:GetParameters",
                "ssm:ListAssociations",
                "ssm:ListInstanceAssociations",
                "ssm:PutInventory",
                "ssm:PutComplianceItems",
                "ssm:PutConfigurePackageResult",
                "ssm:UpdateAssociationStatus",
                "ssm:UpdateInstanceAssociationStatus",
                "ssm:UpdateInstanceInformation"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssmmessages:CreateControlChannel",
                "ssmmessages:CreateDataChannel",
                "ssmmessages:OpenControlChannel",
                "ssmmessages:OpenDataChannel"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2messages:AcknowledgeMessage",
                "ec2messages:DeleteMessage",
                "ec2messages:FailMessage",
                "ec2messages:GetEndpoint",
                "ec2messages:GetMessages",
                "ec2messages:SendReply"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: AmazonSSMManagedInstanceCore
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "cloudwatch:PutMetricData",
        "ds:CreateComputer",
        "ds:DescribeDirectories",
        "ec2:DescribeInstanceStatus",
        "logs:*",
        "ssm:*",
        "ec2messages:*"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "iam:CreateServiceLinkedRole",
      "Resource": "arn:aws-us-gov:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*",
      "Condition": {
        "StringLike": {
          "iam:AWSServiceName": "ssm.amazonaws.com"
        }
      }
    },
    {
      "Effect": "Allow",
      "Action": [
        "iam:DeleteServiceLinkedRole",
        "iam:GetServiceLinkedRoleDeletionStatus"
      ],
      "Resource": "arn:aws-us-gov:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
    },
    {
      "Effect": "Allow",
      "Action": [
         "ssmmessages:CreateControlChannel",
         "ssmmessages:CreateDataChannel",
         "ssmmessages:OpenControlChannel",
         "ssmmessages:OpenDataChannel"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AmazonSSMFullAccess
      }
    ],
    InlineDocuments: [],
    Role: EC2-SSM-Role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["ecs:UpdateService","ecs:UpdateCluster","ecs:UpdateCapacityProvider","ecs:TagResource","ecs:StopTask","ecs:StartTask","ecs:ListTasks","ecs:ListTaskDefinitions","ecs:ListTagsForResource","ecs:ListServices","ecs:ListClusters","ecs:DescribeTasks","ecs:DescribeTaskDefinition","ecs:DescribeServices","ecs:DescribeClusters","application-autoscaling:RegisterScalableTarget","application-autoscaling:DescribeScalableTargets","application-autoscaling:DeregisterScalableTarget"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-Claims-ecs-scheduler-lambda-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-Claims-ecs_scheduler_lambda_role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "logs:CreateLogStream",
      "Resource": "arn:aws-us-gov:logs:us-gov-west-1:806712165051:log-group:/aws/gss-green/cloudtrail-log-group:log-stream:806712165051_CloudTrail_us-gov-west-1*"
    },
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": "logs:PutLogEvents",
      "Resource": "arn:aws-us-gov:logs:us-gov-west-1:806712165051:log-group:/aws/gss-green/cloudtrail-log-group:log-stream:806712165051_CloudTrail_us-gov-west-1*"
    }
  ]
},
        PolicyName: gss-green-cloudwatch-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-CloudTrail_CloudWatchLogs_Role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["ec2:StopInstances","ec2:StartInstances","ec2:RunInstances","ec2:DescribeInstances"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-scheduler-lambda-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-ec2_scheduler_lambda_role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["sts:AssumeRole","sns:Subscribe","iam:GetRole","iam:GetPolicy","iam:GetRolePolicy","iam:GetPolicyVersion","iam:GetInstanceProfile","iam:ListAccountAliases","iam:ListAttachedRolePolicies","iam:ListEntitiesForPolicy","iam:GetSAMLProvider","iam:CreatePolicy","iam:CreateRole","iam:CreateRolePolicy","iam:CreatePolicyVersion","iam:PutRolePolicy","iam:TagRole","iam:ListPolicies","iam:ListPolicyVersions","iam:ListInstanceProfilesForRole","iam:ListRolePolicies","iam:DeleteRole","iam:DeleteRolePolicy","iam:DeletePolicy","iam:DeletePolicyVersion","iam:DeleteInstanceProfile","iam:DetachRolePolicy","iam:RemoveRoleFromInstanceProfile","iam:AttachRolePolicy","iam:PassRole","iam:UpdateSAMLProvider","iam:CreateInstanceProfile","iam:AddRoleToInstanceProfile","iam:DeleteInstanceProfile","iam:UpdateAssumeRolePolicy","iam:UntagRole","iam:UpdateAccountPasswordPolicy","iam:GetAccountPasswordPolicy","iam:DeleteAccountPasswordPolicy"],"Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"},
        PolicyName: gss-green-gitlab-runner-assume-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": [
                "iam:*",
                "organizations:*",
                "account:*"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole",
                "iam:DeleteServiceLinkedRole",
                "iam:ListRoles",
                "organizations:DescribeOrganization",
                "account:ListRegions"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: PowerUserAccess
      }
    ],
    InlineDocuments: [],
    Role: gss-green-gitlab-runner-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Id":"SNS_Permissions_Account","Statement":[{"Action":"sts:AssumeRole","Effect":"Allow","Resource":"arn:aws-us-gov:iam::701341283067:role/gss-green-rds-scheduler-assumable-role","Sid":""},{"Action":["sts:AssumeRole","ssm:GetParameters","kms:Decrypt","SSM:GetParameter"],"Effect":"Allow","Resource":"arn:aws-us-gov:ssm:us-gov-west-1:701341283067:parameter/gss-green/infrastructure/gitlab-api-private-token","Sid":""},{"Action":["rds:DescribeDBInstances","kms:ReEncrypt*","kms:GenerateDataKey*","kms:Encrypt","kms:DescribeKey","kms:Decrypt","kms:CreateGrant","SNS:Subscribe","SNS:SetTopicAttributes","SNS:RemovePermission","SNS:Receive","SNS:Publish","SNS:ListSubscriptionsByTopic","SNS:GetTopicAttributes","SNS:DeleteTopic","SNS:AddPermission"],"Effect":"Allow","Resource":"arn:aws-us-gov:sns:us-gov-west-1:806712165051:function:gss-green-rds-cloudwatch-event","Sid":"VisualEditor1"}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-started-service-role-policy
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-rds-cloudwatch-event-execution-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
                "xray:GetSamplingStatisticSummaries"               
            ],
            "Resource": [
                "*"
            ]
        }
    ]
},
        PolicyName: AWSXrayWriteOnlyAccess
      },
      {
        Document: {"Statement":[{"Action":["rds:StopDBInstance","rds:StartDBInstance","rds:DescribeDBInstances","rds:DeleteDBInstance"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-scheduler-rds-instance
      },
      {
        Document: {"Statement":[{"Action":["rds:StopDBInstance","rds:StopDBCluster","rds:StartDBInstance","rds:StartDBCluster","rds:ListTagsForResource","rds:DescribeDBInstances","rds:DescribeDBClusters","rds:DeleteDBInstance","rds:AddTagsToResource"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-rds-scheduler-rds-cluster
      },
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: AWSLambdaBasicExecutionRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-rds-scheduler
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["securityhub:GetInsights","securityhub:GetInsightResults"],"Effect":"Allow","Resource":"*","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-securityhub-aws-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-securityhub-notification
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Action": [
        "sts:AssumeRole",
        "sqs:SendMessage",
        "sqs:ReceiveMessage",
        "sqs:ListQueues",
        "sqs:GetQueueUrl",
        "sqs:GetQueueAttributes",
        "sqs:DeleteMessage",
        "sns:Publish",
        "sns:List*",
        "sns:Get*",
        "s3:ListBucket",
        "s3:ListAllMyBuckets",
        "s3:GetObject",
        "s3:GetLifecycleConfiguration",
        "s3:GetBucketTagging",
        "s3:GetBucketLogging",
        "s3:GetBucketLocation",
        "s3:GetBucketCORS",
        "s3:GetAccelerateConfiguration",
        "rds:DescribeDBInstances",
        "logs:GetLogEvents",
        "logs:DescribeLogStreams",
        "logs:DescribeLogGroups",
        "lambda:ListFunctions",
        "kms:Decrypt",
        "kinesis:PutRecord",
        "kinesis:ListStreams",
        "kinesis:Get*",
        "kinesis:DescribeStream",
        "inspector:List*",
        "inspector:Describe*",
        "iam:PassRole",
        "iam:ListUsers",
        "iam:ListAccessKeys",
        "iam:GetUser",
        "iam:GetAccountPasswordPolicy",
        "iam:GetAccessKeyLastUsed",
        "elasticloadbalancing:DescribeTargetHealth",
        "elasticloadbalancing:DescribeTargetGroups",
        "elasticloadbalancing:DescribeTags",
        "elasticloadbalancing:DescribeLoadBalancers",
        "elasticloadbalancing:DescribeListeners",
        "elasticloadbalancing:DescribeInstanceHealth",
        "ec2:StopInstances",
        "ec2:StartInstances",
        "ec2:ModifyInstanceAttribute",
        "ec2:DescribeVpcs",
        "ec2:DescribeVolumes",
        "ec2:DescribeTags",
        "ec2:DescribeSubnets",
        "ec2:DescribeSnapshots",
        "ec2:DescribeSecurityGroups",
        "ec2:DescribeReservedInstances",
        "ec2:DescribeRegions",
        "ec2:DescribeNetworkAcls",
        "ec2:DescribeKeyPairs",
        "ec2:DescribeInstances",
        "ec2:DescribeImages",
        "ec2:DescribeAddresses",
        "ec2:DeleteSecurityGroup",
        "config:GetComplianceSummaryByConfigRule",
        "config:GetComplianceDetailsByConfigRule",
        "config:DescribeConfigRules",
        "config:DescribeConfigRuleEvaluationStatus",
        "config:DeliverConfigSnapshot",
        "cloudwatch:List*",
        "cloudwatch:Get*",
        "cloudwatch:Describe*",
        "cloudfront:ListDistributions",
        "autoscaling:Describe*"
      ],
      "Resource": "*"
    }
  ]
},
        PolicyName: gss-green-splunk-aws-role-policy
      }
    ],
    InlineDocuments: [],
    Role: gss-green-splunk
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["s3:ListBucket","s3:GetObject"],"Effect":"Allow","Resource":["arn:aws-us-gov:s3:::701341283067-gss-green-ssm-artifacts/*","arn:aws-us-gov:s3:::701341283067-gss-green-ssm-artifacts/"],"Sid":""},{"Action":["tag:GetResources","resource-groups:ListGroupResources","ec2:DescribeInstances"],"Effect":"Allow","Resource":"*","Sid":""},{"Action":"iam:PassRole","Effect":"Allow","Resource":"arn:aws-us-gov:iam::806712165051:role/gss-green-ssm-execution","Sid":""}],"Version":"2012-10-17"},
        PolicyName: gss-green-ssm-aws-role-policy
      },
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "lambda:InvokeFunction"
            ],
            "Resource": [
                "arn:aws-us-gov:lambda:*:*:function:Automation*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ec2:CreateImage",
                "ec2:CopyImage",
                "ec2:DeregisterImage",
                "ec2:DescribeImages",
                "ec2:DeleteSnapshot",
                "ec2:StartInstances",
                "ec2:RunInstances",
                "ec2:StopInstances",
                "ec2:TerminateInstances",
                "ec2:DescribeInstanceStatus",
                "ec2:CreateTags",
                "ec2:DeleteTags",
                "ec2:DescribeTags",
                "cloudformation:CreateStack",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStacks",
                "cloudformation:UpdateStack",
                "cloudformation:DeleteStack"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "ssm:*"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "sns:Publish"
            ],
            "Resource": [
                "arn:aws-us-gov:sns:*:*:Automation*"
            ]
        }
    ]
},
        PolicyName: AmazonSSMAutomationRole
      }
    ],
    InlineDocuments: [],
    Role: gss-green-ssm-execution
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
            ],
            "Effect": "Allow",
            "Resource": "*"
        }
    ]
},
        PolicyName: manual-vpc-flow-log-policy
      }
    ],
    InlineDocuments: [],
    Role: manual-vpc-flow-logs-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "*",
      "Resource": "*"
    }
  ]
},
        PolicyName: AdministratorAccess
      }
    ],
    InlineDocuments: [],
    Role: NetworkOpsAdmin
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":"rds:DescribePendingMaintenanceActions","Effect":"Allow","Resource":"*"}],"Version":"2012-10-17"},
        PolicyName: rds-notification-for-shared-services-to-assume-role-policy
      }
    ],
    InlineDocuments: [],
    Role: rds-notification-for-shared-services-to-assume-role
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["logs:PutRetentionPolicy","logs:PutMetricFilter","logs:PutLogEvents","logs:CreateLogStream","logs:CreateLogGroup"],"Effect":"Allow","Resource":"*","Sid":"AllowCloudWatchEvents"}],"Version":"2012-10-17"},
        PolicyName: CloudWatchLogs
      }
    ],
    InlineDocuments: [],
    Role: SNSFailureFeedback
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document: {"Statement":[{"Action":["logs:PutRetentionPolicy","logs:PutMetricFilter","logs:PutLogEvents","logs:CreateLogStream","logs:CreateLogGroup"],"Effect":"Allow","Resource":"*","Sid":"AllowCloudWatchEvents"}],"Version":"2012-10-17"},
        PolicyName: CloudWatchLogs
      }
    ],
    InlineDocuments: [],
    Role: SNSSuccessFeedback
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"a4b:Get*",
				"a4b:List*",
				"a4b:Search*",
				"access-analyzer:GetAccessPreview",
				"access-analyzer:GetAnalyzedResource",
				"access-analyzer:GetAnalyzer",
				"access-analyzer:GetArchiveRule",
				"access-analyzer:GetFinding",
				"access-analyzer:GetGeneratedPolicy",
				"access-analyzer:ListAccessPreviewFindings",
				"access-analyzer:ListAccessPreviews",
				"access-analyzer:ListAnalyzedResources",
				"access-analyzer:ListAnalyzers",
				"access-analyzer:ListArchiveRules",
				"access-analyzer:ListFindings",
				"access-analyzer:ListPolicyGenerations",
				"access-analyzer:ListTagsForResource",
				"access-analyzer:ValidatePolicy",
				"acm-pca:Describe*",
				"acm-pca:Get*",
				"acm-pca:List*",
				"acm:Describe*",
				"acm:Get*",
				"acm:List*",
				"airflow:ListEnvironments",
				"airflow:ListTagsForResource",
				"amplify:GetApp",
				"amplify:GetBranch",
				"amplify:GetDomainAssociation",
				"amplify:GetJob",
				"amplify:ListApps",
				"amplify:ListBranches",
				"amplify:ListDomainAssociations",
				"amplify:ListJobs",
				"apigateway:GET",
				"appconfig:GetApplication",
				"appconfig:GetConfiguration",
				"appconfig:GetConfigurationProfile",
				"appconfig:GetDeployment",
				"appconfig:GetDeploymentStrategy",
				"appconfig:GetEnvironment",
				"appconfig:GetHostedConfigurationVersion",
				"appconfig:ListApplications",
				"appconfig:ListConfigurationProfiles",
				"appconfig:ListDeployments",
				"appconfig:ListDeploymentStrategies",
				"appconfig:ListEnvironments",
				"appconfig:ListHostedConfigurationVersions",
				"appconfig:ListTagsForResource",
				"appflow:DescribeConnectorEntity",
				"appflow:DescribeConnectorFields",
				"appflow:DescribeConnectorProfiles",
				"appflow:DescribeConnectors",
				"appflow:DescribeFlowExecution",
				"appflow:DescribeFlows",
				"appflow:ListConnectorEntities",
				"appflow:ListConnectorFields",
				"appflow:ListFlows",
				"appflow:ListTagsForResource",
				"application-autoscaling:Describe*",
				"applicationinsights:Describe*",
				"applicationinsights:List*",
				"appmesh:Describe*",
				"appmesh:List*",
				"appstream:Describe*",
				"appstream:List*",
				"appsync:Get*",
				"appsync:List*",
				"aps:DescribeAlertManagerDefinition",
				"aps:DescribeRuleGroupsNamespace",
				"aps:DescribeWorkspace",
				"aps:GetAlertManagerSilence",
				"aps:GetAlertManagerStatus",
				"aps:GetLabels",
				"aps:GetMetricMetadata",
				"aps:GetSeries",
				"aps:ListAlertManagerAlertGroups",
				"aps:ListAlertManagerAlerts",
				"aps:ListAlertManagerReceivers",
				"aps:ListAlertManagerSilences",
				"aps:ListAlerts",
				"aps:ListRuleGroupsNamespaces",
				"aps:ListRules",
				"aps:ListTagsForResource",
				"aps:ListWorkspaces",
				"aps:QueryMetrics",
				"athena:Batch*",
				"athena:Get*",
				"athena:List*",
				"auditmanager:GetAccountStatus",
				"auditmanager:GetAssessment",
				"auditmanager:GetAssessmentFramework",
				"auditmanager:GetAssessmentReportUrl",
				"auditmanager:GetChangeLogs",
				"auditmanager:GetControl",
				"auditmanager:GetDelegations",
				"auditmanager:GetEvidence",
				"auditmanager:GetEvidenceByEvidenceFolder",
				"auditmanager:GetEvidenceFolder",
				"auditmanager:GetEvidenceFoldersByAssessment",
				"auditmanager:GetEvidenceFoldersByAssessmentControl",
				"auditmanager:GetOrganizationAdminAccount",
				"auditmanager:GetServicesInScope",
				"auditmanager:GetSettings",
				"auditmanager:ListAssessmentFrameworks",
				"auditmanager:ListAssessmentReports",
				"auditmanager:ListAssessments",
				"auditmanager:ListControls",
				"auditmanager:ListKeywordsForDataSource",
				"auditmanager:ListNotifications",
				"auditmanager:ListTagsForResource",
				"auditmanager:ValidateAssessmentReportIntegrity",
				"autoscaling-plans:Describe*",
				"autoscaling-plans:GetScalingPlanResourceForecastData",
				"autoscaling:Describe*",
				"autoscaling:GetPredictiveScalingForecast",
				"aws-portal:View*",
				"backup-gateway:ListGateways",
				"backup-gateway:ListHypervisors",
				"backup-gateway:ListTagsForResource",
				"backup-gateway:ListVirtualMachines",
				"backup:Describe*",
				"backup:Get*",
				"backup:List*",
				"batch:Describe*",
				"batch:List*",
				"billingconductor:ListAccountAssociations",
				"billingconductor:ListBillingGroupCostReports",
				"billingconductor:ListBillingGroups",
				"billingconductor:ListCustomLineItems",
				"billingconductor:ListPricingPlans",
				"billingconductor:ListPricingPlansAssociatedWithPricingRule",
				"billingconductor:ListPricingRules",
				"billingconductor:ListPricingRulesAssociatedToPricingPlan",
				"billingconductor:ListResourcesAssociatedToCustomLineItem",
				"billingconductor:ListTagsForResource",
				"braket:GetDevice",
				"braket:GetQuantumTask",
				"braket:SearchDevices",
				"braket:SearchQuantumTasks",
				"budgets:Describe*",
				"budgets:View*",
				"cassandra:Select",
				"ce:DescribeCostCategoryDefinition",
				"ce:DescribeNotificationSubscription",
				"ce:DescribeReport",
				"ce:GetAnomalies",
				"ce:GetAnomalyMonitors",
				"ce:GetAnomalySubscriptions",
				"ce:GetCostAndUsage",
				"ce:GetCostAndUsageWithResources",
				"ce:GetCostCategories",
				"ce:GetCostForecast",
				"ce:GetDimensionValues",
				"ce:GetPreferences",
				"ce:GetReservationCoverage",
				"ce:GetReservationPurchaseRecommendation",
				"ce:GetReservationUtilization",
				"ce:GetRightsizingRecommendation",
				"ce:GetSavingsPlansCoverage",
				"ce:GetSavingsPlansPurchaseRecommendation",
				"ce:GetSavingsPlansUtilization",
				"ce:GetSavingsPlansUtilizationDetails",
				"ce:GetTags",
				"ce:GetUsageForecast",
				"ce:ListCostCategoryDefinitions",
				"ce:ListTagsForResource",
				"chatbot:Describe*",
				"chatbot:Get*",
				"chime:Get*",
				"chime:List*",
				"chime:Retrieve*",
				"chime:Search*",
				"chime:Validate*",
				"cloud9:Describe*",
				"cloud9:List*",
				"clouddirectory:BatchRead",
				"clouddirectory:Get*",
				"clouddirectory:List*",
				"clouddirectory:LookupPolicy",
				"cloudformation:Describe*",
				"cloudformation:Detect*",
				"cloudformation:Estimate*",
				"cloudformation:Get*",
				"cloudformation:List*",
				"cloudfront:DescribeFunction",
				"cloudfront:Get*",
				"cloudfront:List*",
				"cloudhsm:Describe*",
				"cloudhsm:Get*",
				"cloudhsm:List*",
				"cloudsearch:Describe*",
				"cloudsearch:List*",
				"cloudtrail:Describe*",
				"cloudtrail:Get*",
				"cloudtrail:List*",
				"cloudtrail:LookupEvents",
				"cloudwatch:Describe*",
				"cloudwatch:Get*",
				"cloudwatch:List*",
				"codeartifact:DescribeDomain",
				"codeartifact:DescribePackageVersion",
				"codeartifact:DescribeRepository",
				"codeartifact:GetAuthorizationToken",
				"codeartifact:GetDomainPermissionsPolicy",
				"codeartifact:GetPackageVersionAsset",
				"codeartifact:GetPackageVersionReadme",
				"codeartifact:GetRepositoryEndpoint",
				"codeartifact:GetRepositoryPermissionsPolicy",
				"codeartifact:ListDomains",
				"codeartifact:ListPackages",
				"codeartifact:ListPackageVersionAssets",
				"codeartifact:ListPackageVersionDependencies",
				"codeartifact:ListPackageVersions",
				"codeartifact:ListRepositories",
				"codeartifact:ListRepositoriesInDomain",
				"codeartifact:ListTagsForResource",
				"codeartifact:ReadFromRepository",
				"codebuild:BatchGet*",
				"codebuild:DescribeCodeCoverages",
				"codebuild:DescribeTestCases",
				"codebuild:List*",
				"codecommit:BatchGet*",
				"codecommit:Describe*",
				"codecommit:Get*",
				"codecommit:GitPull",
				"codecommit:List*",
				"codedeploy:BatchGet*",
				"codedeploy:Get*",
				"codedeploy:List*",
				"codeguru-profiler:Describe*",
				"codeguru-profiler:Get*",
				"codeguru-profiler:List*",
				"codeguru-reviewer:Describe*",
				"codeguru-reviewer:Get*",
				"codeguru-reviewer:List*",
				"codepipeline:Get*",
				"codepipeline:List*",
				"codestar-connections:GetConnection",
				"codestar-connections:GetHost",
				"codestar-connections:ListConnections",
				"codestar-connections:ListHosts",
				"codestar-connections:ListTagsForResource",
				"codestar-notifications:describeNotificationRule",
				"codestar-notifications:listEventTypes",
				"codestar-notifications:listNotificationRules",
				"codestar-notifications:listTagsForResource",
				"codestar-notifications:ListTargets",
				"codestar:Describe*",
				"codestar:Get*",
				"codestar:List*",
				"codestar:Verify*",
				"cognito-identity:Describe*",
				"cognito-identity:GetCredentialsForIdentity",
				"cognito-identity:GetIdentityPoolRoles",
				"cognito-identity:GetOpenIdToken",
				"cognito-identity:GetOpenIdTokenForDeveloperIdentity",
				"cognito-identity:List*",
				"cognito-identity:Lookup*",
				"cognito-idp:AdminGet*",
				"cognito-idp:AdminList*",
				"cognito-idp:Describe*",
				"cognito-idp:Get*",
				"cognito-idp:List*",
				"cognito-sync:Describe*",
				"cognito-sync:Get*",
				"cognito-sync:List*",
				"cognito-sync:QueryRecords",
				"comprehend:BatchDetect*",
				"comprehend:Classify*",
				"comprehend:Contains*",
				"comprehend:Describe*",
				"comprehend:Detect*",
				"comprehend:List*",
				"compute-optimizer:DescribeRecommendationExportJobs",
				"compute-optimizer:GetAutoScalingGroupRecommendations",
				"compute-optimizer:GetEBSVolumeRecommendations",
				"compute-optimizer:GetEC2InstanceRecommendations",
				"compute-optimizer:GetEC2RecommendationProjectedMetrics",
				"compute-optimizer:GetEnrollmentStatus",
				"compute-optimizer:GetEnrollmentStatusesForOrganization",
				"compute-optimizer:GetLambdaFunctionRecommendations",
				"compute-optimizer:GetRecommendationSummaries",
				"config:BatchGetAggregateResourceConfig",
				"config:BatchGetResourceConfig",
				"config:Deliver*",
				"config:Describe*",
				"config:Get*",
				"config:List*",
				"config:SelectAggregateResourceConfig",
				"config:SelectResourceConfig",
				"connect:Describe*",
				"connect:GetFederationToken",
				"connect:List*",
				"databrew:DescribeDataset",
				"databrew:DescribeJob",
				"databrew:DescribeJobRun",
				"databrew:DescribeProject",
				"databrew:DescribeRecipe",
				"databrew:DescribeRuleset",
				"databrew:DescribeSchedule",
				"databrew:ListDatasets",
				"databrew:ListJobRuns",
				"databrew:ListJobs",
				"databrew:ListProjects",
				"databrew:ListRecipes",
				"databrew:ListRecipeVersions",
				"databrew:ListRulesets",
				"databrew:ListSchedules",
				"databrew:ListTagsForResource",
				"dataexchange:Get*",
				"dataexchange:List*",
				"datapipeline:Describe*",
				"datapipeline:EvaluateExpression",
				"datapipeline:Get*",
				"datapipeline:List*",
				"datapipeline:QueryObjects",
				"datapipeline:Validate*",
				"datasync:Describe*",
				"datasync:List*",
				"dax:BatchGetItem",
				"dax:Describe*",
				"dax:GetItem",
				"dax:ListTags",
				"dax:Query",
				"dax:Scan",
				"deepcomposer:GetComposition",
				"deepcomposer:GetModel",
				"deepcomposer:GetSampleModel",
				"deepcomposer:ListCompositions",
				"deepcomposer:ListModels",
				"deepcomposer:ListSampleModels",
				"deepcomposer:ListTrainingTopics",
				"detective:Get*",
				"detective:List*",
				"detective:SearchGraph",
				"devicefarm:Get*",
				"devicefarm:List*",
				"devops-guru:DescribeAccountHealth",
				"devops-guru:DescribeAccountOverview",
				"devops-guru:DescribeAnomaly",
				"devops-guru:DescribeEventSourcesConfig",
				"devops-guru:DescribeFeedback",
				"devops-guru:DescribeInsight",
				"devops-guru:DescribeResourceCollectionHealth",
				"devops-guru:DescribeServiceIntegration",
				"devops-guru:GetCostEstimation",
				"devops-guru:GetResourceCollection",
				"devops-guru:ListAnomaliesForInsight",
				"devops-guru:ListEvents",
				"devops-guru:ListInsights",
				"devops-guru:ListNotificationChannels",
				"devops-guru:ListRecommendations",
				"devops-guru:SearchInsights",
				"devops-guru:StartCostEstimation",
				"directconnect:Describe*",
				"discovery:Describe*",
				"discovery:Get*",
				"discovery:List*",
				"dlm:Get*",
				"dms:Describe*",
				"dms:List*",
				"dms:Test*",
				"drs:DescribeJobLogItems",
				"drs:DescribeJobs",
				"drs:DescribeRecoveryInstances",
				"drs:DescribeRecoverySnapshots",
				"drs:DescribeReplicationConfigurationTemplates",
				"drs:DescribeSourceServers",
				"drs:GetFailbackReplicationConfiguration",
				"drs:GetLaunchConfiguration",
				"drs:GetReplicationConfiguration",
				"drs:ListTagsForResource",
				"ds:Check*",
				"ds:Describe*",
				"ds:Get*",
				"ds:List*",
				"ds:Verify*",
				"dynamodb:BatchGet*",
				"dynamodb:Describe*",
				"dynamodb:Get*",
				"dynamodb:List*",
				"dynamodb:Query",
				"dynamodb:Scan",
				"ec2:Describe*",
				"ec2:Get*",
				"ec2:ListSnapshotsInRecycleBin",
				"ec2:SearchLocalGatewayRoutes",
				"ec2:SearchTransitGatewayRoutes",
				"ec2messages:Get*",
				"ecr-public:BatchCheckLayerAvailability",
				"ecr-public:DescribeImages",
				"ecr-public:DescribeImageTags",
				"ecr-public:DescribeRegistries",
				"ecr-public:DescribeRepositories",
				"ecr-public:GetAuthorizationToken",
				"ecr-public:GetRegistryCatalogData",
				"ecr-public:GetRepositoryCatalogData",
				"ecr-public:GetRepositoryPolicy",
				"ecr-public:ListTagsForResource",
				"ecr:BatchCheck*",
				"ecr:BatchGet*",
				"ecr:Describe*",
				"ecr:Get*",
				"ecr:List*",
				"ecs:Describe*",
				"ecs:List*",
				"eks:Describe*",
				"eks:List*",
				"elastic-inference:DescribeAcceleratorOfferings",
				"elastic-inference:DescribeAccelerators",
				"elastic-inference:DescribeAcceleratorTypes",
				"elastic-inference:ListTagsForResource",
				"elasticache:Describe*",
				"elasticache:List*",
				"elasticbeanstalk:Check*",
				"elasticbeanstalk:Describe*",
				"elasticbeanstalk:List*",
				"elasticbeanstalk:Request*",
				"elasticbeanstalk:Retrieve*",
				"elasticbeanstalk:Validate*",
				"elasticfilesystem:Describe*",
				"elasticloadbalancing:Describe*",
				"elasticmapreduce:Describe*",
				"elasticmapreduce:GetBlockPublicAccessConfiguration",
				"elasticmapreduce:List*",
				"elasticmapreduce:View*",
				"elastictranscoder:List*",
				"elastictranscoder:Read*",
				"elemental-appliances-software:Get*",
				"elemental-appliances-software:List*",
				"emr-containers:DescribeJobRun",
				"emr-containers:DescribeManagedEndpoint",
				"emr-containers:DescribeVirtualCluster",
				"emr-containers:ListJobRuns",
				"emr-containers:ListManagedEndpoints",
				"emr-containers:ListTagsForResource",
				"emr-containers:ListVirtualClusters",
				"es:Describe*",
				"es:ESHttpGet",
				"es:ESHttpHead",
				"es:Get*",
				"es:List*",
				"events:Describe*",
				"events:List*",
				"events:Test*",
				"firehose:Describe*",
				"firehose:List*",
				"fis:GetAction",
				"fis:GetExperiment",
				"fis:GetExperimentTemplate",
				"fis:GetTargetResourceType",
				"fis:ListActions",
				"fis:ListExperiments",
				"fis:ListExperimentTemplates",
				"fis:ListTagsForResource",
				"fis:ListTargetResourceTypes",
				"fms:GetAdminAccount",
				"fms:GetAppsList",
				"fms:GetComplianceDetail",
				"fms:GetNotificationChannel",
				"fms:GetPolicy",
				"fms:GetProtectionStatus",
				"fms:GetProtocolsList",
				"fms:GetViolationDetails",
				"fms:ListAppsLists",
				"fms:ListComplianceStatus",
				"fms:ListMemberAccounts",
				"fms:ListPolicies",
				"fms:ListProtocolsLists",
				"fms:ListTagsForResource",
				"forecast:DescribeDataset",
				"forecast:DescribeDatasetGroup",
				"forecast:DescribeDatasetImportJob",
				"forecast:DescribeForecast",
				"forecast:DescribeForecastExportJob",
				"forecast:DescribePredictor",
				"forecast:DescribePredictorBacktestExportJob",
				"forecast:GetAccuracyMetrics",
				"forecast:ListDatasetGroups",
				"forecast:ListDatasetImportJobs",
				"forecast:ListDatasets",
				"forecast:ListForecastExportJobs",
				"forecast:ListForecasts",
				"forecast:ListPredictorBacktestExportJobs",
				"forecast:ListPredictors",
				"forecast:QueryForecast",
				"freertos:Describe*",
				"freertos:List*",
				"fsx:Describe*",
				"fsx:List*",
				"frauddetector:BatchGetVariable",
				"frauddetector:DescribeDetector",
				"frauddetector:DescribeModelVersions",
				"frauddetector:GetBatchImportJobs",
				"frauddetector:GetBatchPredictionJobs",
				"frauddetector:GetDeleteEventsByEventTypeStatus",
				"frauddetector:GetDetectors",
				"frauddetector:GetDetectorVersion",
				"frauddetector:GetEntityTypes",
				"frauddetector:GetEvent",
				"frauddetector:GetEventPredictionMetadata",
				"frauddetector:GetEventTypes",
				"frauddetector:GetExternalModels",
				"frauddetector:GetKMSEncryptionKey",
				"frauddetector:GetLabels",
				"frauddetector:GetModels",
				"frauddetector:GetModelVersion",
				"frauddetector:GetOutcomes",
				"frauddetector:GetRules",
				"frauddetector:GetVariables",
				"frauddetector:ListEventPredictions",
				"frauddetector:ListTagsForResource",
				"gamelift:Describe*",
				"gamelift:Get*",
				"gamelift:List*",
				"gamelift:ResolveAlias",
				"gamelift:Search*",
				"gamesparks:GetExtension",
				"gamesparks:GetExtensionVersion",
				"gamesparks:GetGame",
				"gamesparks:GetGameConfiguration",
				"gamesparks:GetGeneratedCodeJob",
				"gamesparks:GetPlayerConnectionStatus",
				"gamesparks:GetSnapshot",
				"gamesparks:GetStage",
				"gamesparks:GetStageDeployment",
				"gamesparks:ListExtensions",
				"gamesparks:ListExtensionVersions",
				"gamesparks:ListGames",
				"gamesparks:ListGeneratedCodeJobs",
				"gamesparks:ListSnapshots",
				"gamesparks:ListStageDeployments",
				"gamesparks:ListStages",
				"gamesparks:ListTagsForResource",
				"glacier:Describe*",
				"glacier:Get*",
				"glacier:List*",
				"globalaccelerator:Describe*",
				"globalaccelerator:List*",
				"glue:BatchGetDevEndpoints",
				"glue:BatchGetJobs",
				"glue:BatchGetPartition",
				"glue:BatchGetTriggers",
				"glue:BatchGetWorkflows",
				"glue:CheckSchemaVersionValidity",
				"glue:GetCatalogImportStatus",
				"glue:GetClassifier",
				"glue:GetClassifiers",
				"glue:GetCrawler",
				"glue:GetCrawlerMetrics",
				"glue:GetCrawlers",
				"glue:GetDatabase",
				"glue:GetDatabases",
				"glue:GetDataCatalogEncryptionSettings",
				"glue:GetDataflowGraph",
				"glue:GetDevEndpoint",
				"glue:GetDevEndpoints",
				"glue:GetJob",
				"glue:GetJobBookmark",
				"glue:GetJobRun",
				"glue:GetJobRuns",
				"glue:GetJobs",
				"glue:GetMapping",
				"glue:GetMLTaskRun",
				"glue:GetMLTaskRuns",
				"glue:GetMLTransform",
				"glue:GetMLTransforms",
				"glue:GetPartition",
				"glue:GetPartitions",
				"glue:GetPlan",
				"glue:GetRegistry",
				"glue:GetResourcePolicy",
				"glue:GetSchema",
				"glue:GetSchemaByDefinition",
				"glue:GetSchemaVersion",
				"glue:GetSchemaVersionsDiff",
				"glue:GetSecurityConfiguration",
				"glue:GetSecurityConfigurations",
				"glue:GetTable",
				"glue:GetTables",
				"glue:GetTableVersion",
				"glue:GetTableVersions",
				"glue:GetTags",
				"glue:GetTrigger",
				"glue:GetTriggers",
				"glue:GetUserDefinedFunction",
				"glue:GetUserDefinedFunctions",
				"glue:GetWorkflow",
				"glue:GetWorkflowRun",
				"glue:GetWorkflowRunProperties",
				"glue:GetWorkflowRuns",
				"glue:ListCrawlers",
				"glue:ListDevEndpoints",
				"glue:ListJobs",
				"glue:ListMLTransforms",
				"glue:ListRegistries",
				"glue:ListSchemas",
				"glue:ListSchemaVersions",
				"glue:ListTriggers",
				"glue:ListWorkflows",
				"glue:QuerySchemaVersionMetadata",
				"grafana:ListWorkspaces",
				"greengrass:DescribeComponent",
				"greengrass:Get*",
				"greengrass:List*",
				"groundstation:DescribeContact",
				"groundstation:GetConfig",
				"groundstation:GetDataflowEndpointGroup",
				"groundstation:GetMinuteUsage",
				"groundstation:GetMissionProfile",
				"groundstation:GetSatellite",
				"groundstation:ListConfigs",
				"groundstation:ListContacts",
				"groundstation:ListDataflowEndpointGroups",
				"groundstation:ListGroundStations",
				"groundstation:ListMissionProfiles",
				"groundstation:ListSatellites",
				"groundstation:ListTagsForResource",
				"guardduty:DescribeOrganizationConfiguration",
				"guardduty:DescribePublishingDestination",
				"guardduty:Get*",
				"guardduty:List*",
				"health:Describe*",
				"iam:Generate*",
				"iam:Get*",
				"iam:List*",
				"iam:Simulate*",
				"identity-sync:GetSyncProfile",
				"identity-sync:GetSyncTarget",
				"identity-sync:ListSyncFilters",
				"imagebuilder:Get*",
				"imagebuilder:List*",
				"importexport:Get*",
				"importexport:List*",
				"inspector2:BatchGetAccountStatus",
				"inspector2:BatchGetFreeTrialInfo",
				"inspector2:DescribeOrganizationConfiguration",
				"inspector2:GetDelegatedAdminAccount",
				"inspector2:GetFindingsReportStatus",
				"inspector2:GetMember",
				"inspector2:ListAccountPermissions",
				"inspector2:ListCoverage",
				"inspector2:ListCoverageStatistics",
				"inspector2:ListDelegatedAdminAccounts",
				"inspector2:ListFilters",
				"inspector2:ListFindingAggregations",
				"inspector2:ListFindings",
				"inspector2:ListMembers",
				"inspector2:ListTagsForResource",
				"inspector2:ListUsageTotals",
				"inspector:Describe*",
				"inspector:Get*",
				"inspector:List*",
				"inspector:Preview*",
				"iot1click:DescribeDevice",
				"iot1click:DescribePlacement",
				"iot1click:DescribeProject",
				"iot1click:GetDeviceMethods",
				"iot1click:GetDevicesInPlacement",
				"iot1click:ListDeviceEvents",
				"iot1click:ListDevices",
				"iot1click:ListPlacements",
				"iot1click:ListProjects",
				"iot1click:ListTagsForResource",
				"iot:Describe*",
				"iot:Get*",
				"iot:List*",
				"iotanalytics:Describe*",
				"iotanalytics:Get*",
				"iotanalytics:List*",
				"iotanalytics:SampleChannelData",
				"iotevents:DescribeAlarm",
				"iotevents:DescribeAlarmModel",
				"iotevents:DescribeDetector",
				"iotevents:DescribeDetectorModel",
				"iotevents:DescribeInput",
				"iotevents:DescribeLoggingOptions",
				"iotevents:ListAlarmModels",
				"iotevents:ListAlarmModelVersions",
				"iotevents:ListAlarms",
				"iotevents:ListDetectorModels",
				"iotevents:ListDetectorModelVersions",
				"iotevents:ListDetectors",
				"iotevents:ListInputs",
				"iotevents:ListTagsForResource",
				"iotfleethub:DescribeApplication",
				"iotfleethub:ListApplications",
				"iotroborunner:GetAction",
				"iotroborunner:GetActionTemplate",
				"iotroborunner:GetActivity",
				"iotroborunner:GetDestination",
				"iotroborunner:GetDestinationRelationship",
				"iotroborunner:GetSite",
				"iotroborunner:GetTask",
				"iotroborunner:GetWorker",
				"iotroborunner:GetWorkerFleet",
				"iotroborunner:ListActions",
				"iotroborunner:ListActionTemplates",
				"iotroborunner:ListActivities",
				"iotroborunner:ListDestinationRelationships",
				"iotroborunner:ListDestinations",
				"iotroborunner:ListSites",
				"iotroborunner:ListTasks",
				"iotroborunner:ListWorkerFleets",
				"iotroborunner:ListWorkers",
				"iotsitewise:Describe*",
				"iotsitewise:Get*",
				"iotsitewise:List*",
				"iotwireless:GetDestination",
				"iotwireless:GetDeviceProfile",
				"iotwireless:GetPartnerAccount",
				"iotwireless:GetServiceEndpoint",
				"iotwireless:GetServiceProfile",
				"iotwireless:GetWirelessDevice",
				"iotwireless:GetWirelessDeviceStatistics",
				"iotwireless:GetWirelessGateway",
				"iotwireless:GetWirelessGatewayCertificate",
				"iotwireless:GetWirelessGatewayFirmwareInformation",
				"iotwireless:GetWirelessGatewayStatistics",
				"iotwireless:GetWirelessGatewayTask",
				"iotwireless:GetWirelessGatewayTaskDefinition",
				"iotwireless:ListDestinations",
				"iotwireless:ListDeviceProfiles",
				"iotwireless:ListPartnerAccounts",
				"iotwireless:ListServiceProfiles",
				"iotwireless:ListTagsForResource",
				"iotwireless:ListWirelessDevices",
				"iotwireless:ListWirelessGateways",
				"iotwireless:ListWirelessGatewayTaskDefinitions",
				"ivs:GetStreamSession",
				"ivs:ListStreamSessions",
				"ivs:BatchGetChannel",
				"ivs:GetChannel",
				"ivs:GetPlaybackKeyPair",
				"ivs:GetRecordingConfiguration",
				"ivs:ListChannels",
				"ivs:ListPlaybackKeyPairs",
				"ivs:ListRecordingConfigurations",
				"ivs:ListStreams",
				"ivs:ListTagsForResource",
				"ivschat:GetRoom",
				"ivschat:ListRooms",
				"ivschat:ListTagsForResource",
				"kafka:Describe*",
				"kafka:Get*",
				"kafka:List*",
				"kafkaconnect:DescribeConnector",
				"kafkaconnect:DescribeCustomPlugin",
				"kafkaconnect:DescribeWorkerConfiguration",
				"kafkaconnect:ListConnectors",
				"kafkaconnect:ListCustomPlugins",
				"kafkaconnect:ListWorkerConfigurations",
				"kendra:BatchGetDocumentStatus",
				"kendra:DescribeDataSource",
				"kendra:DescribeExperience",
				"kendra:DescribeFaq",
				"kendra:DescribeIndex",
				"kendra:DescribePrincipalMapping",
				"kendra:DescribeQuerySuggestionsBlockList",
				"kendra:DescribeQuerySuggestionsConfig",
				"kendra:DescribeThesaurus",
				"kendra:GetQuerySuggestions",
				"kendra:GetSnapshots",
				"kendra:ListDataSources",
				"kendra:ListDataSourceSyncJobs",
				"kendra:ListEntityPersonas",
				"kendra:ListExperienceEntities",
				"kendra:ListExperiences",
				"kendra:ListFaqs",
				"kendra:ListGroupsOlderThanOrderingId",
				"kendra:ListIndices",
				"kendra:ListQuerySuggestionsBlockLists",
				"kendra:ListTagsForResource",
				"kendra:ListThesauri",
				"kendra:Query",
				"kinesis:Describe*",
				"kinesis:Get*",
				"kinesis:List*",
				"kinesisanalytics:Describe*",
				"kinesisanalytics:Discover*",
				"kinesisanalytics:Get*",
				"kinesisanalytics:List*",
				"kinesisvideo:Describe*",
				"kinesisvideo:Get*",
				"kinesisvideo:List*",
				"kms:Describe*",
				"kms:Get*",
				"kms:List*",
				"lambda:Get*",
				"lambda:List*",
				"lex:DescribeBot",
				"lex:DescribeBotAlias",
				"lex:DescribeBotChannel",
				"lex:DescribeBotLocale",
				"lex:DescribeBotVersion",
				"lex:DescribeExport",
				"lex:DescribeImport",
				"lex:DescribeIntent",
				"lex:DescribeResourcePolicy",
				"lex:DescribeSlot",
				"lex:DescribeSlotType",
				"lex:Get*",
				"lex:ListBotAliases",
				"lex:ListBotChannels",
				"lex:ListBotLocales",
				"lex:ListBots",
				"lex:ListBotVersions",
				"lex:ListBuiltInIntents",
				"lex:ListBuiltInSlotTypes",
				"lex:ListExports",
				"lex:ListImports",
				"lex:ListIntents",
				"lex:ListSlots",
				"lex:ListSlotTypes",
				"lex:ListTagsForResource",
				"license-manager:Get*",
				"license-manager:List*",
				"lightsail:GetActiveNames",
				"lightsail:GetAlarms",
				"lightsail:GetAutoSnapshots",
				"lightsail:GetBlueprints",
				"lightsail:GetBucketAccessKeys",
				"lightsail:GetBucketBundles",
				"lightsail:GetBucketMetricData",
				"lightsail:GetBuckets",
				"lightsail:GetBundles",
				"lightsail:GetCertificates",
				"lightsail:GetCloudFormationStackRecords",
				"lightsail:GetContainerAPIMetadata",
				"lightsail:GetContainerImages",
				"lightsail:GetContainerServiceDeployments",
				"lightsail:GetContainerServiceMetricData",
				"lightsail:GetContainerServicePowers",
				"lightsail:GetContainerServices",
				"lightsail:GetDisk",
				"lightsail:GetDisks",
				"lightsail:GetDiskSnapshot",
				"lightsail:GetDiskSnapshots",
				"lightsail:GetDistributionBundles",
				"lightsail:GetDistributionLatestCacheReset",
				"lightsail:GetDistributionMetricData",
				"lightsail:GetDistributions",
				"lightsail:GetDomain",
				"lightsail:GetDomains",
				"lightsail:GetExportSnapshotRecords",
				"lightsail:GetInstance",
				"lightsail:GetInstanceMetricData",
				"lightsail:GetInstancePortStates",
				"lightsail:GetInstances",
				"lightsail:GetInstanceSnapshot",
				"lightsail:GetInstanceSnapshots",
				"lightsail:GetInstanceState",
				"lightsail:GetKeyPair",
				"lightsail:GetKeyPairs",
				"lightsail:GetLoadBalancer",
				"lightsail:GetLoadBalancerMetricData",
				"lightsail:GetLoadBalancers",
				"lightsail:GetLoadBalancerTlsCertificates",
				"lightsail:GetOperation",
				"lightsail:GetOperations",
				"lightsail:GetOperationsForResource",
				"lightsail:GetRegions",
				"lightsail:GetRelationalDatabase",
				"lightsail:GetRelationalDatabaseBlueprints",
				"lightsail:GetRelationalDatabaseBundles",
				"lightsail:GetRelationalDatabaseEvents",
				"lightsail:GetRelationalDatabaseLogEvents",
				"lightsail:GetRelationalDatabaseLogStreams",
				"lightsail:GetRelationalDatabaseMetricData",
				"lightsail:GetRelationalDatabaseParameters",
				"lightsail:GetRelationalDatabases",
				"lightsail:GetRelationalDatabaseSnapshot",
				"lightsail:GetRelationalDatabaseSnapshots",
				"lightsail:GetStaticIp",
				"lightsail:GetStaticIps",
				"lightsail:Is*",
				"logs:Describe*",
				"logs:FilterLogEvents",
				"logs:Get*",
				"logs:ListTagsLogGroup",
				"logs:StartQuery",
				"logs:StopQuery",
				"logs:TestMetricFilter",
				"lookoutvision:DescribeDataset",
				"lookoutvision:DescribeModel",
				"lookoutvision:DescribeModelPackagingJob",
				"lookoutvision:DescribeProject",
				"lookoutvision:ListDatasetEntries",
				"lookoutvision:ListModelPackagingJobs",
				"lookoutvision:ListModels",
				"lookoutvision:ListProjects",
				"lookoutvision:ListTagsForResource",
				"lookoutmetrics:Describe*",
				"lookoutmetrics:List*",
				"lookoutmetrics:Get*",
				"machinelearning:Describe*",
				"machinelearning:Get*",
				"macie2:BatchGetCustomDataIdentifiers",
				"macie2:DescribeBuckets",
				"macie2:DescribeClassificationJob",
				"macie2:DescribeOrganizationConfiguration",
				"macie2:GetAdministratorAccount",
				"macie2:GetBucketStatistics",
				"macie2:GetClassificationExportConfiguration",
				"macie2:GetCustomDataIdentifier",
				"macie2:GetFindings",
				"macie2:GetFindingsFilter",
				"macie2:GetFindingsPublicationConfiguration",
				"macie2:GetFindingStatistics",
				"macie2:GetInvitationsCount",
				"macie2:GetMacieSession",
				"macie2:GetMember",
				"macie2:GetUsageStatistics",
				"macie2:GetUsageTotals",
				"macie2:ListClassificationJobs",
				"macie2:ListCustomDataIdentifiers",
				"macie2:ListFindings",
				"macie2:ListFindingsFilters",
				"macie2:ListInvitations",
				"macie2:ListMembers",
				"macie2:ListOrganizationAdminAccounts",
				"macie2:ListTagsForResource",
				"macie2:SearchResources",
				"macie:ListMemberAccounts",
				"macie:ListS3Resources",
				"managedblockchain:GetMember",
				"managedblockchain:GetNetwork",
				"managedblockchain:GetNode",
				"managedblockchain:GetProposal",
				"managedblockchain:ListInvitations",
				"managedblockchain:ListMembers",
				"managedblockchain:ListNetworks",
				"managedblockchain:ListNodes",
				"managedblockchain:ListProposals",
				"managedblockchain:ListProposalVotes",
				"managedblockchain:ListTagsForResource",
				"mediaconnect:DescribeFlow",
				"mediaconnect:DescribeOffering",
				"mediaconnect:DescribeReservation",
				"mediaconnect:ListEntitlements",
				"mediaconnect:ListFlows",
				"mediaconnect:ListOfferings",
				"mediaconnect:ListReservations",
				"mediaconnect:ListTagsForResource",
				"mediaconvert:DescribeEndpoints",
				"mediaconvert:Get*",
				"mediaconvert:List*",
				"mediapackage-vod:Describe*",
				"mediapackage-vod:List*",
				"mediapackage:Describe*",
				"mediapackage:List*",
				"mediastore:DescribeContainer",
				"mediastore:DescribeObject",
				"mediastore:GetContainerPolicy",
				"mediastore:GetCorsPolicy",
				"mediastore:GetLifecyclePolicy",
				"mediastore:GetMetricPolicy",
				"mediastore:GetObject",
				"mediastore:ListContainers",
				"mediastore:ListItems",
				"mediastore:ListTagsForResource",
				"mgh:Describe*",
				"mgh:GetHomeRegion",
				"mgh:List*",
				"mgn:DescribeJobLogItems",
				"mgn:DescribeJobs",
				"mgn:DescribeReplicationConfigurationTemplates",
				"mgn:DescribeSourceServers",
				"mgn:GetLaunchConfiguration",
				"mgn:GetReplicationConfiguration",
				"mobileanalytics:Get*",
				"mobilehub:Describe*",
				"mobilehub:Export*",
				"mobilehub:Generate*",
				"mobilehub:Get*",
				"mobilehub:List*",
				"mobilehub:Validate*",
				"mobilehub:Verify*",
				"mobiletargeting:Get*",
				"mobiletargeting:List*",
				"monitron:GetProject",
				"monitron:GetProjectAdminUser",
				"monitron:ListProjects",
				"monitron:ListTagsForResource",
				"mq:Describe*",
				"mq:List*",
				"network-firewall:DescribeFirewall",
				"network-firewall:DescribeFirewallPolicy",
				"network-firewall:DescribeLoggingConfiguration",
				"network-firewall:DescribeResourcePolicy",
				"network-firewall:DescribeRuleGroup",
				"network-firewall:DescribeRuleGroupMetadata",
				"network-firewall:ListFirewallPolicies",
				"network-firewall:ListFirewalls",
				"network-firewall:ListRuleGroups",
				"network-firewall:ListTagsForResource",
				"networkmanager:DescribeGlobalNetworks",
				"networkmanager:GetConnectAttachment",
				"networkmanager:GetConnections",
				"networkmanager:GetConnectPeer",
				"networkmanager:GetConnectPeerAssociations",
				"networkmanager:GetCoreNetwork",
				"networkmanager:GetCoreNetworkChangeSet",
				"networkmanager:GetCoreNetworkPolicy",
				"networkmanager:GetCustomerGatewayAssociations",
				"networkmanager:GetDevices",
				"networkmanager:GetLinkAssociations",
				"networkmanager:GetLinks",
				"networkmanager:GetNetworkResourceCounts",
				"networkmanager:GetNetworkResourceRelationships",
				"networkmanager:GetNetworkResources",
				"networkmanager:GetNetworkRoutes",
				"networkmanager:GetNetworkTelemetry",
				"networkmanager:GetResourcePolicy",
				"networkmanager:GetRouteAnalysis",
				"networkmanager:GetSites",
				"networkmanager:GetSiteToSiteVpnAttachment",
				"networkmanager:GetTransitGatewayConnectPeerAssociations",
				"networkmanager:GetTransitGatewayRegistrations",
				"networkmanager:GetVpcAttachment",
				"networkmanager:ListAttachments",
				"networkmanager:ListConnectPeers",
				"networkmanager:ListCoreNetworkPolicyVersions",
				"networkmanager:ListCoreNetworks",
				"networkmanager:ListTagsForResource",
				"opsworks-cm:Describe*",
				"opsworks-cm:List*",
				"opsworks:Describe*",
				"opsworks:Get*",
				"organizations:Describe*",
				"organizations:List*",
				"outposts:Get*",
				"outposts:List*",
				"personalize:Describe*",
				"personalize:Get*",
				"personalize:List*",
				"pi:DescribeDimensionKeys",
				"pi:GetDimensionKeyDetails",
				"pi:GetResourceMetadata",
				"pi:GetResourceMetrics",
				"pi:ListAvailableResourceDimensions",
				"pi:ListAvailableResourceMetrics",
				"polly:Describe*",
				"polly:Get*",
				"polly:List*",
				"polly:SynthesizeSpeech",
				"proton:GetEnvironment",
				"proton:GetEnvironmentTemplate",
				"proton:GetEnvironmentTemplateVersion",
				"proton:GetService",
				"proton:GetServiceInstance",
				"proton:GetServiceTemplate",
				"proton:GetServiceTemplateVersion",
				"proton:ListEnvironmentAccountConnections",
				"proton:ListEnvironments",
				"proton:ListEnvironmentTemplates",
				"proton:ListServiceInstances",
				"proton:ListServices",
				"proton:ListServiceTemplates",
				"proton:ListTagsForResource",
				"qldb:DescribeJournalS3Export",
				"qldb:DescribeLedger",
				"qldb:GetBlock",
				"qldb:GetDigest",
				"qldb:GetRevision",
				"qldb:ListJournalS3Exports",
				"qldb:ListJournalS3ExportsForLedger",
				"qldb:ListLedgers",
				"qldb:ListTagsForResource",
				"ram:Get*",
				"ram:List*",
				"rbin:GetRule",
				"rbin:ListRules",
				"rbin:ListTagsForResource",
				"rds:Describe*",
				"rds:Download*",
				"rds:List*",
				"redshift:Describe*",
				"redshift:GetReservedNodeExchangeOfferings",
				"redshift:View*",
				"refactor-spaces:GetApplication",
				"refactor-spaces:GetEnvironment",
				"refactor-spaces:GetResourcePolicy",
				"refactor-spaces:GetRoute",
				"refactor-spaces:GetService",
				"refactor-spaces:ListApplications",
				"refactor-spaces:ListEnvironments",
				"refactor-spaces:ListEnvironmentVpcs",
				"refactor-spaces:ListRoutes",
				"refactor-spaces:ListServices",
				"refactor-spaces:ListTagsForResource",
				"rekognition:CompareFaces",
				"rekognition:Detect*",
				"rekognition:List*",
				"rekognition:Search*",
				"resiliencehub:DescribeApp",
				"resiliencehub:DescribeAppAssessment",
				"resiliencehub:DescribeAppVersionResourcesResolutionStatus",
				"resiliencehub:DescribeAppVersionTemplate",
				"resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
				"resiliencehub:DescribeResiliencyPolicy",
				"resiliencehub:ListAlarmRecommendations",
				"resiliencehub:ListAppAssessments",
				"resiliencehub:ListAppComponentCompliances",
				"resiliencehub:ListAppComponentRecommendations",
				"resiliencehub:ListApps",
				"resiliencehub:ListAppVersionResourceMappings",
				"resiliencehub:ListAppVersionResources",
				"resiliencehub:ListAppVersions",
				"resiliencehub:ListRecommendationTemplates",
				"resiliencehub:ListResiliencyPolicies",
				"resiliencehub:ListSopRecommendations",
				"resiliencehub:ListSuggestedResiliencyPolicies",
				"resiliencehub:ListTagsForResource",
				"resiliencehub:ListTestRecommendations",
				"resiliencehub:ListUnsupportedAppVersionResources",
				"resource-groups:Get*",
				"resource-groups:List*",
				"resource-groups:Search*",
				"robomaker:BatchDescribe*",
				"robomaker:Describe*",
				"robomaker:Get*",
				"robomaker:List*",
				"route53-recovery-cluster:Get*",
				"route53-recovery-cluster:ListRoutingControls",
				"route53-recovery-control-config:Describe*",
				"route53-recovery-control-config:List*",
				"route53-recovery-readiness:Get*",
				"route53-recovery-readiness:List*",
				"route53:Get*",
				"route53:List*",
				"route53:Test*",
				"route53domains:Check*",
				"route53domains:Get*",
				"route53domains:List*",
				"route53domains:View*",
				"route53resolver:Get*",
				"route53resolver:List*",
				"rum:GetAppMonitor",
				"rum:GetAppMonitorData",
				"rum:ListAppMonitors",
				"s3-object-lambda:GetObject",
				"s3-object-lambda:GetObjectAcl",
				"s3-object-lambda:GetObjectLegalHold",
				"s3-object-lambda:GetObjectRetention",
				"s3-object-lambda:GetObjectTagging",
				"s3-object-lambda:GetObjectVersion",
				"s3-object-lambda:GetObjectVersionAcl",
				"s3-object-lambda:GetObjectVersionTagging",
				"s3-object-lambda:ListBucket",
				"s3-object-lambda:ListBucketMultipartUploads",
				"s3-object-lambda:ListBucketVersions",
				"s3-object-lambda:ListMultipartUploadParts",
				"s3:DescribeJob",
				"s3:Get*",
				"s3:List*",
				"sagemaker:Describe*",
				"sagemaker:GetSearchSuggestions",
				"sagemaker:List*",
				"sagemaker:Search",
				"savingsplans:DescribeSavingsPlanRates",
				"savingsplans:DescribeSavingsPlans",
				"savingsplans:DescribeSavingsPlansOfferingRates",
				"savingsplans:DescribeSavingsPlansOfferings",
				"savingsplans:ListTagsForResource",
				"schemas:Describe*",
				"schemas:Get*",
				"schemas:List*",
				"schemas:Search*",
				"sdb:Get*",
				"sdb:List*",
				"sdb:Select*",
				"secretsmanager:Describe*",
				"secretsmanager:GetResourcePolicy",
				"secretsmanager:List*",
				"securityhub:BatchGetStandardsControlAssociations",
				"securityhub:Describe*",
				"securityhub:Get*",
				"securityhub:List*",
				"serverlessrepo:Get*",
				"serverlessrepo:List*",
				"serverlessrepo:SearchApplications",
				"servicecatalog:Describe*",
				"servicecatalog:GetApplication",
				"servicecatalog:GetAttributeGroup",
				"servicecatalog:List*",
				"servicecatalog:Scan*",
				"servicecatalog:Search*",
				"servicediscovery:Get*",
				"servicediscovery:List*",
				"servicequotas:GetAssociationForServiceQuotaTemplate",
				"servicequotas:GetAWSDefaultServiceQuota",
				"servicequotas:GetRequestedServiceQuotaChange",
				"servicequotas:GetServiceQuota",
				"servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
				"servicequotas:ListAWSDefaultServiceQuotas",
				"servicequotas:ListRequestedServiceQuotaChangeHistory",
				"servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
				"servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
				"servicequotas:ListServiceQuotas",
				"servicequotas:ListServices",
				"ses:Describe*",
				"ses:Get*",
				"ses:List*",
				"shield:Describe*",
				"shield:Get*",
				"shield:List*",
				"signer:DescribeSigningJob",
				"signer:GetSigningPlatform",
				"signer:GetSigningProfile",
				"signer:ListProfilePermissions",
				"signer:ListSigningJobs",
				"signer:ListSigningPlatforms",
				"signer:ListSigningProfiles",
				"signer:ListTagsForResource",
				"sms-voice:DescribeAccountAttributes",
				"sms-voice:DescribeAccountLimits",
				"sms-voice:DescribeConfigurationSets",
				"sms-voice:DescribeKeywords",
				"sms-voice:DescribeOptedOutNumbers",
				"sms-voice:DescribeOptOutLists",
				"sms-voice:DescribePhoneNumbers",
				"sms-voice:DescribePools",
				"sms-voice:DescribeSenderIds",
				"sms-voice:DescribeSpendLimits",
				"sms-voice:ListPoolOriginationIdentities",
				"sms-voice:ListTagsForResource",
				"snowball:Describe*",
				"snowball:Get*",
				"snowball:List*",
				"sns:Check*",
				"sns:Get*",
				"sns:List*",
				"sqs:Get*",
				"sqs:List*",
				"sqs:Receive*",
				"ssm-contacts:DescribeEngagement",
				"ssm-contacts:DescribePage",
				"ssm-contacts:GetContact",
				"ssm-contacts:GetContactChannel",
				"ssm-contacts:ListContactChannels",
				"ssm-contacts:ListContacts",
				"ssm-contacts:ListEngagements",
				"ssm-contacts:ListPageReceipts",
				"ssm-contacts:ListPagesByContact",
				"ssm-contacts:ListPagesByEngagement",
				"ssm-incidents:GetIncidentRecord",
				"ssm-incidents:GetReplicationSet",
				"ssm-incidents:GetResourcePolicies",
				"ssm-incidents:GetResponsePlan",
				"ssm-incidents:GetTimelineEvent",
				"ssm-incidents:ListIncidentRecords",
				"ssm-incidents:ListRelatedItems",
				"ssm-incidents:ListReplicationSets",
				"ssm-incidents:ListResponsePlans",
				"ssm-incidents:ListTagsForResource",
				"ssm-incidents:ListTimelineEvents",
				"ssm:Describe*",
				"ssm:Get*",
				"ssm:List*",
				"sso-directory:Describe*",
				"sso-directory:List*",
				"sso-directory:Search*",
				"sso:Describe*",
				"sso:Get*",
				"sso:List*",
				"sso:Search*",
				"states:Describe*",
				"states:GetExecutionHistory",
				"states:List*",
				"storagegateway:Describe*",
				"storagegateway:List*",
				"sts:GetAccessKeyInfo",
				"sts:GetCallerIdentity",
				"sts:GetSessionToken",
				"support:DescribeCases",
				"sustainability:GetCarbonFootprintSummary",
				"swf:Count*",
				"swf:Describe*",
				"swf:Get*",
				"swf:List*",
				"synthetics:Describe*",
				"synthetics:Get*",
				"synthetics:List*",
				"tag:DescribeReportCreation",
				"tag:Get*",
				"tax:GetExemptions",
				"timestream:DescribeDatabase",
				"timestream:DescribeEndpoints",
				"timestream:DescribeTable",
				"timestream:ListDatabases",
				"timestream:ListMeasures",
				"timestream:ListTables",
				"timestream:ListTagsForResource",
				"transcribe:Get*",
				"transcribe:List*",
				"transfer:Describe*",
				"transfer:List*",
				"transfer:TestIdentityProvider",
				"trustedadvisor:Describe*",
				"waf-regional:Get*",
				"waf-regional:List*",
				"waf:Get*",
				"waf:List*",
				"wafv2:CheckCapacity",
				"wafv2:Describe*",
				"wafv2:Get*",
				"wafv2:List*",
				"workdocs:CheckAlias",
				"workdocs:Describe*",
				"workdocs:Get*",
				"worklink:Describe*",
				"worklink:List*",
				"workmail:Describe*",
				"workmail:Get*",
				"workmail:List*",
				"workmail:Search*",
				"workspaces:Describe*",
				"xray:BatchGet*",
				"xray:Get*"
			],
			"Resource": "*"
		}
	]
},
        PolicyName: ReadOnlyAccess
      }
    ],
    InlineDocuments: [],
    Role: TorchDeveloper
  },
  {
    AccountName: ClaimsProduction,
    AttachedRolePolicies: [
      {
        Document:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": [
                "iam:*",
                "organizations:*",
                "account:*"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "iam:CreateServiceLinkedRole",
                "iam:DeleteServiceLinkedRole",
                "iam:ListRoles",
                "organizations:DescribeOrganization",
                "account:ListRegions"
            ],
            "Resource": "*"
        }
    ]
},
        PolicyName: PowerUserAccess
      }
    ],
    InlineDocuments: [],
    Role: TorchTeamLead
  }
]